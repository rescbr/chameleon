#!/bin/bash
#
# $1: the full path to the installation package; for example:
# /Volumes/Projects/Testing/Simple_Carbon_App.pkg
#
# $2: the full path to the installation destination; for example:
# /Applications
#
# $3: the mountpoint of the destination volume; for example:
# / or /Volumes/External_Drive
# 
# $4: the root directory for the current System folder:
# /

echo "preinstall: Path to installer....... $1"
echo "preinstall: Path to destination..... $2"
echo "preinstall: Path to dest volume..... $3"
echo "preinstall: Root of system folder... $4"

#set -x # Useful for echoing everything the script does to the installer log!!

if [ ! -e "$3" ]
then
    echo "$3 volume does not exist!"
    exit 1
fi

# clean up what would otherwise turn into "//" paths
if [ "$3" == "/" ]
then
    dest_vol=""
else
    dest_vol="$3"
fi    

# Where are we, so to find the Install Log script.
MYLOCATION="${PWD}/${BASH_ARGV[0]}"
export MYLOCATION="${MYLOCATION%/*}"
scriptDir=$MYLOCATION

# Has install log already been generated?
if [ ! -f "${dest_vol}"/.ChameleonLogFlag ]; then
	# Write some information to the Install Log
	versionNumber=`cat "${scriptDir}"/Resources/version`
	revisionNumber=`cat "${scriptDir}"/Resources/revision`
	"$scriptDir"InstallLog.sh "${dest_vol}" "Installer version: ${versionNumber} ${revisionNumber}"
	"$scriptDir"InstallLog.sh "${dest_vol}" "Running Post postinstall script"
	"$scriptDir"InstallLog.sh "${dest_vol}" "Target volume = ${dest_vol}"
else
	"$scriptDir"InstallLog.sh "${dest_vol}" "Running Post postinstall script"
fi

# set temporary directory
chamTemp="$dest_vol/usr/local/chamTemp"

# Check for stopped installation due to Chameleon
# already existing on the same disk.
if [ ! -f "$dest_vol"/.ChameleonExists ]; then

    # ---------------------------------------------
    # Add any installed modules to the Install Log
    # ---------------------------------------------
    if [ -e "${chamTemp}"/Extra/modules ]; then
        ls "${chamTemp}"/Extra/modules | while read FILE
        do
            "$scriptDir"InstallLog.sh "${dest_vol}" "Installed module:$FILE"
        done
    fi
			
    # ---------------------------------------------
    # Add any installed themes to the Install Log
    # ---------------------------------------------
    if [ -e "${chamTemp}"/Extra/Themes ]; then
        ls "${chamTemp}"/Extra/Themes | while read FILE
        do
            "$scriptDir"InstallLog.sh "${dest_vol}" "Installed Theme:$FILE"
        done
    fi

    # ---------------------------------------------
    # Build org.chameleon.Boot.plist
    # ---------------------------------------------
    # All options selected are now dummy files with
    # the filename of the option and value residing
    # in /usr/local/chamTemp/options/
    # for example. Boot Banner=Yes

    # Are there any options to build?
    if [ "$(ls -A ${chamTemp}/options )" ]; then

        # Check for temporary directory/Extra folder.
        if [ ! -d "$chamTemp"/Extra ]; then
            mkdir "$chamTemp"/Extra
        fi

        # Create template for org.chameleon.Boot.plist"
        tempOCBP="$chamTemp"/Extra/org.chameleon.Boot.plist
        cp "$4"/Library/Preferences/SystemConfiguration/com.apple.Boot.plist "$tempOCBP"

        # Read list of all boot options the user added.
        arrayCount=0
        kernelFlagCount=0
        while read FILE
        do
            options[arrayCount]="${FILE##*/}"

            # Check keyRead for 'KF' at beginning to
            # indicate that should be a kernel flag
            if [ ${options[arrayCount]:0:2} = "KF" ];then
                # plistbuddy only add's if the key doesn't already exist.
                # So let's store any kernelflags and add them all at the
                # same time once when we reach the end of the options list.	
                kernelflag[kernelFlagCount]="${options[arrayCount]##*flag=}"
                "$scriptDir"InstallLog.sh "${dest_vol}" "Added kernel flag: ${kernelflag[kernelFlagCount]}"
                (( kernelFlagCount++ ))	
            else
                keyRead="${options[$arrayCount]%=*}"
                value="${options[$arrayCount]#*=}"
                # escape any spaces
                keyToUse=$( echo $keyRead | sed 's/ /\\ /g' )
                if [ "${keyToUse}" != "DONT" ] && [ "${value}" != "USE" ]; then
                    sudo /usr/libexec/plistbuddy -c "Add :${keyToUse} string ${value}" "$tempOCBP"
                    "$scriptDir"InstallLog.sh "${dest_vol}" "Added boot option: ${keyRead}=${value}"
                fi
            fi	
            (( arrayCount++ ))
        done < <(ls "${chamTemp}"/options )

        if [ $kernelFlagCount -gt 0 ]; then
            # Add kernel flags
            for (( i=0 ; i < $kernelFlagCount ; i++ ))
            do	
                # Add any kernel flags together in to one string.
                kernelFlagString="${kernelFlagString} ${kernelflag[i]}"
            done
            sudo /usr/libexec/plistbuddy -c "Add :Kernel\ Flags string $kernelFlagString" "$tempOCBP"
            if [ ${returnValue}=1 ]; then # key already exists.
                sudo /usr/libexec/plistbuddy -c "Delete :Kernel\ Flags" "$tempOCBP"
                sudo /usr/libexec/plistbuddy -c "Add :Kernel\ Flags string $kernelFlagString" "$tempOCBP"
            fi
        fi	
    fi

    # ---------------------------------------------
    # Copy temp Extra folder to target destination
    # ---------------------------------------------
    # If we've made a temporary Extra folder to use then
    # check for an existing /Extra folder. If found, back it up
    # before copying the temporary Extra folder to destination.
    # Extra folder now resides in /usr/local/chamTemp/
    # Copy /usr/local/chamTemp/Extra to correct location.

    if [ -d "$chamTemp"/Extra ]; then

        if [ ! -f "$dest_vol"/.ChameleonEFI ]; then
            # The Standard install option chosen

            # Does and /Extra folder already exist?
            if [ -e "$dest_vol"/Extra ]; then
                "$scriptDir"InstallLog.sh "${dest_vol}" "Found existing $dest_vol/Extra folder. Renaming it $dest_vol/Extra-OLD-$( date "+%H-%M-%S" )"
                mv "$dest_vol/Extra" "$dest_vol/Extra_OLD-"$( date "+%H-%M-%S" )
            fi
            "$scriptDir"InstallLog.sh "${dest_vol}" "Writing folder: $dest_vol/Extra"
            cp -R "$chamTemp"/Extra "$dest_vol"
        else
            # The EFI system partition install option was chosen

            # Does a /Volumes/Extra folder already exist?
            if [ -e "/Volumes/EFI/Extra" ]; then
                "$scriptDir"InstallLog.sh "${dest_vol}" "Found existing /Volumes/EFI/Extra folder. Renaming it Extra-OLD-$( date "+%H-%M-%S" )"
                mv "/Volumes/EFI/Extra" "/Volumes/EFI/Extra_OLD-"$( date "+%H-%M-%S" )
            fi
            "$scriptDir"InstallLog.sh "${dest_vol}" "Writing folder: /Volumes/EFI/Extra"
            cp -R "$chamTemp"/Extra "/Volumes/EFI"

            # unmount /Volumes/EFI
            attempts=1
            while [ "$( df | grep EFI )" ] && [ "${attempts}" -lt 5 ]; do
                echo "Unmounting $( df | grep EFI | awk '{print $1}' )"
                "$scriptDir"InstallLog.sh "${dest_vol}" "Unmounting $( df | grep EFI | awk '{print $1}' )"
                umount -f $( df | grep EFI | awk '{print $1}' )
                attempts=$(( ${attempts} + 1 ))
            done
        fi
    fi
else
    echo "Removing /.ChameleonExists file"
    "$scriptDir"InstallLog.sh "${dest_vol}" "Cleanup 4"
    rm "$dest_vol"/.ChameleonExists
fi

# ---------------------------------------------
# Cleanup
# ---------------------------------------------

# delete the temporary Chameleon folder
if [ -e "$chamTemp" ]; then
	echo "Removing $chamTemp directory"
	"$scriptDir"InstallLog.sh "${dest_vol}" "Cleanup 1"
	rm -rf "$chamTemp"
fi

# Remove /.ChameleonEFI file
if [ -f "$dest_vol"/.ChameleonEFI ]; then
   	echo "Removing /.ChameleonEFI file"
	"$scriptDir"InstallLog.sh "${dest_vol}" "Cleanup 2"
    	rm "$dest_vol"/.ChameleonEFI
fi

# Remove /.ChameleonLogFlag file
if [ -f "$dest_vol"/.ChameleonLogFlag ]; then
	echo "Removing /.ChameleonLogFlag file"
	"$scriptDir"InstallLog.sh "${dest_vol}" "Cleanup 3"

	# we have to add the final install log messages before
	# deleting /.ChameleonLogFlag.
	"$scriptDir"InstallLog.sh "${dest_vol}" "LineBreak"
	"$scriptDir"InstallLog.sh "${dest_vol}" "Post script complete"

	rm "$dest_vol"/.ChameleonLogFlag
fi

echo "Done..."
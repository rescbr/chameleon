
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scanYY_create_buffer
#define yy_delete_buffer scanYY_delete_buffer
#define yy_flex_debug scanYY_flex_debug
#define yy_init_buffer scanYY_init_buffer
#define yy_flush_buffer scanYY_flush_buffer
#define yy_load_buffer_state scanYY_load_buffer_state
#define yy_switch_to_buffer scanYY_switch_to_buffer
#define yyin scanYYin
#define yyleng scanYYleng
#define yylex scanYYlex
#define yylineno scanYYlineno
#define yyout scanYYout
#define yyrestart scanYYrestart
#define yytext scanYYtext
#define yywrap scanYYwrap
#define yyalloc scanYYalloc
#define yyrealloc scanYYrealloc
#define yyfree scanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scanYYrestart(scanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t scanYYleng;

extern FILE *scanYYin, *scanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scanYYrestart()), so that the user can continue scanning by
	 * just pointing scanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t scanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scanYYwrap()'s to do buffer switches
 * instead of setting up a fresh scanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scanYYrestart (FILE *input_file  );
void scanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scanYY_create_buffer (FILE *file,int size  );
void scanYY_delete_buffer (YY_BUFFER_STATE b  );
void scanYY_flush_buffer (YY_BUFFER_STATE b  );
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scanYYpop_buffer_state (void );

static void scanYYensure_buffer_stack (void );
static void scanYY_load_buffer_state (void );
static void scanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *scanYYalloc (yy_size_t  );
void *scanYYrealloc (void *,yy_size_t  );
void scanYYfree (void *  );

#define yy_new_buffer scanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scanYYin = (FILE *) 0, *scanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int scanYYlineno;

int scanYYlineno = 1;

extern char *scanYYtext;
#define yytext_ptr scanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 630
#define YY_END_OF_BUFFER 631
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[4339] =
    {   0,
       39,   39,  317,  317,  317,  317,  317,  317,  314,  314,
       51,   51,   57,   57,  373,  373,  373,  373,  631,  625,
      630,  620,  630,  621,  624,  625,  630,  622,  625,  630,
      623,  625,  630,  625,  630,  625,  630,  196,  625,  630,
      202,  625,  630,  202,  625,  630,  197,  620,  630,  201,
      202,  621,  624,  625,  630,  202,  622,  625,  630,  202,
      623,  625,  630,  202,  625,  630,  202,  625,  630,  625,
      630,  620,  630,  625,  630,  625,  630,  625,  630,  625,
      630,  480,  625,  630,  481,  625,  630,  491,  492,  625,
      630,16874,  518,  625,  630,  625,  630,  625,  630,  620,

      630,  625,  630,  625,  630,  625,  630,  512,  625,  630,
      497,  625,  630,  517,  625,  630,  494,  625,  630,  625,
      630,  511,  625,  630,  530,  625,  630,  625,  630,  496,
      625,  630,  496,  625,  630,  496,  625,  630,  508,  625,
      630,  507,  620,  630,  508,  621,  624,  625,  630,  500,
      508,  622,  625,  630,  508,  625,  630,  508,  623,  625,
      630,  508,  625,  630,  503,  508,  625,  630,  502,  508,
      625,  630,  504,  508,  625,  630,  508,  625,  630,  506,
      508,  625,  630,  506,  508,  625,  630,  501,  508,  625,
      630,  625,  630,  625,  630,  510,  625,  630,  509,  625,

      630,  487,  625,  630,  487,  621,  624,  625,  630,  487,
      622,  625,  630,  487,  623,  625,  630,  149,  487,  625,
      630,  150,  487,  625,  630,  487,  625,  630,  486,  487,
      625,  630,  485,  487,  625,  630,   40,  625,  630,   39,
       40,  625,  630,   38,  620,  630,   40,  621,  624,  625,
      630,   40,  622,  625,  630,   40,  625,  630,   40,  623,
      625,  630,   40,  625,  630,   37,   40,  625,  630,   34,
       40,  625,  630,   35,   40,  625,  630,   36,   40,  625,
      630,   42,  625,  630,   42,  621,  624,  625,  630,   42,
      622,  625,  630,   42,  623,  625,  630,   42,  625,  630,

       41,   42,  625,  630,  424,  625,  630,  423,  620,  630,
      424,  621,  624,  625,  630,  424,  622,  625,  630,  424,
      625,  630,  424,  623,  625,  630,  424,  625,  630,  421,
      424,  625,  630,  422,  424,  625,  630,  625,  630,  620,
      630,  625,  630,  625,  630,  547,  625,  630,  625,  630,
      531,  625,  630,  547,  625,  630,  525,  526,  527,  625,
      630,  625,  630,  548,  625,  630,  524,  625,  630,  523,
      524,  625,  630,  523,  620,  630,  524,  621,  624,  625,
      630,  524,  622,  625,  630,  524,  623,  625,  630,  524,
      625,  630,  524,  625,  630,  524,  625,  630,    9,  621,

      624,  625,  630,    7,  623,  625,  630,    2,  625,  630,
       10,  625,  630,   10,  625,  630,    1,  625,  630,  281,
      625,  630,  281,  621,  624,  625,  630,  281,  622,  625,
      630,  281,  623,  625,  630,   11,  281,  625,  630,  281,
      625,  630,   11,  281,  625,  630,   61,  625,  630,   61,
      620,  630,   61,  625,  630,  625,  630,  186,  622,  625,
      630,  625,  630,  204,  625,  630,  205,  625,  630,  369,
      625,  630,   47,  625,  630,  282,  625,  630,  172,  625,
      630,  625,  630,  625,  630,  280,  625,  630,  282,  625,
      630,  304,  625,  630,  211,  625,  630,  625,  630,  625,

      630,  169,  625,  630,  169,  625,  630,  283,  625,  630,
      204,  625,  630,  169,  625,  630,  169,  625,  630,  169,
      625,  630,  169,  625,  630,  169,  625,  630,  169,  625,
      630,  169,  625,  630,  169,  625,  630,  169,  625,  630,
      169,  625,  630,  169,  625,  630,  169,  625,  630,  169,
      625,  630,  169,  625,  630,  169,  625,  630,  169,  625,
      630,  169,  625,  630,  169,  625,  630,  566,  625,  630,
       15,   17,  625,  630,   16,  620,  630,   15,   17,  621,
      624,  625,  630,   15,   17,  622,  625,  630,   15,   17,
      623,  625,  630,   15,   17,  625,  630,   17,  625,  630,

      625,  630,  620,  630,  625,  630,  625,  630,  625,  630,
      169,  625,  630,  625,  630,  620,  630,  625,  630,  186,
      622,  625,  630,  625,  630,  310,  625,  630,  315,  625,
      630,  625,  630,  312,  625,  630,  311,  625,  630,  309,
      625,  630,  316,  625,  630,  625,  630,  419,  622,  625,
      630,  450,  625,  630,  452,  625,  630,  451,  625,  630,
      452,  625,  630,  437,  625,  630,  418,  437,  625,  630,
      418,  620,  630,  437,  621,  624,  625,  630,  419,  437,
      622,  625,  630,  437,  623,  625,  630,  407,  437,  625,
      630,  408,  437,  625,  630,  417,  437,  625,  630,  437,

      625,  630,  445,  625,  630,  445,  621,  624,  625,  630,
      445,  622,  625,  630,  445,  623,  625,  630,  443,  445,
      625,  630,  444,  445,  625,  630,  445,  625,  630,  449,
      625,  630,  448,  620,  630,  449,  621,  624,  625,  630,
      449,  622,  625,  630,  449,  623,  625,  630,  449,  625,
      630,  447,  449,  625,  630,  446,  449,  625,  630,  418,
      437,  625,  630,  418,  620,  630,  437,  625,  630,  409,
      437,  625,  630,  437,  625,  630,  420,  437,  625,  630,
      432,  437,  625,  630,  432,  437,  625,  630,  432,  437,
      625,  630,  432,  437,  625,  630,  432,  437,  625,  630,

      432,  437,  625,  630,  432,  437,  625,  630,  432,  437,
      625,  630,  432,  437,  625,  630,  120,  625,  630,  120,
      620,  630,  120,  621,  624,  625,  630,  120,  622,  625,
      630,  120,  623,  625,  630,  122,  625,  630,  120,  625,
      630,  119,  120,  625,  630,  120,  625,  630,  299,  625,
      630,  299,  621,  624,  625,  630,  299,  622,  625,  630,
      299,  623,  625,  630,  299,  625,  630,  298,  299,  625,
      630,  296,  299,  625,  630,  317,  341,  625,  630,  317,
      339,  341,  625,  630,  339,  620,  630,  339,  341,  625,
      630,  321,  341,  621,  624,  625,  630,  319,  341,  622,

      625,  630,  324,  341,  623,  625,  630,  341,  625,  630,
      341,  625,  630,  326,  341,  625,  630,  328,  341,  625,
      630,  328,  341,  625,  630,  341,  625,  630,  327,  341,
      625,  630,  625,  630,  138,  625,  630,  136,  625,  630,
      136,  625,  630,  625,  630,  620,  630,  625,  630,  625,
      630,  625,  630,  137,  625,  630,  462,  473,  625,  630,
      462,  473,  625,  630,  461,  620,  630,  459,  473,  621,
      624,  625,  630,  469,  473,  622,  625,  630,  472,  473,
      623,  625,  630,  473,  625,  630,  473,  625,  630,  473,
      625,  630,  454,  473,  625,  630,  455,  473,  625,  630,

      462,  473,  625,  630,  460,  469,  473,  622,  625,  630,
      463,  620,  630,  473,  621,  624,  625,  630,  473,  625,
      630,  473,  625,  630,  458,  625,  630,  479,  625,  630,
      478,  620,  630,  475,  479,  621,  624,  625,  630,  479,
      622,  625,  630,  479,  623,  625,  630,  479,  625,  630,
      479,  625,  630,  479,  625,  630,  479,  621,  624,  625,
      630,  476,  479,  623,  625,  630,  467,  473,  621,  624,
      625,  630,  469,  473,  622,  625,  630,  473,  625,  630,
      468,  473,  625,  630,  453,  473,  625,  630,  192,  625,
      630,  194,  620,  630,  192,  625,  630,  192,  621,  624,

      625,  630,  192,  622,  625,  630,  192,  623,  625,  630,
      192,  625,  630,  192,  625,  630,  619,  625,  630,  619,
      625,  630,  619,  621,  624,  625,  630,  619,  622,  625,
      630,  619,  623,  625,  630,  625,  630,  619,  625,  630,
      625,  630,  618,  620,  630,  621,  624,  625,  630,  622,
      625,  630,  623,  625,  630,  625,  630,  625,  630,    5,
      625,  630,    6,  625,  630,    3,  625,  630,    4,  625,
      630,  308,  625,  630,  307,  308,  625,  630,  307,  620,
      630,  308,  621,  624,  625,  630,  308,  622,  625,  630,
      308,  623,  625,  630,  308,  625,  630,  306,  308,  625,

      630,  305,  308,  625,  630,  542,  625,  630,  543,  625,
      630,  546,  621,  624,  625,  630,  544,  625,  630,  545,
      625,  630,  303,  625,  630,  302,  621,  624,  625,  630,
      303,  622,  625,  630,  303,  623,  625,  630,  303,  625,
      630,  300,  625,  630,  301,  625,  630,  314,  625,  630,
      313,  620,  630,  314,  621,  624,  625,  630,  314,  622,
      625,  630,  314,  623,  625,  630,  314,  625,  630,  625,
      630,  332,  625,  630,  331,  625,  630,  331,  625,  630,
      331,  625,  630,  181,  625,  630,  179,  620,  630,  181,
      621,  624,  625,  630,  181,  622,  625,  630,  181,  623,

      625,  630,  181,  625,  630,  180,  181,  625,  630,  184,
      625,  630,  184,  625,  630,  183,  620,  630,  184,  621,
      624,  625,  630,  184,  622,  625,  630,  184,  623,  625,
      630,  184,  625,  630,  184,  625,  630,  558,  560,  625,
      630,  553,  560,  625,  630,  553,  620,  630,  558,  560,
      621,  624,  625,  630,  558,  560,  622,  625,  630,  558,
      560,  623,  625,  630,  560,  625,  630,  560,  625,  630,
      560,  625,  630,  558,  560,  625,  630,  625,  630,   75,
      625,  630,   74,  625,  630,  625,  630,  625,  630,  625,
      630,  128,  625,  630,  625,  630,  620,  630,  625,  630,

      131,  625,  630,  130,  625,  630,  574,  625,  630,  575,
      620,  630,  574,  621,  624,  625,  630,  574,  622,  625,
      630,  574,  623,  625,  630,  574,  625,  630,  574,  625,
      630,  574,  625,  630,  574,  625,  630,  574,  625,  630,
      567,  574,  625,  630,  568,  574,  625,  630,  483,  625,
      630,  190,  625,  630,  191,  620,  630,  190,  621,  624,
      625,  630,  190,  622,  625,  630,  190,  623,  625,  630,
      190,  625,  630,  625,  630,  625,  630,  199,  625,  630,
      199,  621,  624,  625,  630,  199,  622,  625,  630,  199,
      623,  625,  630,  199,  625,  630,  198,  199,  625,  630,

      436,  625,  630,  436,  625,  630,  436,  621,  624,  625,
      630,  436,  622,  625,  630,  436,  625,  630,  436,  623,
      625,  630,  433,  436,  625,  630,  436,  625,  630,  433,
      436,  625,  630,  434,  436,  625,  630,  435,  436,  625,
      630,  225,  229,  625,  630,  228,  620,  630,  227,  229,
      621,  624,  625,  630,  225,  229,  622,  625,  630,  225,
      229,  623,  625,  630,  225,  229,  625,  630,  625,  630,
       48,  625,  630,   50,  625,  630,   59,  625,  630,   49,
      625,  630,   60,  625,  630,   51,  625,  630,   51,  620,
      630,   51,  621,  624,  625,  630,   51,  622,  625,  630,

       51,  623,  625,  630,   52,  625,  630,   51,  625,  630,
      625,  630,   56,  625,  630,  625,  630,   53,  625,  630,
       54,  625,  630,   57,  625,  630,   57,  620,  630,   57,
      621,  624,  625,  630,   57,  622,  625,  630,   57,  623,
      625,  630,   58,  625,  630,   57,  625,  630,  484,  625,
      630,   71,  625,  630,  625,  630,  625,  630,  625,  630,
      625,  630,  625,  630,  625,  630,   73,  625,  630,  158,
      625,  630,  625,  630,  155,  625,  630,  159,  625,  630,
      159,  625,  630,  159,  625,  630,  625,  630,  160,  625,
      630,  156,  625,  630,  625,  630,  625,  630,  625,  630,

      625,  630,  625,  630,  166,  625,  630,  625,  630,  167,
      625,  630,  231,  625,  630,  231,  625,  630,  223,  620,
      630,  215,  231,  621,  624,  625,  630,  231,  622,  625,
      630,  221,  231,  623,  625,  630,  212,  219,  231,  625,
      630,  220,  231,  625,  630,  214,  231,  625,  630,  231,
      625,  630,  231,  625,  630,  214,  231,  625,  630,  219,
      231,  625,  630,  220,  231,  625,  630,  231,  625,  630,
      231,  625,  630,  219,  231,  625,  630,  213,  219,  231,
      625,  630,  625,  630,  620,  630,  625,  630,  625,  630,
      625,  630,  185,  625,  630,  625,  630,  620,  630,  625,

      630,  625,  630,  334,  625,  630,  335,  625,  630,  625,
      630,  335,  625,  630,  336,  625,  630,  333,  625,  630,
      337,  625,  630,  338,  625,  630,  151,  625,  630,  151,
      621,  624,  625,  630,  151,  622,  625,  630,  151,  623,
      625,  630,  149,  151,  625,  630,  150,  151,  625,  630,
      151,  625,  630,  143,  151,  625,  630,  145,  151,  625,
      630,16531,  345,  625,  630,  345,  625,  630,  620,  630,
      345,  625,  630,  345,  621,  624,  625,  630,  345,  622,
      625,  630,  345,  625,  630,  345,  623,  625,  630,  345,
      625,  630,  345,  625,  630,  344,  345,  625,  630,  349,

      625,  630,  347,  620,  630,  349,  621,  624,  625,  630,
      349,  622,  625,  630,  349,  623,  625,  630,  348,  349,
      625,  630,  349,  625,  630,  353,  625,  630,  355,  625,
      630,  625,  630,  370,  406,  625,  630,  373,  406,  625,
      630,  373,  405,  620,  630,  374,  406,  621,  624,  625,
      630,  406,  622,  625,  630,  404,  406,  623,  625,  630,
      375,  406,  625,  630,  376,  406,  625,  630,  406,  625,
      630,  406,  625,  630,  394,  406,  625,  630,  395,  406,
      625,  630,  178,  625,  630,  177,  620,  630,  178,  621,
      624,  625,  630,  178,  622,  625,  630,  178,  623,  625,

      630,  178,  625,  630,  176,  178,  625,  630,  625,  630,
      125,  625,  630,  625,  630,  127,  625,  630,  126,  625,
      630,  237,  625,  630,  236,  620,  630,  233,  237,  621,
      624,  625,  630,  237,  622,  625,  630,  237,  623,  625,
      630,  237,  625,  630,  237,  625,  630,  237,  625,  630,
      237,  621,  624,  625,  630,  234,  237,  623,  625,  630,
      243,  625,  630,  242,  620,  630,  239,  243,  621,  624,
      625,  630,  243,  622,  625,  630,  243,  623,  625,  630,
      243,  625,  630,  243,  625,  630,  243,  625,  630,  243,
      621,  624,  625,  630,  240,  243,  623,  625,  630,  250,

      251,  625,  630,  247,  620,  630,  244,  251,  621,  624,
      625,  630,  250,  251,  622,  625,  630,  248,  251,  623,
      625,  630,  245,  251,  625,  630,  246,  251,  625,  630,
      250,  251,  625,  630,  265,  268,  625,  630,  267,  620,
      630,  260,  268,  621,  624,  625,  630,  265,  268,  622,
      625,  630,  261,  268,  623,  625,  630,  266,  268,  625,
      630,  262,  268,  625,  630,  263,  268,  625,  630,  258,
      259,  625,  630,  255,  620,  630,  252,  259,  621,  624,
      625,  630,  258,  259,  622,  625,  630,  256,  259,  623,
      625,  630,  253,  259,  625,  630,  254,  259,  625,  630,

      259,  625,  630,  276,  279,  625,  630,  278,  620,  630,
      271,  279,  621,  624,  625,  630,  276,  279,  622,  625,
      630,  272,  279,  623,  625,  630,  277,  279,  625,  630,
      273,  279,  625,  630,  274,  279,  625,  630,  276,  279,
      622,  625,  630,  552,  625,  630,  552,  625,  630,  551,
      620,  630,  552,  621,  624,  625,  630,  552,  622,  625,
      630,  552,  623,  625,  630,  549,  552,  625,  630,  550,
      552,  625,  630,  552,  625,  630,  541,  625,  630,  534,
      541,  625,  630,  534,  620,  630,  541,  621,  624,  625,
      630,  541,  622,  625,  630,  541,  623,  625,  630,  539,

      541,  625,  630,  540,  541,  625,  630,  541,  625,  630,
      532,  541,  625,  630,  533,  541,  625,  630,  541,  625,
      630,  430,  625,  630,  431,  620,  630,  426,  430,  621,
      624,  625,  630,  430,  622,  625,  630,  430,  625,  630,
      427,  430,  623,  625,  630,  430,  625,  630,  425,  430,
      625,  630,  429,  430,  625,  630,  356,  437,  625,  630,
      357,  437,  625,  630,  361,  625,  630,  361,  621,  624,
      625,  630,  361,  622,  625,  630,  361,  623,  625,  630,
      361,  625,  630,  361,  625,  630,  366,  625,  630,  365,
      366,  625,  630,  365,  620,  630,  366,  621,  624,  625,

      630,  366,  622,  625,  630,  366,  623,  625,  630,  362,
      366,  625,  630,  363,  366,  625,  630,  364,  366,  625,
      630,  366,  625,  630,  297,  299,  625,  630,  371,  406,
      625,  630,  405,  620,  630,  401,  406,  621,  624,  625,
      630,  371,  406,  622,  625,  630,  406,  623,  625,  630,
      371,  406,  625,  630,  406,  625,  630,  406,  621,  624,
      625,  630,  402,  406,  623,  625,  630,  372,  406,  625,
      630,  372,  406,  622,  625,  630,  396,  406,  625,  630,
      397,  406,  625,  630,  406,  625,  630,  398,  406,  625,
      630,  399,  406,  625,  630,  383,  392,  625,  630,  391,

      620,  630,  383,  392,  621,  624,  625,  630,  383,  392,
      622,  625,  630,  383,  392,  623,  625,  630,  392,  625,
      630,  383,  392,  625,  630,  392,  625,  630,  383,  392,
      625,  630,  392,  625,  630,16766,  389,  390,  625,  630,
      385,  620,  630,  389,  390,  621,  624,  625,  630,  389,
      390,  622,  625,  630,  389,  390,  623,  625,  630,  389,
      390,  625,  630,  390,  625,  630,  392,  625,  630,  392,
      621,  624,  625,  630,  392,  622,  625,  630,  392,  623,
      625,  630,  392,  625,  630,  392,  625,  630,  287,  625,
      630,  287,  621,  624,  625,  630,  287,  622,  625,  630,

      287,  623,  625,  630,  287,  625,  630,  284,  287,  625,
      630,  287,  625,  630,  295,  625,  630,  295,  625,  630,
      620,  630,  295,  621,  624,  625,  630,  295,  622,  625,
      630,  295,  625,  630,  295,  623,  625,  630,  295,  625,
      630,  294,  295,  625,  630,  291,  295,  625,  630,  295,
      625,  630,  625,  630,  620,  630,  625,  630,  288,  625,
      630,  615,  625,  630,  615,  621,  624,  625,  630,  615,
      622,  625,  630,  615,  623,  625,  630,  601,  615,  625,
      630,  615,  625,  630,  615,  625,  630,  606,  625,  630,
      606,  625,  630,  620,  630,  606,  625,  630,  606,  621,

      624,  625,  630,  606,  622,  625,  630,  606,  625,  630,
      606,  623,  625,  630,  604,  606,  625,  630,  605,  606,
      625,  630,  606,  625,  630,  606,  625,  630,  603,  606,
      625,  630,  614,  625,  630,  614,  625,  630,  614,  621,
      624,  625,  630,  614,  622,  625,  630,  614,  623,  625,
      630,  614,  625,  630,  614,  625,  630,  614,  625,  630,
      614,  625,  630,  614,  625,  630,  607,  614,  625,  630,
      613,  625,  630,  613,  621,  624,  625,  630,  613,  622,
      625,  630,  613,  623,  625,  630,  612,  613,  625,  630,
      613,  625,  630,  616,  625,  630,  616,  621,  624,  625,

      630,  616,  622,  625,  630,  616,  623,  625,  630,  616,
      625,  630,  625,  630,  577,  620,  630,  621,  624,  625,
      630,  622,  625,  630,  623,  625,  630,  625,  630,  588,
      590,  625,  630,  588,  590,  625,  630,  589,  620,  630,
      588,  590,  621,  624,  625,  630,  588,  590,  622,  625,
      630,  588,  590,  623,  625,  630,  590,  625,  630,  590,
      625,  630,  588,  590,  625,  630,  590,  625,  630,  590,
      625,  630,  588,  590,  625,  630,  590,  625,  630,  590,
      625,  630,  596,  599,  625,  630,  598,  620,  630,  596,
      599,  621,  624,  625,  630,  596,  599,  622,  625,  630,

      599,  625,  630,  596,  599,  623,  625,  630,  599,  625,
      630,  599,  625,  630,  599,  625,  630,  599,  625,  630,
      596,  599,  625,  630,  599,  625,  630,16979,  627,  629,
      196,  195,  196,  627,  629,  200,  518,  491,16874,  491,
      492,16874,  492,  489, 8682,  491,  492,16874,  488,  482,
      518,  491,  492,16874,  528,  528,  528,  496,  517,  627,
      629,  493,  496,  496,  496,  504,  627,  629,  504,  506,
      506,  506,  170,  509,  509,  142,  144,   39,   34,   34,
      421,  421,  526,  527,  526,  527,  548,  528,  528,  526,
      527,  528,  526,  527,  528,  525,  526,  527,  547,  525,

      526,  527,  525,  548,   61,   61,  186,  169,  169,   20,
       21,  205,  343,   47,  627,  629,  171,  173,   18,   72,
       72,   72,   72,   72,   72,  169,  140,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,   15,
       15,  627,   15,  629,   13,  169,  169,  169,  141,  186,
      309,  627,  629,  309,  418,  417,  417,  418,  432,  627,
      629,  416,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  121,  317,  317,  339,  339,  319,  319,  322,

      627,  318,  629,  320,  136,  136,  136,  136,  137,  137,
      137,  462,  462,  465,  627,  466,  629,  470,  462,  460,
      465,  627,  466,  629,  464,  477,  477,  627,  477,  629,
      474,  466,  629,  194,  194,  193,  619,  619,  628,  626,
      627,  619,  626,  629,  618,  627,  629,  617,  618,  307,
      303,  303,  627,  303,  629,  314,  314,  627,  314,  629,
      331,  331,  331,  331,  558,  553,  559,  554,  627,  555,
      629,  558,  558,  558,   74,   74,  128,  128,  130,  130,
      189,  434,  627,  629,  434,  225,  226,  225,  627,  225,
      629,   49,   50,   49,   51,   51,  627,   51,  629,   54,

       54,   54,   53,   57,   58,   57,  627,   57,  629,  158,
      159,  159,  159,  159,  160,  160,  166,  166,  167,  167,
      216,  627,  629,  217,  218,  230,  224,  368,  174,  333,
      333,  333,16531,  146,  344,  344,  344,  351,  350,  352,
      354,  370,  373,  379,  627,  380,  629,  175,  125,  125,
      126,  126,  235,  235,  627,  235,  629,  232,  241,  241,
      627,  241,  629,  238,  250,  250,  627,  250,  629,  265,
      258,  276,  276,  549,  534,  535,  537,  429,  429,  358,
      359,  360,  365,  364,  364,  371,  371,  627,  371,  629,
      400,  372,  383,  384,  383,  629,  383,16766, 8574,  389,

      389,  627,  389,  629,  291,  293,  292,  291,  290,  288,
      288,  288,  289,  288,  602,  603,  603,  603,  610,  577,
      627,  629,  588,  588,  588,  578,  582,  627,  581,  629,
      588,  588,  588,  579,  579,  580,  581,  629,  596,  597,
      597,  627,  597,  629,  596,16979, 8787,  491,16874,  491,
    16874,  492,  492,  491,  492,16874,  515,  561,  516,  563,
      496,  496,  499,  499,  506,  506,  526,  527,  526,  527,
      526,  527,  525,    8,   61,   61,  169,   20,  343,  561,
      563,  171,   62,   72,   72,   72,   72,   72,   72,   72,
       72,  139,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  561,  563,  561,  563,
      416,  432,  432,  413,  432,  432,  432,  432,  432,  432,
      432,  118,  319,  325,  322,  323,  318,  136,  136,  137,
      471,  464,  193,  331,  331,  558,  558,  558,   74,  132,
      133,  571,  570,  569,  203,  561,  563,   60,  159,  159,
      159,  222,  333, 8339,  148,  344,  346,  403,  377,  377,
      249,  264,  257,  275,  276,  428,  387,  293,  290,  288,

      288,  603,  610,  588,  588,  584,  579,  580,  580,  593,
      208,  491,16874,  492,  514,  562,  513,  564,  513,  564,
      529,  496,  496,  499,  498,  506,  506,  485,  526,  527,
      526,  527,    8,   61,   61,  342,  562,  562,  562,  209,
      564,  564,  564,  564,  210,   72,   72,   72,   72,   72,
       72,   72,   72,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  208,  562,  208,  564,

      413,  432,  432,  413,  432,  432,  432,  432,  439,  438,
      432,  319,  325,  136,  136,  471,  331,  331,  558,  558,
      558,   74,  133,  129,  203,   55,   69,  159,  159,  161,
      222, 8339,  403,  377,  378,  249,  264,  257,  275,  276,
      536,  428,  388,  576,  588,  588,  583,  583,  496,  496,
      505,  506,  485,  485,  526,  527,  207,  206,   61,   61,
      188,  367,  210,   12,   72,   72,   72,   72,   72,   72,
       72,   72,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,   19,   19,   19,   19,  140,   19,  169,  116,
      115,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,   13,  432,  414,  432,  432,  432,  432,
      432,  432,  117,  188,  319,  340,  136,  456,  457,  331,
      331,  182,  556,  558,  558,  558,  558,  573,  157,  159,
      159,  162,  381,  386,  608,  585,  588,  588,  586,  496,
      496,16879,  485,  526,  527,   61,   61,  116,  210,   72,
       95,   72,   72,   72,   72,   72,   72,   72,   72,  169,
      169,  169,  169,  169,   97,   96,  169,  169,  169,   32,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,16490,  169,  169,  169,  114,  113,
      134,  169,  169,  169,  414,  432,  414,  432,  432,  412,
      432,  440,  432,  432,  136,  330,  331,  558,  558,  558,
      572,   67,   68,  159,  608,  611,  587,  588,  591,  496,
     8687, 8687,  526,  527,  520,   61,   61,   97,   32,16490,
      114,  187,   72,   72,   72,   72,   72,   72,   72,   72,
      169,  169,  169,  169,  169,  169,  169,  169,  169,   78,
      169,  169,  169,   81,  169,  169,   23,  169,  169,   88,
      169,  169,  169,  169,  169,   28,  169,  169,  169,  169,

       77, 8298,  105,  169,  169,  169,  169,  169,  169,  412,
      432,  432,  441,  412,  442,  432,  136,  331,  558,  558,
      558,  159,  163,  393,  286,  285,  592,  526,  527,  522,
      519,   61,   61,   78,   81,   23,   88,   28,   77, 8298,
       72,   72,   72,   72,   72,   72,   46,   72,  153,  169,
      169,  169,  169,  169,  104,  152,  169,  169,  169, 8315,
      140,16507,  169,  169,  169,  169,   23,   89,   82,  169,
       31,  169,  169,  169,  169,  169,   28,  169,  169,  169,
       24,  169,  169,   79,  410,  432,  411,  432,  415,  432,
      136,  557,  558,  558,  558,   63,   70,   65,   64,  163,

      609,  594,  526,  527,   61,   61,   46,  104,   89,   82,
       31,   24,   79,   72,   72,   72,   44,   72,   72,   72,
      169,  169,   80,  169,  169,   83,  565, 8315,  139,  169,
       76,  169,   29,  169,   31,  169,  169,  169,   33,   43,
      169,  169,  169,  169,   24,   86,  169,  410,  411,  415,
      410,  411,  415,  136,  558,   63,   66,   64,  269,  270,
      538,  609,  526,  527,  521,   61,   61,   44,   80,   83,
       76,   29,   33,   43,   86,   72,   72,   85,   72,   93,
       84,  154,  169,  169,  169,   94,  565,  565,  169,   90,
       90,   29,   87,   87,16508,   87,   87,  140,   87,  169,

      169,  169,  169,   30,  169,  169,  169,  169,  101,  100,
      169,  329,  135,  136,  558,  269,  269,  270,  270,  600,
      526,  527,  547,   61,   61,   85,   93,   84,   94,   90,
       90,   87,   30,   72,   92,   45,  169,  116,  169,   87,
       87,  169,  169,   22,   30,  169,  169,  169,  169,  110,
      109,  169,  558,  547,   61,   61,   92,   45,   22,   72,
      169, 8316,  169,  169,   22,  169,  169,  169,   25,   99,
       98,  165,  164,   61,   61,   25,   72,  168,  169,   27,
      169,  169,   25,  108,  107,  165,  164,   61,   61,   27,
       72,   27,  169,  169,   61,   61,   72,  169,   26,   61,

       61,   26,   91,  103,  102,   26,   61,   61,   91,  112,
      111,   61,   61,   61,   61,   61,   61,   61,   61,   14,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61
    } ;

static yyconst flex_int16_t yy_accept[3696] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    6,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,   10,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   13,   13,   13,   14,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   20,   22,   24,   28,   31,   34,   36,
       38,   41,   44,   47,   50,   56,   60,   64,   67,   70,
       72,   74,   76,   78,   80,   82,   85,   88,   93,   96,
       98,  100,  102,  104,  106,  108,  111,  114,  117,  120,
      122,  125,  128,  130,  133,  136,  139,  142,  145,  150,

      155,  158,  162,  165,  169,  173,  177,  180,  184,  188,
      192,  194,  196,  199,  202,  205,  210,  214,  218,  222,
      226,  229,  233,  237,  240,  244,  247,  252,  256,  259,
      263,  266,  270,  274,  278,  282,  285,  290,  294,  298,
      301,  305,  308,  311,  316,  320,  323,  327,  330,  334,
      338,  340,  342,  344,  346,  349,  351,  354,  357,  362,
      364,  367,  370,  374,  377,  382,  386,  390,  393,  396,
      399,  404,  408,  411,  414,  417,  420,  423,  428,  432,
      436,  440,  443,  447,  450,  453,  456,  458,  462,  464,
      467,  470,  473,  476,  479,  482,  484,  486,  489,  492,

      495,  498,  500,  502,  505,  508,  511,  514,  517,  520,
      523,  526,  529,  532,  535,  538,  541,  544,  547,  550,
      553,  556,  559,  562,  565,  568,  571,  575,  578,  584,
      589,  594,  598,  601,  603,  605,  607,  609,  611,  614,
      616,  618,  620,  624,  626,  629,  632,  634,  637,  640,
      643,  646,  648,  652,  655,  658,  661,  664,  667,  671,
      674,  679,  684,  688,  692,  696,  700,  703,  706,  711,
      715,  719,  723,  727,  730,  733,  736,  741,  745,  749,
      752,  756,  760,  764,  767,  770,  774,  777,  781,  785,
      789,  793,  797,  801,  805,  809,  813,  817,  820,  823,

      828,  832,  836,  839,  842,  846,  849,  852,  857,  861,
      865,  868,  872,  876,  880,  885,  888,  892,  898,  903,
      908,  911,  914,  918,  922,  926,  929,  933,  935,  938,
      941,  944,  946,  948,  950,  952,  954,  957,  961,  965,
      968,  974,  979,  984,  987,  990,  993,  997, 1001, 1005,
     1011, 1014, 1019, 1022, 1025, 1028, 1031, 1034, 1040, 1044,
     1048, 1051, 1054, 1057, 1062, 1067, 1073, 1078, 1081, 1085,
     1089, 1092, 1095, 1098, 1103, 1107, 1111, 1114, 1117, 1120,
     1123, 1128, 1132, 1136, 1138, 1141, 1143, 1146, 1150, 1153,
     1156, 1158, 1160, 1163, 1166, 1169, 1172, 1175, 1179, 1182,

     1187, 1191, 1195, 1198, 1202, 1206, 1209, 1212, 1217, 1220,
     1223, 1226, 1231, 1235, 1239, 1242, 1245, 1248, 1251, 1254,
     1259, 1263, 1267, 1270, 1272, 1275, 1278, 1281, 1284, 1287,
     1290, 1295, 1299, 1303, 1306, 1310, 1313, 1316, 1319, 1324,
     1328, 1332, 1335, 1338, 1342, 1346, 1349, 1355, 1360, 1365,
     1368, 1371, 1374, 1378, 1380, 1383, 1386, 1388, 1390, 1392,
     1395, 1397, 1399, 1401, 1404, 1407, 1410, 1413, 1418, 1422,
     1426, 1429, 1432, 1435, 1438, 1441, 1445, 1449, 1452, 1455,
     1458, 1463, 1467, 1471, 1474, 1476, 1478, 1481, 1486, 1490,
     1494, 1497, 1501, 1504, 1507, 1512, 1516, 1519, 1523, 1527,

     1530, 1534, 1538, 1542, 1546, 1549, 1555, 1560, 1565, 1569,
     1571, 1574, 1577, 1580, 1583, 1586, 1589, 1592, 1597, 1601,
     1605, 1608, 1611, 1613, 1616, 1618, 1621, 1624, 1627, 1630,
     1635, 1639, 1643, 1646, 1649, 1652, 1655, 1657, 1659, 1661,
     1663, 1665, 1667, 1670, 1673, 1675, 1678, 1681, 1684, 1687,
     1689, 1692, 1695, 1697, 1699, 1701, 1703, 1705, 1708, 1710,
     1713, 1716, 1719, 1722, 1728, 1732, 1737, 1742, 1746, 1750,
     1753, 1756, 1760, 1764, 1768, 1771, 1774, 1778, 1783, 1785,
     1787, 1789, 1791, 1793, 1796, 1798, 1800, 1802, 1804, 1807,
     1810, 1812, 1815, 1818, 1821, 1824, 1827, 1830, 1835, 1839,

     1843, 1847, 1851, 1854, 1858, 1863, 1866, 1869, 1871, 1874,
     1879, 1883, 1886, 1890, 1893, 1896, 1900, 1903, 1906, 1911,
     1915, 1919, 1923, 1926, 1929, 1932, 1934, 1938, 1942, 1946,
     1952, 1956, 1961, 1965, 1969, 1972, 1975, 1979, 1983, 1986,
     1989, 1994, 1998, 2002, 2005, 2009, 2011, 2014, 2016, 2019,
     2022, 2025, 2028, 2034, 2038, 2042, 2045, 2048, 2051, 2056,
     2061, 2064, 2067, 2073, 2077, 2081, 2084, 2087, 2090, 2095,
     2100, 2104, 2107, 2113, 2118, 2123, 2127, 2131, 2135, 2139,
     2142, 2148, 2153, 2158, 2162, 2166, 2170, 2174, 2177, 2183,
     2188, 2193, 2197, 2201, 2204, 2208, 2211, 2217, 2222, 2227,

     2231, 2235, 2239, 2244, 2247, 2250, 2253, 2258, 2262, 2266,
     2270, 2274, 2277, 2280, 2284, 2287, 2292, 2296, 2300, 2304,
     2308, 2311, 2315, 2319, 2322, 2325, 2328, 2334, 2338, 2341,
     2346, 2349, 2353, 2357, 2361, 2365, 2368, 2373, 2377, 2381,
     2384, 2387, 2390, 2394, 2397, 2402, 2406, 2410, 2414, 2418,
     2422, 2425, 2429, 2433, 2436, 2442, 2447, 2451, 2455, 2458,
     2463, 2468, 2472, 2477, 2481, 2485, 2488, 2492, 2496, 2500,
     2503, 2509, 2514, 2519, 2522, 2526, 2529, 2533, 2537, 2541,
     2544, 2550, 2555, 2560, 2564, 2567, 2570, 2575, 2579, 2583,
     2586, 2589, 2592, 2597, 2601, 2605, 2608, 2612, 2615, 2618,

     2621, 2623, 2628, 2632, 2635, 2639, 2642, 2646, 2650, 2653,
     2655, 2657, 2659, 2662, 2665, 2670, 2674, 2678, 2682, 2685,
     2688, 2691, 2694, 2696, 2699, 2704, 2708, 2711, 2715, 2719,
     2723, 2726, 2729, 2733, 2736, 2739, 2744, 2748, 2752, 2755,
     2758, 2761, 2764, 2767, 2771, 2774, 2779, 2783, 2787, 2791,
     2794, 2797, 2802, 2806, 2810, 2813, 2815, 2818, 2822, 2825,
     2828, 2830, 2834, 2838, 2841, 2847, 2852, 2857, 2860, 2863,
     2867, 2870, 2873, 2877, 2880, 2883, 2887, 2890, 2896, 2901,
     2904, 2909, 2912, 2915, 2918, 2921, 2925, 2929, 2930, 2931,
     2932, 2932, 2933, 2934, 2934, 2934, 2935, 2936, 2937, 2937,

     2937, 2937, 2937, 2937, 2938, 2938, 2938, 2940, 2940, 2940,
     2940, 2943, 2943, 2943, 2944, 2944, 2944, 2944, 2945, 2946,
     2949, 2950, 2951, 2952, 2952, 2952, 2955, 2955, 2955, 2955,
     2956, 2956, 2957, 2958, 2958, 2958, 2958, 2958, 2958, 2959,
     2960, 2961, 2962, 2962, 2962, 2962, 2963, 2964, 2965, 2966,
     2967, 2968, 2969, 2970, 2971, 2971, 2971, 2972, 2972, 2973,
     2973, 2974, 2975, 2976, 2977, 2977, 2977, 2978, 2979, 2980,
     2981, 2982, 2983, 2983, 2983, 2983, 2985, 2987, 2988, 2988,
     2989, 2990, 2993, 2996, 2999, 2999, 2999, 3000, 3000, 3000,
     3003, 3003, 3003, 3003, 3004, 3005, 3005, 3005, 3005, 3005,

     3005, 3005, 3005, 3005, 3005, 3006, 3007, 3008, 3008, 3008,
     3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008,
     3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008, 3008,
     3009, 3009, 3009, 3009, 3009, 3009, 3009, 3010, 3011, 3012,
     3013, 3013, 3013, 3014, 3014, 3014, 3015, 3016, 3017, 3017,
     3018, 3019, 3019, 3019, 3020, 3020, 3021, 3022, 3023, 3024,
     3025, 3026, 3026, 3027, 3028, 3029, 3029, 3029, 3030, 3031,
     3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041,
     3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051,
     3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061,

     3063, 3065, 3066, 3066, 3066, 3066, 3066, 3066, 3067, 3067,
     3067, 3068, 3068, 3068, 3069, 3070, 3070, 3071, 3071, 3072,
     3073, 3074, 3075, 3076, 3077, 3078, 3079, 3079, 3079, 3079,
     3079, 3079, 3079, 3079, 3079, 3079, 3080, 3081, 3082, 3082,
     3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092,
     3093, 3093, 3093, 3094, 3095, 3097, 3098, 3098, 3099, 3100,
     3100, 3100, 3102, 3104, 3105, 3105, 3105, 3106, 3107, 3107,
     3108, 3108, 3109, 3109, 3109, 3109, 3109, 3110, 3110, 3110,
     3111, 3111, 3112, 3113, 3114, 3114, 3114, 3114, 3116, 3118,
     3119, 3119, 3119, 3120, 3121, 3123, 3125, 3126, 3126, 3126,

     3126, 3127, 3129, 3131, 3132, 3134, 3135, 3136, 3136, 3137,
     3137, 3138, 3139, 3139, 3140, 3142, 3145, 3145, 3146, 3146,
     3147, 3148, 3150, 3151, 3152, 3154, 3156, 3157, 3159, 3161,
     3162, 3163, 3164, 3165, 3165, 3165, 3165, 3166, 3167, 3168,
     3170, 3172, 3173, 3174, 3175, 3176, 3176, 3177, 3177, 3177,
     3177, 3177, 3178, 3178, 3179, 3179, 3179, 3179, 3180, 3181,
     3181, 3181, 3181, 3181, 3181, 3181, 3182, 3182, 3182, 3182,
     3183, 3184, 3185, 3186, 3187, 3188, 3190, 3192, 3193, 3194,
     3194, 3195, 3196, 3198, 3200, 3201, 3201, 3201, 3202, 3203,
     3204, 3205, 3206, 3208, 3210, 3210, 3210, 3210, 3210, 3210,

     3210, 3211, 3212, 3213, 3213, 3213, 3214, 3215, 3216, 3217,
     3217, 3217, 3217, 3217, 3218, 3219, 3220, 3221, 3221, 3221,
     3222, 3223, 3224, 3225, 3226, 3227, 3228, 3228, 3228, 3228,
     3228, 3229, 3229, 3229, 3230, 3230, 3230, 3230, 3231, 3232,
     3233, 3233, 3234, 3235, 3235, 3235, 3235, 3235, 3235, 3236,
     3236, 3236, 3237, 3237, 3238, 3238, 3238, 3238, 3239, 3240,
     3241, 3241, 3242, 3243, 3244, 3244, 3244, 3244, 3244, 3246,
     3248, 3249, 3250, 3251, 3252, 3253, 3253, 3254, 3256, 3258,
     3259, 3260, 3262, 3264, 3265, 3266, 3266, 3266, 3268, 3270,
     3271, 3271, 3271, 3272, 3272, 3272, 3273, 3273, 3273, 3274,

     3274, 3275, 3276, 3277, 3278, 3278, 3279, 3279, 3279, 3280,
     3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3289, 3291,
     3292, 3293, 3294, 3295, 3297, 3297, 3297, 3298, 3299, 3300,
     3301, 3303, 3305, 3305, 3305, 3305, 3305, 3305, 3305, 3305,
     3305, 3305, 3305, 3305, 3305, 3305, 3305, 3305, 3306, 3306,
     3307, 3308, 3309, 3309, 3310, 3310, 3310, 3311, 3312, 3313,
     3314, 3315, 3315, 3315, 3316, 3316, 3316, 3316, 3316, 3316,
     3316, 3317, 3317, 3317, 3318, 3318, 3319, 3319, 3319, 3319,
     3319, 3319, 3320, 3320, 3320, 3320, 3320, 3321, 3321, 3321,
     3322, 3323, 3324, 3325, 3326, 3326, 3327, 3329, 3331, 3332,

     3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333,
     3334, 3334, 3334, 3335, 3336, 3339, 3340, 3341, 3343, 3345,
     3345, 3345, 3345, 3346, 3347, 3348, 3348, 3348, 3348, 3348,
     3350, 3352, 3352, 3353, 3353, 3353, 3354, 3354, 3357, 3357,
     3357, 3357, 3359, 3359, 3359, 3361, 3361, 3361, 3361, 3362,
     3363, 3364, 3365, 3366, 3366, 3366, 3366, 3367, 3367, 3369,
     3371, 3371, 3371, 3372, 3372, 3373, 3373, 3374, 3374, 3374,
     3374, 3374, 3374, 3375, 3375, 3375, 3375, 3375, 3375, 3375,
     3376, 3377, 3377, 3377, 3377, 3377, 3377, 3377, 3377, 3377,
     3377, 3377, 3377, 3377, 3377, 3377, 3377, 3377, 3377, 3377,

     3377, 3377, 3377, 3377, 3377, 3377, 3377, 3377, 3377, 3377,
     3377, 3377, 3377, 3377, 3378, 3378, 3378, 3378, 3379, 3380,
     3380, 3380, 3380, 3380, 3380, 3380, 3380, 3380, 3380, 3381,
     3381, 3381, 3381, 3382, 3382, 3382, 3383, 3383, 3383, 3383,
     3383, 3384, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391,
     3392, 3393, 3394, 3395, 3396, 3396, 3396, 3397, 3398, 3399,
     3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409,
     3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419,
     3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429,
     3430, 3431, 3432, 3433, 3434, 3435, 3436, 3436, 3436, 3436,

     3437, 3437, 3438, 3438, 3439, 3439, 3439, 3439, 3439, 3439,
     3439, 3439, 3439, 3439, 3439, 3440, 3440, 3440, 3441, 3441,
     3442, 3443, 3444, 3446, 3447, 3448, 3449, 3450, 3451, 3452,
     3452, 3453, 3453, 3454, 3454, 3455, 3455, 3455, 3456, 3457,
     3457, 3458, 3458, 3458, 3458, 3458, 3459, 3460, 3461, 3461,
     3461, 3462, 3462, 3462, 3462, 3462, 3463, 3463, 3463, 3463,
     3464, 3465, 3466, 3466, 3467, 3468, 3469, 3469, 3470, 3470,
     3470, 3471, 3472, 3472, 3472, 3472, 3473, 3474, 3474, 3474,
     3475, 3475, 3476, 3477, 3477, 3478, 3478, 3479, 3479, 3479,
     3479, 3479, 3479, 3479, 3479, 3479, 3479, 3479, 3480, 3481,

     3482, 3482, 3482, 3482, 3482, 3482, 3482, 3483, 3483, 3483,
     3483, 3483, 3483, 3483, 3483, 3483, 3483, 3484, 3484, 3484,
     3485, 3485, 3486, 3487, 3487, 3487, 3488, 3488, 3489, 3489,
     3489, 3489, 3489, 3490, 3491, 3491, 3491, 3492, 3492, 3492,
     3492, 3493, 3493, 3493, 3493, 3494, 3494, 3494, 3494, 3495,
     3495, 3495, 3496, 3496, 3496, 3496, 3496, 3497, 3497, 3497,
     3497, 3497, 3497, 3497, 3498, 3498, 3498, 3498, 3498, 3498,
     3498, 3498, 3498, 3498, 3499, 3500, 3501, 3502, 3502, 3502,
     3502, 3503, 3503, 3504, 3504, 3504, 3504, 3504, 3505, 3506,
     3506, 3506, 3506, 3506, 3507, 3507, 3507, 3507, 3507, 3507,

     3508, 3509, 3510, 3510, 3510, 3510, 3511, 3512, 3512, 3514,
     3515, 3515, 3517, 3517, 3519, 3521, 3522, 3523, 3524, 3525,
     3526, 3526, 3527, 3528, 3528, 3528, 3528, 3528, 3529, 3531,
     3532, 3533, 3533, 3533, 3533, 3533, 3533, 3533, 3534, 3534,
     3534, 3534, 3535, 3536, 3536, 3536, 3536, 3536, 3536, 3536,
     3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536,
     3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536,
     3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536,
     3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536, 3536,
     3536, 3536, 3536, 3536, 3537, 3537, 3537, 3537, 3537, 3537,

     3537, 3537, 3538, 3539, 3540, 3541, 3541, 3541, 3542, 3543,
     3544, 3545, 3546, 3546, 3546, 3546, 3546, 3547, 3548, 3549,
     3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559,
     3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569,
     3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579,
     3580, 3581, 3582, 3583, 3584, 3585, 3586, 3586, 3587, 3588,
     3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3597,
     3597, 3599, 3601, 3601, 3601, 3602, 3602, 3602, 3602, 3602,
     3602, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610,
     3611, 3612, 3612, 3612, 3613, 3613, 3614, 3614, 3614, 3614,

     3614, 3615, 3616, 3616, 3617, 3617, 3617, 3617, 3617, 3618,
     3619, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3625, 3625,
     3626, 3627, 3627, 3628, 3628, 3628, 3628, 3628, 3628, 3628,
     3629, 3630, 3630, 3631, 3631, 3631, 3631, 3631, 3632, 3632,
     3633, 3633, 3633, 3633, 3633, 3634, 3634, 3634, 3635, 3636,
     3636, 3636, 3637, 3637, 3637, 3638, 3638, 3638, 3639, 3639,
     3639, 3640, 3640, 3641, 3642, 3642, 3642, 3643, 3643, 3643,
     3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3644,
     3644, 3644, 3644, 3644, 3644, 3644, 3645, 3646, 3647, 3648,
     3648, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649,

     3649, 3649, 3649, 3650, 3651, 3653, 3653, 3653, 3654, 3654,
     3654, 3654, 3655, 3657, 3657, 3657, 3657, 3657, 3657, 3657,
     3658, 3659, 3660, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3663, 3663, 3663, 3663, 3663,
     3664, 3664, 3665, 3665, 3666, 3667, 3668, 3669, 3670, 3671,
     3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681,

     3682, 3683, 3684, 3685, 3686, 3688, 3690, 3691, 3692, 3693,
     3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703,
     3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3712,
     3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721,
     3722, 3723, 3724, 3725, 3725, 3725, 3725, 3725, 3725, 3725,
     3725, 3725, 3726, 3728, 3729, 3730, 3731, 3732, 3733, 3733,
     3734, 3736, 3736, 3736, 3736, 3737, 3738, 3738, 3738, 3739,
     3740, 3741, 3742, 3743, 3745, 3746, 3747, 3748, 3749, 3749,
     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3751, 3752, 3752,
     3752, 3752, 3753, 3753, 3753, 3753, 3753, 3753, 3754, 3754,

     3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754,
     3754, 3754, 3754, 3755, 3755, 3755, 3755, 3755, 3755, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3756,
     3756, 3756, 3758, 3759, 3760, 3760, 3760, 3760, 3760, 3760,
     3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3761,
     3763, 3764, 3764, 3766, 3766, 3766, 3766, 3766, 3767, 3768,
     3768, 3768, 3768, 3768, 3768, 3768, 3768, 3768, 3768, 3768,
     3768, 3768, 3768, 3768, 3769, 3769, 3769, 3769, 3769, 3769,
     3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769,
     3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769,

     3769, 3769, 3769, 3769, 3769, 3769, 3769, 3770, 3770, 3772,
     3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782,
     3783, 3784, 3785, 3786, 3787, 3788, 3788, 3789, 3790, 3790,
     3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3799,
     3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3809,
     3810, 3811, 3811, 3811, 3812, 3813, 3814, 3816, 3817, 3818,
     3819, 3820, 3821, 3822, 3822, 3823, 3824, 3825, 3825, 3825,
     3826, 3826, 3826, 3826, 3826, 3826, 3827, 3828, 3829, 3830,
     3832, 3832, 3833, 3834, 3835, 3835, 3836, 3837, 3838, 3839,
     3840, 3841, 3842, 3843, 3843, 3843, 3843, 3843, 3844, 3844,

     3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845,
     3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845,
     3845, 3845, 3846, 3846, 3847, 3847, 3849, 3849, 3849, 3849,
     3849, 3849, 3849, 3850, 3850, 3850, 3850, 3850, 3850, 3850,
     3850, 3851, 3851, 3852, 3853, 3855, 3855, 3855, 3856, 3856,
     3857, 3858, 3858, 3858, 3858, 3858, 3858, 3858, 3858, 3858,
     3858, 3858, 3858, 3859, 3859, 3859, 3859, 3860, 3860, 3860,
     3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860,
     3860, 3860, 3860, 3860, 3860, 3860, 3860, 3861, 3861, 3861,
     3862, 3862, 3862, 3862, 3862, 3863, 3863, 3864, 3865, 3866,

     3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876,
     3877, 3877, 3877, 3877, 3877, 3878, 3878, 3878, 3879, 3880,
     3881, 3881, 3881, 3882, 3883, 3884, 3885, 3886, 3887, 3887,
     3888, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3896,
     3897, 3898, 3899, 3899, 3899, 3900, 3901, 3902, 3903, 3904,
     3905, 3906, 3907, 3907, 3907, 3908, 3909, 3910, 3910, 3910,
     3910, 3910, 3911, 3911, 3911, 3912, 3913, 3913, 3914, 3915,
     3916, 3917, 3917, 3918, 3919, 3920, 3921, 3922, 3922, 3922,
     3922, 3922, 3922, 3923, 3923, 3923, 3924, 3924, 3924, 3924,
     3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925,

     3925, 3925, 3926, 3927, 3927, 3927, 3927, 3927, 3927, 3927,
     3927, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3930,
     3931, 3931, 3932, 3933, 3934, 3934, 3934, 3934, 3934, 3934,
     3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934,
     3935, 3935, 3936, 3936, 3936, 3936, 3937, 3937, 3937, 3938,
     3938, 3938, 3938, 3938, 3938, 3938, 3939, 3939, 3939, 3939,
     3940, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3942, 3943,
     3944, 3945, 3946, 3947, 3948, 3949, 3951, 3952, 3953, 3954,
     3955, 3956, 3956, 3956, 3957, 3958, 3958, 3958, 3959, 3960,
     3960, 3960, 3960, 3960, 3960, 3963, 3964, 3965, 3966, 3967,

     3968, 3969, 3969, 3970, 3971, 3971, 3972, 3973, 3974, 3975,
     3976, 3977, 3978, 3979, 3980, 3980, 3980, 3981, 3981, 3982,
     3982, 3983, 3983, 3983, 3984, 3985, 3985, 3985, 3985, 3985,
     3987, 3989, 3991, 3991, 3992, 3994, 3995, 3996, 3996, 3997,
     3998, 3999, 3999, 3999, 4000, 4000, 4001, 4001, 4001, 4001,
     4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4002,
     4002, 4002, 4002, 4003, 4003, 4003, 4003, 4003, 4003, 4005,
     4005, 4006, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4008,
     4008, 4008, 4008, 4008, 4009, 4009, 4009, 4009, 4009, 4009,
     4009, 4010, 4010, 4011, 4011, 4011, 4012, 4012, 4012, 4012,

     4012, 4012, 4012, 4012, 4012, 4013, 4013, 4013, 4013, 4014,
     4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024,
     4025, 4025, 4025, 4026, 4027, 4028, 4028, 4028, 4028, 4028,
     4030, 4031, 4032, 4033, 4033, 4034, 4035, 4036, 4037, 4038,
     4039, 4041, 4042, 4043, 4044, 4044, 4044, 4045, 4046, 4046,
     4046, 4047, 4047, 4047, 4048, 4048, 4049, 4050, 4051, 4052,
     4053, 4054, 4054, 4055, 4056, 4057, 4058, 4059, 4059, 4059,
     4060, 4061, 4062, 4062, 4062, 4062, 4062, 4062, 4062, 4062,
     4062, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4065, 4066,
     4067, 4068, 4068, 4068, 4068, 4069, 4069, 4069, 4069, 4069,

     4070, 4070, 4070, 4071, 4072, 4072, 4072, 4073, 4073, 4073,
     4073, 4073, 4075, 4075, 4075, 4075, 4076, 4076, 4077, 4078,
     4079, 4080, 4081, 4082, 4084, 4085, 4086, 4086, 4086, 4087,
     4088, 4089, 4089, 4089, 4089, 4089, 4090, 4091, 4092, 4093,
     4094, 4096, 4097, 4099, 4101, 4102, 4103, 4104, 4104, 4105,
     4106, 4107, 4108, 4109, 4110, 4111, 4111, 4112, 4112, 4112,
     4112, 4112, 4113, 4115, 4116, 4116, 4116, 4117, 4118, 4119,
     4120, 4120, 4120, 4120, 4120, 4120, 4120, 4121, 4121, 4121,
     4121, 4121, 4121, 4124, 4125, 4126, 4126, 4126, 4127, 4127,
     4128, 4129, 4129, 4129, 4130, 4131, 4132, 4133, 4133, 4133,

     4133, 4133, 4134, 4134, 4134, 4134, 4134, 4135, 4136, 4137,
     4138, 4139, 4139, 4139, 4139, 4140, 4140, 4140, 4141, 4141,
     4142, 4143, 4144, 4144, 4145, 4146, 4147, 4148, 4149, 4150,
     4151, 4152, 4153, 4153, 4153, 4153, 4154, 4154, 4154, 4154,
     4154, 4154, 4154, 4154, 4154, 4155, 4156, 4157, 4157, 4158,
     4159, 4159, 4159, 4159, 4159, 4160, 4160, 4160, 4160, 4160,
     4161, 4162, 4162, 4162, 4162, 4162, 4162, 4162, 4163, 4164,
     4165, 4166, 4167, 4168, 4169, 4169, 4170, 4171, 4172, 4172,
     4172, 4172, 4173, 4173, 4174, 4174, 4174, 4175, 4176, 4176,
     4176, 4176, 4176, 4176, 4176, 4176, 4176, 4177, 4178, 4179,

     4179, 4179, 4180, 4180, 4181, 4182, 4183, 4184, 4185, 4186,
     4186, 4187, 4188, 4189, 4190, 4190, 4190, 4190, 4191, 4191,
     4191, 4192, 4192, 4192, 4193, 4194, 4195, 4195, 4196, 4197,
     4197, 4197, 4197, 4198, 4198, 4198, 4199, 4199, 4200, 4200,
     4201, 4202, 4202, 4202, 4202, 4203, 4204, 4205, 4206, 4206,
     4207, 4207, 4208, 4209, 4210, 4211, 4212, 4212, 4212, 4213,
     4214, 4214, 4214, 4214, 4215, 4216, 4216, 4217, 4218, 4218,
     4219, 4220, 4220, 4220, 4221, 4222, 4223, 4224, 4225, 4226,
     4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236,
     4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246,

     4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256,
     4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266,
     4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276,
     4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286,
     4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296,
     4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306,
     4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316,
     4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326,
     4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336,
     4337, 4338, 4339, 4339, 4339

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   24,   24,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   38,   40,   41,   38,   42,   38,   43,   44,   45,
       46,   47,   48,   49,   38,   38,   50,   38,   51,   38,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   38,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   38,   81,    1,   82,   83,    1,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84
    } ;

static yyconst flex_int32_t yy_meta[85] =
    {   0,
        1,    2,    3,    4,    2,    5,    6,    7,    8,    1,
        9,   10,   11,   12,   13,    1,   14,    1,   15,   16,
       17,   17,   17,   17,   17,   18,   19,   20,   21,   22,
        1,   23,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   25,   26,   27,   28,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[4224] =
    {   0,
        0,    2,   22,    0,  105,  116,  169,    0,  253,    0,
      337,    0,  421,    0,  503,  505,  557,    0,  119,  519,
      641,    0,  723,  725,  779,    0,  863,    0,  946,  957,
      967,  978,  134,  739, 1059,    0,  741,  994, 1143,    0,
     1227,    0,  533, 1033, 1309, 1311, 1337, 1356,  996, 1012,
     1359, 1375, 1456,    0, 1381, 1403, 1538, 1541, 1552, 1566,
     1597, 1608, 1619, 1650, 1732,    0, 1816,    0, 1899, 1910,
     1921, 1952, 1629, 1931, 1653, 1668, 1958, 1986, 1992, 2015,
     2033, 2047,  145,  755, 1417, 1431, 2018, 2049, 2067, 2069,
     1684, 1700, 2101, 2112, 2115, 2149, 2151, 2173, 2087, 2187,

     2189, 2203, 2241,    0, 2323, 2325, 2344, 2355, 2366, 2405,
     2458,    0, 2542,    0, 2626,    0, 2710,    0, 2792, 2794,
     2205, 2415, 2376, 2426, 2876,    0, 2808, 2810, 2960,    0,
     2433, 2824, 3044,    0, 2826, 2840, 3128,    0, 3210, 3213,
     3228, 3231, 3238, 3257, 3254, 3260, 3331,    0, 3415,    0,
     3497, 3507, 3557,    0, 3641,    0, 3724, 3805, 3887,    0,
     3276, 3297, 3517, 3750, 3971,    0, 3760, 3776, 3835, 3838,
     4055,    0, 3727, 3778, 4137, 4140, 4159, 4173, 4192, 4206,
     3808, 4162, 4236,    0, 4320,    0, 4402, 4404, 4418, 4420,
     4434, 4436, 4455, 4457, 3864, 4471, 4485, 4487, 4506, 4509,

     4524, 4527, 4538, 4568, 4608, 4682, 4757,    0, 4582, 4627,
     4642, 4645, 4701, 4720, 4571, 4839, 4841, 4855, 4857, 4875,
     4660, 4735, 4195, 4877, 4906, 4917, 4928, 4943, 4954, 4965,
     4975, 4981, 5052,    0, 5136,    0, 5218, 5220, 5290,    0,
     5373, 5384, 4991, 5001, 4552, 5016, 5019, 5030, 5234, 5403,
     5413, 5466,10790,28568,28568,28568,28568,28568,    1,    0,
      154,28568, 1394, 1577,28568,28568,28568,   96,   14, 4673,
     1640, 1943,  769, 4897, 5480,10735,28568, 5248,  133, 1047,
     1983,  516, 2200, 1445, 5498,28568,28568,  736,28568,  114,
    10734,28568,10697, 2389, 4498, 4939,28568,28568,28568,28568,

        0,28568,  125,28568,28568,    0,    0,  515,  954,28568,
    10703,    0,28568,    0,28568,28568,28568,28568,28568,28568,
      135,10725, 3289,28568,  158,28568,28568,28568,    0,28568,
      494,28568,    0,28568,28568,28568,28568,28568,28568,  509,
    28568,28568,28568,28568,28568,    0,28568,  531,    0,28568,
     5488, 5581, 5664,    0,28568,10725,28568, 2012, 5434,10715,
      750,28568,28568,28568,28568,28568,28568,  714,  681,10657,
    28568,10668,28568, 2216, 2805,28568,28568,28568,28568,28568,
     3536,  745, 4852, 5744, 5253, 5506, 1713,  987, 5672,   33,
        0, 5512, 1721, 5266,28568,  937,10711,10686, 5526,  952,

    28568,10681, 2157, 5531, 5680,10656,28568, 5684, 5540, 5689,
     5697, 5716, 5761, 5820, 5824, 5828, 5833, 5838, 5866, 5874,
     5883, 5901, 5913, 5917, 5930,28568,    0,28568,    0,    0,
        0,  948,  476, 5545, 5728, 2445, 5958,10682, 5949, 5778,
     5870, 5968, 2078,    0,28568, 5976,  956,28568,28568,    0,
    28568,  973,28568,28568,28568,28568, 5999,28568, 2336, 3797,
    28568,28568,28568,28568,28568, 1725,  992,28568,28568,28568,
    28568,28568,28568, 1024,28568,28568,28568,28568,28568, 1300,
    28568,28568, 6040,    0,    0,28568, 1310, 2170,    0,10640,
    10623,10624,10606,10624,10619,  663,10609,28568,28568,28568,

    28568,28568, 5395, 1312,28568,10640,28568,28568,28568,28568,
     1328,28568,28568,    0, 3319, 2859, 2867,28568, 1025,10603,
     1332,10646,28568, 3546,28568,  993,28568,    0,28568, 6003,
     6007, 6011, 6044, 4226, 6048,10626, 6056,    0, 1372,28568,
    28568, 1053,10597, 1385,10642,28568,28568, 6063, 1583, 1351,
    28568,28568, 1392,  140, 6073,28568,28568,28568,28568,28568,
    10620, 1398,    0,28568,28568,28568,28568, 1406,28568,28568,
    28568,10633,  952,28568,28568,28568, 1527, 1039,    0, 1370,
        0,    0,    0,10615, 1547, 1388,28568, 1400, 1572, 1593,
     1666, 1611,28568,28568,28568,28568,28568, 3877, 4748,28568,

    28568,28568, 1574,28568,28568,28568,28568,28568,28568,28568,
        0,28568,    0,    0, 1588,28568,28568,    0,28568,    0,
        0,    0, 1615,    0,28568,    0,10559,10555,28568,28568,
    28568,28568,28568, 1652,28568,28568, 6082, 6086,28568,28568,
    28568, 1679,10566,    0, 5278, 5570,    0,    0,    0,10601,
    28568, 1690,  952,    0,28568,  111,    0, 5769,    0, 6098,
     6102, 6116,    0,28568,    0,28568,28568,28568,28568,28568,
     1888,10559,10557,  105,10556,28568,28568,28568,28568,28568,
    10602,28568,28568, 1890,    0, 1902,28568,28568,28568,28568,
     1901,28568,28568, 6120,28568,28568,    0,28568, 6124, 1905,

     6130,    0,28568,    0,28568,10587,    0,    0, 1912,    0,
    28568, 1440, 5574,    0,28568,    0,    0,    0,    0,    0,
    28568, 1920,    0,28568, 6134,28568, 6144,    0,    0,    0,
        0,    0, 1450, 1929,28568,28568,10515,10512,10518,10507,
    10513,10507,28568, 1561,    0,28568,  526, 2018, 2040,    0,
        0,28568,10525,10519,10516,10502,    0,    0,    0,    0,
    28568, 6152, 6158,28568,28568,10489,28568,28568, 6162,10511,
     1956, 6172,10505,10500,10498,10516,28568,28568, 6181, 6191,
     6199, 6207, 2058,28568, 6212, 6226, 6240, 6254,28568, 6268,
     1962, 6272,28568, 6276,28568,28568,28568,28568,28568,28568,

    28568,28568, 2028,10489, 6280,28568, 6292, 6296, 6300,28568,
    28568, 6310,28568, 2077,10489, 6321,28568,28568,28568,28568,
    28568, 6327, 2110,28568, 6335,10460,    0, 6340, 6347,28568,
    28568,10456,28568, 6351, 2113,28568,28568,28568,28568,28568,
    28568,28568,28568, 2140,10477,    0,    0,    0,28568,10462,
    28568,28568,28568,28568,28568,10466, 2147,    0,28568,28568,
    28568,28568,28568,28568,28568,10462, 2163,    0,28568,28568,
        0,28568,28568,    0,10424,28568,28568, 2169,    0,28568,
    28568,    0,10406, 2209,28568,28568,    0,28568,28568,    0,
    10404,28568,28568, 2217,    0,28568,28568,    0,10403, 2220,

    28568,28568, 1672,28568, 2426,28568,28568,28568,28568,28568,
    28568, 2314,28568, 6355, 6361,28568,28568,28568,28568,28568,
     2335,10424,10420,10368,28568,28568,28568,28568,    0,10385,
     2346,28568,    0,28568,28568,28568,28568,28568,28568, 6365,
     2357,28568, 6371, 6377,28568,28568,28568,28568,28568, 6381,
     2367,28568,    0,28568,28568,    0,28568, 2375,    0,28568,
    28568,    0,    0,28568,28568, 2385,28568,28568,    0,28568,
        0,    0,    0,10395, 2396, 1307, 2005, 6393,    0,28568,
        0,    0,    0, 2406, 6342,28568,28568,28568,28568, 2436,
     1272,28568,28568,28568,28568, 2437,28568,10338,28568, 6420,

     6428,28568,28568,    0,28568, 2783,28568, 6436,10355, 6440,
     6452,    0, 6460,28568,28568,28568,28568, 3521, 2804,10316,
    28568, 6464, 6472, 6479,28568,28568, 6490,28568,28568,28568,
     2806,10357, 6498,28568, 5853,28568,28568,28568, 2830, 2080,
    10312,10316,10308,28568,28568,28568,28568,28568,28568, 2838,
    28568,28568,28568,28568, 3199,10373, 3224,10361,10355,10353,
     3234,    0, 2142,28568,    0,    0,    0, 3208, 3227,  485,
     6446, 6467, 4599, 3255, 3258,    0,28568,    0,    0,28568,
        0,10335, 3270,10334, 1366, 3501, 6534,28568,28568, 3769,
     3851,28568, 4219, 6538, 3283, 1340,  744,28568,10349, 6548,

     6557, 6561,10313, 2026, 6582, 6590, 6598, 6602, 6614,    0,
     6628, 6633, 6655, 6646, 6664, 6673, 6681,28568,28568, 6700,
    28568,28568, 2027, 6685, 6720, 6730, 6737, 6746,10311,28568,
     6750, 6757,10305, 6762, 6775, 6783, 6788,    0, 6796, 6800,
     1429, 3824, 6808,10260, 6822,28568, 6826, 6838, 6842,    0,
     1537, 1545,    0, 3494,10309,10303, 3747,10301, 4605,10236,
    28568,    0,    0,28568, 6854,10261,28568, 2229,    0,    0,
        0,    0, 6858, 6867, 6879, 6890, 6898, 2837, 6966,    0,
     6902, 6916, 7049, 7053, 6924, 7057,28568, 7061,10276, 7078,
    10252,10267,10265,10220, 2854, 3243,10213,10197,10257, 6922,

     7087, 3728, 7091, 3730, 7137, 7096, 4641,10232, 3724,10193,
    10193,10190,10187, 3232,10167, 1616,10157,10168,10140, 2266,
    10136, 3252,10131,  956,10110,10120, 3804, 6947, 7110, 7121,
     7131,10110,10115, 7125, 7155,    0, 7173,    0,28568, 1572,
     7213, 7227, 7241,10149, 7245, 6959, 7259, 6234,    0,    0,
     7274,10091,10093,28568,    0, 7168, 7282, 7300, 7304, 7322,
     7326, 7348, 7356,10133, 7360,10107, 7368, 7375, 7387, 7407,
     7414, 7419, 7423, 7434, 7450, 7454, 7463, 7467, 7482, 7497,
     7501, 7509, 7514, 7542, 7550, 7555, 7582, 7588, 7592, 7596,
     7601, 7629, 7634, 7639, 7666, 7673, 7680, 7684,    0,    0,

        0,10088,10099, 7646,10131, 7711, 7719, 7730, 7734,    0,
     7742, 7757, 7752, 7769,28568, 7782, 4686, 4874,    0, 7786,
     7142,    0, 7163, 7801, 7805, 7839, 7809,10089,10076,10084,
    10066,10085,10079, 1894,10068,    0, 2043, 4724, 7817, 7821,
        0,10063,10057,10039,10047,10027,10034,10012, 9999,10009,
     7831, 7844,28568,    0, 7848, 7856, 3744,    0, 7860,10063,
     7852, 7875,    0,28568, 7884,10005, 7898, 7902, 7888, 7927,
    10040, 7931, 7935,10039, 7939, 7960,    0, 7968,    0, 7976,
     7980, 7988,    0, 3819, 7995,10051, 7986, 2374, 4868,28568,
     8019, 3855, 4445, 4153,28568,28568,10057, 1573, 8023, 4126,

    28568,28568,28568,28568, 4659,10048,10046, 1603,10043, 1615,
        0, 4523,10021,28568,28568,    0, 2059,28568, 2081, 2185,
     3229,28568, 8027,    0,    0,    0,    0,    0,    0,    0,
        0, 9970, 9969, 8031, 9974, 9955,    0, 8042,28568,28568,
    28568, 9951, 9950, 9956, 1631,10000, 1937, 8046, 8050, 8055,
     8069, 8073, 8077, 8081, 8089, 8097, 9923,    0,    0, 9936,
     9920, 9925, 9916, 9908, 9973,28568, 4194, 8101, 4401,    0,
     2790, 4910,    0,    0,28568,    0,    0,    0, 4154, 8105,
        0,    0,    0,    0, 8109, 8117, 9960, 8135, 8139,28568,
        0, 4413,    0,    0, 9898, 9900, 9895, 9898,  921, 9891,

     4429,  742, 2172, 9933, 9928, 2373, 4470,    0,    0, 9909,
     1935, 9908, 9914,    0,    0,    0,    0, 9941, 8124,28568,
     8147, 7235,28568,28568,28568,28568, 8154, 8164, 8172, 8178,
    28568, 8186, 4653,28568, 8193, 8207, 8221, 8235, 8239, 8243,
     9804, 8247, 8252, 9831, 8260, 9830, 8266, 8274,    0, 8294,
        0, 8302, 8306, 8314, 8319, 8332, 8339,28568,28568,28568,
     9799,28568,    0, 8344, 9833, 8332, 8355, 4446, 3825, 1930,
    28568,    0,    0, 9794, 9790, 9784,28568,28568,28568,28568,
    28568,28568,28568,28568,    0, 9794, 8340,    0,    0,    0,
     9793, 8346,    0, 9785, 8350,    0, 9780, 8355, 8378, 4552,

    28568, 8382,28568, 4715, 9714,    0, 9772, 8371,    0, 8402,
    28568,28568,28568, 8406, 8414, 8422,    0,    0,    0,28568,
        0,    0,28568,    0, 9700, 9708, 4866, 8428, 8432,    0,
        0,    0, 9696, 9695, 4617, 9672, 9689, 9684, 9679, 9651,
     9638, 4495, 9612, 8436, 8444, 8453, 9625, 8457, 8461, 8477,
    28568, 8487, 9616, 8482, 8503, 8511, 8495, 8519, 8523,28568,
     8535, 5447,    0, 5549, 9643, 9606, 8539, 9640, 8547, 8555,
        0, 8564,    0, 8572, 8576, 8584, 5878, 4714, 9594, 9593,
     5242, 4595, 9592, 9565, 9564, 9626, 4951, 5012, 9603, 9612,
     9611,    0, 4962, 9546, 4461,28568,28568,28568, 3455, 9533,

     9593, 9526, 9520, 4895, 9503, 9520, 9518, 9513, 9499, 6502,
     9550, 9535,28568, 4533, 5412,    0,28568,28568,28568, 5189,
     9485, 4857, 5442, 8588, 8592, 4414, 2162, 9515, 8602, 8609,
     8629, 8645, 8649, 8636, 8658,    0, 8667, 8675, 8681, 8693,
     8705,28568,    0, 5475,28568, 9527, 8710, 9481, 8719, 8725,
     9506, 3514,28568,    0,    0, 9501, 5677, 8737, 8750, 8754,
     8762, 8779, 8793,    0, 9506, 8797, 9471, 9444, 9445, 9446,
     9436, 9497,28568, 9496, 8791, 4430, 2424, 4453, 3753, 8824,
     8805, 8831, 1928, 9436, 4663, 9442, 9441, 9415, 9405, 9420,
     2067, 9402, 9399, 9409, 4622, 4945, 9404, 9405, 9383, 9390,

     9360, 9365, 4528, 9373, 9342, 9340, 4111, 9330, 9334, 9330,
     9318, 9322, 8819, 8839, 8850, 9330, 9324,    0, 8900, 8914,
     8856, 8928, 8932, 8944, 8957, 9354, 9339, 6166, 6516, 6608,
     3471, 7261, 7267, 7762, 4109,    0, 8961, 9309, 9297, 8971,
    28568, 9351, 8975, 8988, 8993, 9000, 9012, 9019, 9024, 9037,
    28568, 9031, 9044, 9050, 8613, 9289, 9090, 9094, 9098, 9103,
     9108, 9135, 9139, 9145, 9149, 9153, 9181, 9185, 9190, 9199,
     9227, 9231, 9235, 9241, 9268, 9273, 9277, 9281, 9287, 9314,
     9318, 9323, 9331, 9350, 9362, 9370, 9379, 9390, 9406, 9410,
     9417, 9421, 9425, 9457, 9464, 9469, 9292, 9275, 9058, 9452,

     9496, 7747, 9309, 9482, 9491, 9273, 9274, 9260, 9269, 9237,
     9238, 9214, 9194, 9201,28568,    0, 5520,28568, 9251, 8904,
     9190, 9184, 9006, 9168, 9154, 9159, 9154, 9194, 9166, 9525,
    28568, 9191, 9535, 9207,28568, 9200, 9524, 9064,28568, 9245,
        0, 9128, 9145, 9559, 9567, 9547, 9578,    0, 9582, 9179,
    28568, 9168, 9577, 4500, 4597, 9174, 4527, 4631, 9161, 9170,
     9090, 9105, 9100, 9086, 9085, 9062,    0, 3482, 9607, 9615,
    28568, 9513, 9623, 9631, 9437,28568,28568, 9059, 9062,28568,
     9590, 9639, 9102, 9100, 9093, 1389,28568, 9095, 9039, 9003,
     9006, 9017, 8998, 8994, 8955, 9011, 8988, 8974, 4824, 4535,

     8959, 8950, 8945, 8928, 8908, 8944,28568, 8939, 9625, 7575,
     9648, 8868, 7577, 9649, 8859, 8885, 8886, 9653, 9669, 9683,
     9687,28568,    0, 9691, 9701,28568, 8915,28568, 8914, 9687,
     4939, 4986, 8896, 3741, 8913, 8909,28568, 8898, 9700, 8876,
    28568, 8875, 9704, 8866,28568, 8856, 9708, 8854,28568, 8852,
     9721, 9713, 5377, 8837, 8790, 8837,28568, 8818, 9727, 8753,
     8747, 8756, 8736,28568, 8737, 8729, 8722, 8717, 8722, 8715,
        0, 8703, 9750, 9754, 9758, 9766, 9773, 8735, 8734, 8676,
        0, 9777, 5038, 8674, 8674, 8680, 4996,  996, 8675,    0,
     9860, 8651, 8630,28568, 8636, 8626, 8631, 8614, 8577, 8628,

     5550, 5709, 4981, 5212, 8568,28568,28568, 9785, 9791,    0,
     9796,28568, 8610,28568, 5258,28568, 9943, 9947,28568,28568,
     8594, 8610, 5427, 9959, 9821, 9972, 8595, 9829, 9984, 9833,
     8580, 9837, 8526, 8511, 8489, 8469, 8523,28568, 9970, 8506,
     8505,10054, 9997, 8460, 8455, 8454, 4979, 8461, 8446, 8454,
     8397, 8397, 8377, 8354, 8338, 8327, 8329, 8296, 8290, 8283,
     8268, 8252, 8261, 8264, 8261, 8241, 8249, 8212, 8227, 8197,
     8176, 1904, 8168, 8229, 8164, 8156, 8141, 8154, 8136, 8118,
     8110, 8127, 5702, 8105, 8096,10009,10023, 8134,10041, 9845,
    10068,10079,10002,28568,10085,10130, 8142,10127,10151, 8121,

    10165,28568, 7862, 4135,28568, 8135, 8036,28568, 8715, 5436,
     4589,    0, 8056, 8057,    0,10099,10169,10181,10194,10199,
    10206,10218,10225,10237,10231,10258,10249,10263,10277,10292,
    10296,10304,10312,10323,10388,10331,10358,10339,10419,10423,
    10432,10427,10459,10343,10463,10471,10476,10490,10503,10508,
    10522,10517,10535,10550,10555,10562,10567,10582,10594,10602,
    10610,10629,10640,10656,10660,10669,10673,10687, 8056, 8050,
    28568,28568, 8022, 8022,10093, 7994, 7992, 7995, 7991,10598,
     7999, 7969, 7965,10212, 7964, 7954, 7940, 7918,10370,28568,
     7920, 7964,10701, 5732, 7962,28568,10695, 7885,    0,10724,

    10729,10733, 7942,28568,10742, 7921, 7897, 5457, 7848, 7847,
     7856, 7849, 2764, 7841, 3493,10737,10742, 7834, 7794,10765,
    28568, 7807,28568, 7808, 7791, 3784, 7789, 7771,    0, 4817,
     5741, 7792,28568, 7779, 7782, 7780, 7804,28568,10759,10770,
    10774,10784, 7773, 7786,28568,10772, 7768,28568,28568,    0,
     7781,28568,10780, 7770,28568,10793, 7764,28568,10797, 7757,
    28568,10801, 5736,28568, 7696, 7736,28568,10814, 7680, 7657,
     7668,    0, 7660, 7664, 7637, 7642, 7626,10780,28568, 5172,
     5842, 7636, 7616, 7603, 7605,28568, 7649,  107,28568,10859,
        0,  455,    0,  481,  715, 1243, 1580, 1593, 4671, 5340,

    10885, 5464,10952,10956, 5778,10825,10847,    0,10968,    0,
    10981,10972,10998, 1627, 1650, 1878, 1951, 2066, 2079,28568,
    28568,11063,11008, 2031, 2050, 2081, 2076, 2139, 2277, 2278,
     2326, 2318, 2324, 2358, 2398, 3140, 3188,11016, 3180, 3205,
     3221, 3233, 3248, 3260, 3435, 3448, 3676, 3695, 3725, 3746,
     3765, 3803, 3812, 3822, 3820, 4971, 4085, 4118, 4168, 5436,
     4164, 4345, 4376, 4405,28568, 4421, 4417,11023,11034,11048,
     4536, 4577,11043,11076,28568,11061,11089, 4627, 5257,    0,
     4617,28568,11139,11143,11161,11165,11183,11187,11205,11223,
    11227,11211,11252,11256,11265,11298,11302,11307,11311,11315,

    11342,28568,11346, 4685, 4726,11354,11358,28568,11362,11390,
    11394,11398,11402,11410,11438,11442,11446,11452,11456,11484,
    11489,11497,11526,11533,11537,11541,11568,11572, 4819, 4815,
    11577,11581,11585,11613,11617,11621,11630,11649,11657,11663,
    11667,11676,28568, 4825, 4844, 4852, 4885, 4908, 4918, 4913,
     4959, 4984,11038, 4982, 4974, 5162,11103, 5164,11260,28568,
        0, 5233, 5266, 5223,28568,11694, 5277, 5371,28568,28568,
    11089,11501,28568,    0, 5314, 5327, 5333,28568, 5333, 5326,
     5334, 5344, 5350, 5351, 5357, 5356, 5511, 5863, 5387, 5556,
     5385,28568, 5452, 5464,11703, 5494, 5500,28568, 5501, 5506,

     5514, 5529, 5544, 5550, 5558, 5568,    0, 5605, 5658, 5659,
     5610, 5604,28568, 5610, 5616, 5628, 5646, 5644, 5646, 5652,
     5651, 5670, 5671, 5674, 5683, 5692, 5681, 5685, 5797, 5944,
     5696,    0, 5738,28568, 5707, 5699, 5710, 5727, 5723, 5802,
     5764, 5737, 5738, 5739, 5788, 5792, 5799, 5794,11723,11729,
        0,11741,11749, 5804, 5792,11247, 5828,11823,11754, 5835,
     5824, 5831, 5853, 5870, 5848, 5859, 5882, 5859, 5879,11712,
     5864,11758, 5873,11774,11767, 5873, 5900, 5896, 5899, 5908,
     5920, 5912, 5912, 5930, 5931, 5927, 5926, 5923, 5926, 5958,
     5959, 5953, 5962, 5948, 5963, 5968,11781, 6023, 5970, 5965,

     5971, 5971,11785,11796, 6004,11810, 6020, 5965,11816,11837,
    11841,11868,11904,11908,11926,11930,11949,11955,11967,11972,
    12004,12008,12012,28568,12016,12021,12048,12053, 5971, 5964,
    12060,12089,12096,12101,12107,12116,12134,12143,12148,12154,
    12161,12181,12188,12195,12199,12226,12231,12235,12239,12244,
    12271, 5983, 5982,12275,12279,12287,12306,12318,12322,12326,
    12335,28568,12353,12362,12369,12373,12400, 5981, 6005,11861,
     5998, 5997, 6012,12404, 6008, 6020,11961, 6020,12409,12427,
    12439,28568,12443, 6014, 6032,12451,28568,12455, 6034, 6022,
     6021,28568,28568, 6079, 6046, 6045, 6051,28568, 6101, 6153,

     6109, 6259, 6110, 6145, 6090, 6186, 6100, 6110, 6120, 6114,
     6130, 6139, 6130, 6138, 6132, 6144, 6145, 6157, 6150, 6151,
     6162, 6245, 6398,28568, 6166,    0, 6165, 6168, 6179, 6173,
     6185, 6223,28568, 6200, 6187, 6199, 6211, 6220, 6217, 6224,
    12459,12471, 6281,28568,12477,12484, 6247,12488,12496,12502,
    12507, 6243, 6255, 6251, 6246, 6268, 6274, 6275, 6262, 6313,
     6296, 6313,12511, 6303,12515, 6314,12521, 6325, 6326,12525,
     6332,12537, 6348, 6350,12542, 6332, 6340,12546, 6354, 6359,
     6357, 6345, 6351,12551, 6353,12555,12559, 6366, 6366,12567,
     6377, 6355, 6380, 6381,28568, 6377,12577,12582,12600,12604,

    12624,12628,12647,12651,12669,12674,12678,12682,12687,12720,
     6391, 6384,12724,12728,12739, 6403, 6397,12755,12766,12770,
     6436,12783,12800,12859,12812,12817,12827,12878,12891,12832,
    12895,12905,12922,12932,12949,12959,12963,12968,12976,12995,
    13008,13012, 6405, 6409, 6430,13021,13049,13054,28568,13058,
    13063,13067, 6420, 6414,13094,13098,13103,12844, 6432, 6437,
    13108,13112,13130, 6442, 6436, 6451,13134,28568,13138,13146,
     6454, 6458,13150,13154, 6467, 6474, 6468, 6536, 6488, 6475,
     6481, 6548, 6551, 6534, 6573,    0, 6537, 6619, 6511, 6641,
     6514, 6519, 6509, 6525, 6516, 6536, 6531, 6547, 6539, 6556,

     6550,28568,28568, 6549, 6566, 6567, 6570, 6573, 6597, 6583,
    28568, 6609,    0, 6604, 6611, 6610, 6623, 6621,13158,13168,
     6632,13176,13183,13187, 6632, 6638, 6639, 6636, 6626, 6636,
    13191, 6649, 6669, 6638, 6639,13195, 6654, 6648, 6645,13199,
     6641,13203, 6671, 6664,13214,13218,13226,13230,13234,13239,
     6677,13243, 6709, 6676,13247,13255, 6688, 6678,13259,13263,
    13272,13276, 6685, 6697,13292, 6708, 6740,13296,13300,13320,
    13324,13342,13347,13365,13369,13381,13387,13391,13395,13422,
    13428, 6700,13439,28568,13458, 6701, 6705,13463,13467, 6799,
     6715, 6719, 6726,13471, 6777,13475,13502,13507,13511,13515,

    13520,13538,13547,13551,13555,13567,13582,13587,13592,13600,
    13619,13628,13632,13637, 6734, 6757,13646,13664,13673,13680,
    13684, 6762, 6747,13691,13698,13718, 6746, 6762, 6771,13725,
    13731,13740, 6771,13744,    0, 6779, 6769, 6829,    0,28568,
    28568, 6788, 6841,    0, 6811,    0, 6812, 6908,13756, 6785,
     6799, 6805, 6804, 6796, 6808, 6821, 6810, 6884, 6885, 6805,
     6829, 6830,28568, 6838, 6835, 6846, 6865, 6856,13762,13769,
    13773,13787, 6865, 6877, 6870,13791, 6877, 6873,13795, 6881,
     6899, 6889,13799,13804, 6881, 6886,13812,13816, 6896,13820,
    13824,13828,13836, 6897,13840,13845, 6903, 6898, 6986,13853,

     7007, 7021, 7000,13857,13865,13869,13873, 7010,13877,13885,
    13889,13907,13914,13920,13949,13953,13933,13971,13983,13987,
     6999, 7015,13991,13998,14002, 7060, 7020, 7005, 7019,28568,
    14018,14025,14031,14035,14062,14088,14066,14107,14119,14123,
    14134,14154,14162,14173,14071, 7010,14181,14075, 7035, 7016,
    14189, 7014, 7027,14208, 7051,14127,14216,14220,14227,14235,
    14239,14249,14253, 7034,    0,28568,    0, 7073, 7079, 7132,
     7183,14257, 7038, 7051, 7051, 7065, 7068, 7079, 7221, 7332,
     7177, 7070, 7092, 7114, 7125, 7125, 7140,14261,14265,14271,
    14279, 7134, 7158,14286,14290, 7160,14294,14298, 7160,14304,

     7163,14308,14312,14316,14320,14324,14328,14334, 7179, 7163,
     7161,14338,14342, 7209, 7182,14349,14353,14357,14361,14379,
    14391,14395,14415,14419,14427,14431,14435, 7183,14439,14446,
    28568, 7255, 7196, 7199, 7219,14458,14466,14470,14474,28568,
    14544, 7264, 7262,14478,14497,14627,14505,14631,14509,14635,
    14639,14643,14647,14516,28568,14676,14681, 7225, 7223, 7239,
     7241,14538,14691, 7246, 7313, 7331, 7391,28568, 7397,28568,
     7249, 7252, 7242, 7267, 7258, 7342,28568, 7273, 7273, 7263,
     7283, 7274,14696,14563,14709, 7298,14721,14725,14729,14734,
    14739, 7306, 7310,14743,14747,14751,14756, 7339, 7308,14760,

    14765,14769, 7329, 7330, 7362, 7333,14774,14779,14792,14796,
    14804, 7340, 7361, 7361,14810, 7364, 7357,    0,14814,14824,
    14828,14842,14855,14859,14871,14875,14884,14889,14893,14902,
    28568,14922,14926, 7359, 7378, 7375, 7519, 7534, 7364, 7381,
     7382, 7383, 7407, 7407,14930,14937,14941, 7402,14955,14959,
     7420, 7444, 7416,14966,14970, 7444, 7424, 7447,14974,14982,
    14994,14986, 7432, 7452, 7447,15000,15006,28568,15010,15014,
    15021,15028,15041,15046,15058,15073,15077,28568,15085, 7454,
     7564,    0, 7610,    0, 7451, 7453,15093,15098, 7476, 7487,
     7500,15102, 7508, 7488, 7517,15106,15110,15116,15134, 7497,

     7498,15139,15143,15147,15151,15155,15159,15186,28568, 7518,
        0,    0,15194,15198, 7518, 7563,15202,15206, 7569, 7543,
    15212, 7547, 7567,15216,15230,15234, 7572,15238,15242, 7571,
     7596,15246,15250,15262, 7578,15271,15280,15284, 7595,15288,
    15298,15309, 7613,15313,15318,15323,15327,28568,15342,15346,
    15350,15354,15358,15362,15366,28568,15370,15378,15384,15389,
    15393, 7592, 7602,15399,15404, 7602,15408,15414,15422,15433,
    15439,15443,15451,28568,15455,15464,15472,15480,15484,15489,
    15493,15497,15505,15509,15514,15522,15526,15534,15538,15542,
    15547,15551,15559,15567,15571,15576,15580,15584,15592,15596,

    15601,15609,15613,15621,15625,15629,15634,15638,15646,15654,
    15658,15663,15667,15671,15679,15683,15688,15696,15700,15708,
    15712,15716,15721,15725,15733,15741,15745,15750,15754,15758,
    15766,15770,15775,15783,15787,15795,15799,15803,15808,15812,
    15820,15828,15832,15837,15841,15845,15853,15857,15862,15870,
    15874,15882,15886,15890,15895,15899,15907,15915,15919,15924,
    15928,15932,15940,15944,15949,15957,15961,15969,15973,15977,
    15982,15986,15994,16002,16006,16011,16015,16019,16027,16031,
    16036,16044,16048,16056,16060,16064,16069,16073,16081,16089,
    16093,16098,16102,28568,16124,16156,16188,16220,16252,16284,

    16316,16348,16380,16412,16444,16476,16508,16540,16572,16604,
    16636,16668,16700,16732,16764,16796,16828,16860,16892,16924,
    16956,16988,17020,17052,17084,17116,17148,17180,17212,17244,
    17276,17308,17340,17372,17404,17436,17468,17500,17532,17564,
    17596,17628,17660,17692,17724,17756,17788,17820,17852,17884,
    17916,17948,17980,18012,18044,18076, 7666,18107,18138,18169,
    18200,18231,18262,18294,18325,18356,18387, 7671, 7685, 7687,
    18409,18441, 7694, 7894, 7718, 7928, 7757, 7934,18472, 7805,
    18503, 7979,18535,18566,18597,18628, 7980, 8195,18659,18691,
    18723,18754,18785,18816, 7831, 7981, 7895, 8099,18848,18880,

    18912, 7923,18943,18974,19005,19036,19068,19100,19132,19164,
    19196,19228,19260, 7943, 8100,19292, 7944,19310, 8063,19341,
     8101,19372, 8140, 8175,19404, 8146,19431, 8181, 8197,19463,
     8196, 8242,19495, 8248,19526,19558, 8257,19574, 8258, 8268,
     8269, 8364, 8270, 8396,19606,19637,19668,19699,19730,19761,
    19792,19823,19855,19887,19919, 8306, 8478, 8307, 8529,19951,
    19983,20015,20047,20079,20111,20143,20175,20207,20239, 8358,
    20271, 8538,20303,20335,20367,20399,20431,20462, 8390,20493,
    20525,20556, 8418,20587,20618,20649,20680,20711,20743,20775,
    20807,20839,20870,20901,20932,20963, 8420,20994,21025,21056,

    21087,21118,21150,21181,21212, 8444,21243, 8603,21265, 8485,
     8576,21297, 8658, 8753, 8755,21328,21359,21390,21421, 8657,
     8754, 8822,21453,21485,21517,21548,21579, 8445,21610,21642,
    21673,21704, 8479, 8821, 8539,21735,21767,21798,21829, 8577,
    21860, 8845, 8862,21892,21924,21956,21988,22020,22051,22082,
    22113, 9056, 8634,22144,22176,22208,22240,22272,22304,22336,
    22368, 9276,22400,22418, 8888,22449,22480,22511,22542, 9280,
    22574,22601, 9307,22633, 9353,22665,22696,22728,22744,22775,
     9420, 9589, 9628,22799,22831,22862,22893,22924,22955,22987,
    23018,23049, 9797, 8667,23080,23112,23144,23176,23208,10005,

    10036,23240,23272,23304,23336,23368,23400,23432,23464,23496,
    23528,23560,23592,10016,23624,23656,23688,23720,23752,23784,
    23815,23846,23878,23909,23940,23971,24002, 8701,10163,24033,
    10092, 8702,24064,24096,24128, 8920,24160,24192,24223,24254,
    24285,24316,10287,24347,24378,24409,24440,24472,24504,24535,
    24566, 8957, 9047,10422,24588,24619,24650,24681,24712, 9053,
    10353,10622,24744,24775,24806,24838,24869,24900,24931,24962,
    24993,25017,25049,10466, 9480,25080,25111,25142,25173,10670,
    25205,25237,25269,25301,25332,25363,25394,10774,25425,25457,
    10964,25489, 9091,25507,25538,25569,25600, 9651,25631,25639,

    25671,25703,25734,25765,10982,25796,25828, 9783,25860,25892,
    25924,25956,25988,26020,26052,26083,26114,11180,10991,26145,
    26177, 9093,26209,26240,11101,26271,26302,11255,26324,26355,
    26386,26417,26448,26479,11266,26510,26542,26573,26604,26635,
    26666,26697,26722,26753,26777,26809, 9095,26840,26871,26902,
    11310,26934,26966,26998,27030,27061,27092,27124,11492,27156,
    27174,27205, 9136,27221,27253,27284,27316, 9182,27348,27380,
    27412,27444,27476,27508,27540,27571,27603,27635,27666,27688,
    27719,11502, 9230,27750,27781,27812,27843,27874,27897,27922,
    27954,27986,28017,28048,28079,11536,28111,28142,28173,28205,

    28221,28252,28284,28316,28347,11578,28378,28409,28440,11147,
     9819, 9820,11677,28472,11705,11749,28504, 9232,28535,11149,
    11151,11806,11835
    } ;

static yyconst flex_int16_t yy_def[4224] =
    {   0,
     3695, 3695, 3694,    3, 3696, 3696, 3694,    7, 3694,    9,
     3694,   11, 3694,   13, 3695, 3695, 3694,   17, 3697, 3697,
     3694,   21, 3698, 3698, 3694,   25, 3694,   27, 3699, 3699,
     3695, 3695, 3700, 3700, 3694,   35, 3701, 3701, 3694,   39,
     3694,   41, 3695, 3695, 3695, 3695, 3702, 3702, 3703, 3703,
     3704, 3704, 3694,   53, 3705, 3705, 3706, 3706, 3707, 3707,
     3707, 3707, 3707, 3707, 3694,   65, 3694,   67, 3708, 3708,
     3708, 3708, 3695, 3695, 3709, 3709, 3709, 3709, 3710, 3710,
     3711, 3711, 3695, 3695, 3712, 3712, 3713, 3713, 3695, 3695,
     3695, 3695, 3714, 3714, 3695, 3695, 3695, 3695, 3715, 3715,

     3716, 3716, 3694,  103, 3717, 3717, 3718, 3718, 3719, 3719,
     3694,  111, 3694,  113, 3694,  115, 3694,  117, 3720, 3720,
     3695, 3695, 3721, 3721, 3694,  125, 3722, 3722, 3694,  129,
     3723, 3723, 3694,  133, 3724, 3724, 3694,  137, 3725, 3725,
     3695, 3695, 3695, 3695, 3695, 3695, 3694,  147, 3694,  149,
     3695, 3695, 3694,  153, 3694,  155, 3726, 3726, 3694,  159,
     3695, 3695, 3695, 3695, 3694,  165, 3695, 3695, 3727, 3727,
     3694,  171, 3728, 3728, 3695, 3695, 3729, 3729, 3730, 3730,
     3731, 3731, 3694,  183, 3694,  185, 3732, 3732, 3732, 3732,
     3733, 3733, 3733, 3733, 3734, 3734, 3735, 3735, 3736, 3736,

     3737, 3737, 3738, 3738, 3739, 3739, 3694,  207, 3740, 3740,
     3741, 3741, 3742, 3742, 3743, 3743, 3744, 3744, 3744, 3744,
     3745, 3745, 3730, 3730, 3746, 3746, 3747, 3747, 3748, 3748,
     3749, 3749, 3694,  233, 3694,  235, 3750, 3750, 3694,  239,
     3751, 3751, 3752, 3752, 3753, 3753, 3754, 3754, 3755, 3755,
     3756, 3756, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3757,
     3758, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3759, 3760, 3761, 3694, 3694, 3762, 3694, 3763,
     3694, 3764, 3694, 3765, 3766, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3767, 3767, 3767, 3694, 3694, 3694, 3694,

     3768, 3694, 3694, 3694, 3694, 3769, 3770, 3771, 3771, 3694,
     3772, 3773, 3694, 3774, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3775, 3694,
     3694, 3694, 3776, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3777, 3694, 3694, 3778, 3694,
     3779, 3694, 3779, 3780, 3694, 3694, 3694, 3694, 3781, 3782,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3783, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3784, 3694, 3785, 3694,
     3694, 3786, 3694, 3694, 3694, 3694, 3787, 3694, 3694, 3694,

     3694, 3694, 3788, 3789, 3789, 3790, 3694, 3789, 3789, 3789,
     3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789,
     3789, 3789, 3789, 3789, 3789, 3694, 3791, 3694, 3791, 3791,
     3791, 3791, 3694, 3694, 3694, 3792, 3793, 3694, 3794, 3694,
     3694, 3694, 3694, 3795, 3694, 3694, 3694, 3694, 3694, 3796,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694,  483, 3797, 3694, 3694, 3694, 3798, 3798,
     3798, 3798, 3798, 3798, 3798, 3798, 3798, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3799, 3799, 3694, 3694, 3694, 3800, 3801,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3802, 3694, 3803,
     3803, 3694, 3694, 3804, 3805, 3694, 3806, 3807, 3807, 3694,
     3694, 3694, 3808, 3694, 3694, 3694, 3694, 3694, 3807, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3809, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3810, 3810,
     3810, 3810, 3810, 3694, 3810, 3811, 3694, 3811, 3811, 3811,
     3811, 3811, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3812, 3694, 3812, 3812, 3812, 3694, 3694, 3813, 3694, 3813,
     3813, 3813, 3813, 3814, 3694, 3815, 3815, 3815, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3816, 3694, 3694, 3816, 3816, 3816, 3694,
     3694, 3694, 3816, 3817, 3694, 3818, 3819, 3820, 3821, 3822,
     3694, 3694, 3823, 3694, 3824, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3825, 3694, 3694, 3694, 3826, 3827, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3828, 3694, 3694, 3694,

     3694, 3829, 3694, 3830, 3694, 3694, 3830, 3830, 3830, 3831,
     3694, 3694, 3694, 3832, 3694, 3833, 3833, 3833, 3833, 3833,
     3694, 3833, 3834, 3694, 3694, 3694, 3835, 3836, 3836, 3836,
     3836, 3836, 3694, 3836, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3837, 3694, 3838, 3838, 3838, 3839,
     3840, 3694, 3694, 3694, 3694, 3694, 3841, 3842, 3843, 3844,
     3694, 3694, 3694, 3694, 3694, 3845, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3846, 3846,
     3846, 3847, 3694, 3694, 3848, 3848, 3848, 3848, 3694, 3694,
     3694, 3694, 3694, 3849, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3850, 3694,
     3694, 3851, 3694, 3694, 3694, 3852, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3853, 3854, 3694, 3694, 3694,
     3694, 3855, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3856, 3857, 3858, 3694, 3859,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3860, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3861, 3694, 3694,
     3862, 3694, 3694, 3862, 3863, 3694, 3694, 3862, 3864, 3694,
     3694, 3864, 3865, 3694, 3694, 3694, 3866, 3694, 3694, 3866,
     3867, 3694, 3694, 3694, 3868, 3694, 3694, 3868, 3869, 3694,

     3694, 3694, 3868, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3870, 3871,
     3694, 3694, 3872, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3873, 3694, 3694, 3873, 3694, 3873, 3874, 3694,
     3694, 3875, 3875, 3694, 3694, 3694, 3694, 3694, 3876, 3694,
     3876, 3876, 3876, 3694, 3876, 3694, 3876, 3694, 3877, 3694,
     3877, 3877, 3877, 3877, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3878,

     3878, 3694, 3694, 3879, 3694, 3694, 3694, 3880, 3881, 3882,
     3882, 3883, 3884, 3694, 3694, 3694, 3694, 3885, 3694, 3694,
     3694, 3694, 3694, 3886, 3694, 3694, 3887, 3694, 3694, 3694,
     3694, 3694, 3888, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3889, 3694, 3889, 3889, 3889,
     3889, 3890, 3890, 3694, 3890, 3890, 3890, 3694, 3694, 3890,
     3694, 3694, 3890, 3891, 3694, 3892, 3694, 3892, 3892, 3694,
     3892, 3694, 3694, 3694, 3694, 3892, 3694, 3694, 3694, 3893,
     3694, 3694, 3893, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3894, 3694, 3694, 3895, 3895, 3896, 3694, 3895, 3897,
     3898, 3894, 3894, 3899, 3900, 3897, 3694, 3694, 3694, 3898,
     3694, 3694, 3694, 3901, 3901, 3902, 3694, 3694, 3694, 3694,
     3903, 3903, 3694, 3904, 3904, 3905, 3904, 3906, 3907, 3694,
     3694, 3694, 3906, 3694, 3694, 3694, 3907, 3907, 3907, 3908,
     3694, 3694, 3908, 3909, 3694, 3910, 3909, 3911, 3909, 3912,
     3694, 3913, 3913, 3694, 3694, 3694, 3694, 3694, 3914, 3914,
     3915, 3915, 3916, 3916, 3916, 3917, 3917, 3694, 3694, 1179,
     3916, 3917, 3917, 3918, 3919, 3694, 3694, 3694, 3920, 3918,
     3694, 3921, 3921, 3922, 3694, 3694, 3694, 3694, 3923, 3924,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3925, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3926, 3926, 3927,
     3694, 3694, 3694, 3694, 3926, 3928, 3929, 3930, 3694, 3694,
     3931, 3931, 3694, 3694, 3932, 3694, 3694, 3694, 3933, 3934,
     3928, 3694, 3694, 3694, 3935, 3936, 3936, 3936, 3936, 3936,
     3936, 3694, 3929, 3694, 3929, 3925, 3694, 3929, 3929, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3937, 3937,

     3937, 3694, 3694, 3694, 3694, 3938, 3938, 3939, 3938, 3940,
     3941, 3940, 3694, 3941, 3694, 3694, 3694, 3694, 3942, 3694,
     3694, 3942, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3943, 3694, 3694, 3694, 3694,
     3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943,
     3694, 3694, 3694, 3944, 3944, 3694, 3694, 3945, 3945, 3946,
     3947, 3694, 3948, 3694, 3694, 3694, 3949, 3694, 3950, 3949,
     3694, 3949, 3694, 3694, 3951, 3951, 3952, 3951, 3953, 3954,
     3953, 3954, 3955, 3955, 3694, 3956, 3957, 3694, 3694, 3694,
     3694, 3694, 3955, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3958, 3958, 3694, 3694, 3694, 3958, 3959, 3694, 3959, 3959,
     3959, 3694, 3694, 3960, 3960, 3960, 3961, 3961, 3961, 3962,
     3962, 3962, 3962, 3694, 3694, 3694, 3963, 3694, 3694, 3694,
     3694, 3963, 3963, 3963, 3964, 3965, 3964, 3966, 3694, 3967,
     3966, 3968, 3694, 3968, 3969, 3694, 3694, 3970, 3970, 3694,
     3694, 3694, 3694, 3694, 3971, 3694, 3972, 3694, 3972, 3973,
     3694, 3694, 3973, 3974, 3694, 3974, 3974, 3975, 3694, 3694,
     3975, 3976, 3976, 3976, 3977, 3694, 3694, 3694, 3977, 3694,
     3978, 3694, 3978, 3978, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3979, 3979, 3694, 3980, 3979, 3979, 3981, 3981, 3694,
     3694, 3694, 3694, 3982, 3982, 3983, 3983, 3984, 3985, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3986, 3986, 3987, 3694,
     3694, 3987, 3694, 3694, 3988, 3988, 3988, 3989, 3694, 3989,
     3990, 3694, 3991, 3694, 3694, 3694, 3992, 3992, 3993, 3992,
     3994, 3995, 3994, 3995, 3694, 3694, 3694, 3694, 3694, 3694,
     3996, 3694, 3997, 3694, 3998, 3999, 3694, 3694, 3694, 3694,
     3694, 4000, 4000, 4001, 4001, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 4002, 4003, 4004, 4002, 4002, 4005,
     4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4011, 3694,

     3694, 3694, 3694, 3694, 3694, 4014, 4015, 4016, 4014, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 4017, 4017, 4017, 3694,
     4018, 4019, 3694, 4019, 3694, 3694, 4019, 3694, 3694, 4020,
     4020, 4020, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 4021, 4021, 4022, 4023, 4024, 3694, 3694,
     3694, 4024, 4023, 3694, 4025, 4025, 4026, 4027, 3694, 3694,
     4027, 3694, 4028, 3694, 4029, 3694, 3694, 3694, 4030, 4030,
     4031, 4030, 4032, 4033, 4032, 4033, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 4034, 3694, 3694, 3694, 4034,
     4034, 4035, 4035, 4035, 3694, 3694, 3694, 3694, 4035, 4035,

     4036, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 4035,
     4037, 3694, 3694, 4037, 3694, 4038, 3694, 3694, 3694, 3694,
     3694, 3694, 4038, 3694, 3694, 3694, 3694, 3694, 3694, 4039,
     4040, 3694, 4041, 4042, 4042, 4043, 4044, 4045, 3694, 4046,
     4047, 3694, 4048, 3694, 3694, 4049, 4050, 3694, 4051, 4051,
     3694, 3694, 3694, 4052, 4053, 4054, 4055, 4056, 4057, 4057,
     4058, 4058, 4059, 4060, 4061, 4058, 4062, 3694, 3694, 3694,
     3694, 4063, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 4064, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 4065, 3694, 3694, 3694, 4066, 3694, 4067,
     4068, 3694, 3694, 4069, 4070, 3694, 4071, 3694, 3694, 4072,
     3694, 3694, 3694, 4073, 3694, 4074, 4064, 3694, 3694, 3694,
     3694, 4075, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076,
     3694, 4077, 4077, 4077, 3694, 3694, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 3694, 3694, 3694, 4078,

     4079, 3694, 4072, 3694, 4073, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 4072, 3694, 3694, 4073, 3694,
     4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 3694,
     3694, 4081, 4082, 4083, 3694, 3694, 3694, 3694, 3694, 3694,
     4084, 3694, 3694, 4085, 4085, 4086, 4087, 4088, 4089, 4090,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     4091, 4091, 3694, 4092, 4092, 4092, 4093, 4094, 4095, 4095,
     3694, 4096, 4097, 4097, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 4072, 3694, 4073, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 4098, 4099, 3694, 4100, 4100,

     3694, 3694, 3694, 3694, 3694, 4101, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 4102, 3694, 4103, 4103, 3694,
     4104, 3694, 4105, 4106, 3694, 3694, 4107, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 4108, 4109, 3694, 3694, 3694, 4110,
     3694, 3694, 3694, 4111, 3694, 3694, 3694, 4112, 3694, 3694,
     3694, 4113, 3694, 3694, 3694, 4114, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     4115, 3694, 4116, 3694, 3694, 3694, 4117, 4118, 3694, 3694,
     4119, 4120, 3694, 3694, 3694, 3694, 3694, 4121, 4121, 4122,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 4123,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 4124, 4125,
     4126, 3694, 3694, 3694, 3694, 3694, 4127, 4127, 3694, 3694,
     4128, 3694, 4129, 4130, 4131, 4130, 3694, 4132, 4133, 4134,
     4135, 4136, 3694, 3694, 3694, 3694, 4137, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 4138, 4138, 3694, 4139, 4140,
     4140, 4141, 3694, 3694, 4142, 4142, 3694, 4143, 4140, 4144,

     3694, 3694, 3694, 3694, 3694, 4145, 3694, 3694, 3694, 3694,
     3694, 4146, 3694, 3694, 4147, 4148, 4149, 4149, 4149, 4149,
     4149, 4149, 4149, 4149, 4150, 4150, 4150, 4150, 4150, 4150,
     4150, 4150, 4150, 4150, 4150, 4150, 4150, 4150, 4150, 4150,
     4150, 4150, 4150, 4150, 4150, 4150, 4150, 4150, 4150, 4150,
     4150, 4150, 4150, 4150, 4150, 4150, 3694, 4150, 4150, 4150,
     4150, 4150, 4150, 4150, 4150, 4150, 4150, 4150, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 4151, 4151, 3694, 4151, 4151, 4151, 4151, 3694, 3694,
     4151, 4152, 3694, 4153, 4154, 3694, 3694, 3694, 4155, 3694,

     4156, 4157, 4158, 3694, 3694, 3694, 3694, 3694, 4159, 4159,
     3694, 4160, 4160, 4160, 4161, 4162, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 4163, 4164,
     4164, 3694, 3694, 3694, 3694, 3694, 4165, 3694, 3694, 3694,
     3694, 4166, 3694, 4167, 3694, 3694, 3694, 3694, 3694, 4168,
     4169, 3694, 3694, 4170, 3694, 3694, 4171, 3694, 3694, 4172,
     3694, 3694, 4173, 3694, 3694, 4174, 3694, 3694, 3694, 3694,
     3694, 4175, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     4176, 3694, 3694, 3694, 3694, 3694, 4177, 4177, 3694, 3694,
     2390, 3694, 4178, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 4179, 4179, 4180, 4181, 4181, 4182, 3694, 4183,
     4183, 4184, 4185, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 4186, 3694, 4187,
     3694, 4188, 3694, 4189, 3694, 4190, 4190, 4191, 4191, 4192,
     3694, 3694, 4193, 4194, 4194, 4194, 4194, 4194, 4194, 4194,
     4194, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195,

     4195, 3694, 3694, 3694, 3694, 4195, 3694, 3694, 4195, 4195,
     4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195,
     4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 3694, 3694,
     4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195,
     4195, 4195, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 3694, 3694,
     4197, 3694, 3694, 3694, 3694, 4198, 3694, 3694, 3694, 3694,
     4199, 4199, 3694, 4200, 4200, 4200, 4200, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 4201, 4201, 3694, 3694,
     3694, 3694, 3694, 3694, 4202, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 4203, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 4204, 4204, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 4205, 4205,
     4206, 4207, 4208, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 4209, 4209, 4188, 3694, 4191, 3694, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4194, 4194, 4195, 4195, 4195,
     4195, 4195, 3694, 3694, 4195, 3694, 4195, 4195, 3694, 3694,
     3694, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195,
     4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195, 4195,
     4195, 3694, 3694, 4195, 4195, 4195, 4195, 4195, 4195, 4195,
     3694, 3694, 3694, 3694, 4195, 4195, 4195, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 4196, 3694, 4196, 4196, 4196,
     3694, 3694, 4196, 4196, 3694, 4198, 3694, 4199, 4200, 4200,
     4200, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 4201,

     3694, 4210, 3694, 4203, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 4204, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     4205, 3694, 3694, 3694, 4208, 3694, 3694, 3694, 3694, 2658,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 4194, 4194, 4194, 4194,

     4194, 4194, 4194, 4194, 4195, 4195, 4195, 4195, 4195, 4195,
     3694, 3694, 3694, 3694, 4195, 3694, 3694, 4195, 4195, 3694,
     3694, 3694, 4195, 4195, 4195, 3694, 4195, 4195, 3694, 3694,
     4195, 4195, 3694, 4195, 4195, 4195, 4195, 4195, 3694, 3694,
     4195, 4195, 3694, 3694, 2924, 4195, 3694, 3694, 3694, 4195,
     4195, 4195, 3694, 3694, 4195, 4195, 4195, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 4196, 4196, 3694, 3694, 3694, 3694,
     4196, 3694, 4198, 4199, 4200, 4200, 4200, 4211, 3694, 3694,
     3694, 4212, 4201, 3694, 4210, 4213, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 4214, 3694, 3694, 3694, 3694, 3694, 4208, 3694,
     3694, 3694, 2658, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 4194, 4194, 4194,
     4194, 4194, 4194, 3694, 4194, 4195, 4195, 4195, 4195, 4195,
     3694, 3694, 3694, 3694, 4195, 3694, 3694, 4195, 4195, 3694,
     3694, 3694, 3694, 3694, 3694, 4195, 4195, 4195, 4195, 3694,

     3694, 3694, 3694, 4195, 3694, 3694, 4195, 4195, 4195, 4195,
     4195, 3694, 4195, 4195, 3694, 3694, 4195, 3694, 3694, 3694,
     4195, 3694, 3694, 4195, 3694, 3694, 3694, 3694, 3694, 4196,
     4196, 4196, 3694, 4198, 4200, 4200, 4200, 4211, 4215, 3694,
     3694, 3694, 4212, 4216, 3694, 4213, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 4208, 3694,
     2658, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 4194,
     4194, 4194, 3694, 4194, 4194, 4194, 4195, 4195, 3694, 4195,
     3694, 3694, 4195, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     4195, 3694, 4195, 3694, 3694, 4195, 3694, 4195, 4195, 4195,
     3694, 4195, 4195, 4195, 3694, 3694, 4195, 3694, 3694, 3694,
     3694, 3694, 3694, 4195, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 4198, 4200, 4215, 3694, 4216, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 4208, 3694, 2658,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 4217, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 4194, 4194, 3694,
     4194, 3694, 3694, 4195, 4195, 4195, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 4195, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 4195, 4195, 4195, 4195, 3694, 3694, 4195,
     4195, 4195, 4195, 3694, 3694, 3694, 4195, 3694, 3694, 3694,
     3694, 3694, 3694, 4200, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 4208, 2658, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 4217, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 4194, 3694, 3694, 4195,
     3694, 3694, 3694, 3694, 4195, 3694, 3694, 4218, 4219, 4219,
     4195, 4195, 3694, 3694, 3694, 4195, 4195, 4195, 4195, 3694,
     3694, 4195, 3694, 3694, 3694, 4200, 4220, 4221, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2658, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 4194,
     4195, 3694, 3694, 3694, 3694, 3694, 4219, 3694, 4195, 4195,
     3694, 4195, 4195, 4195, 3694, 3694, 3694, 3694, 3694, 3694,
     4220, 4222, 4221, 4223, 3694, 3694, 2658, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 4194, 3694, 3694,

     3694, 4195, 3694, 3694, 4195, 4195, 3694, 3694, 3694, 3694,
     4222, 4223, 2658, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     4194, 3694, 3694, 3694, 4195, 4195, 3694, 2658, 3694, 3694,
     3694, 3694, 4194, 3694, 3694, 4195, 3694, 3694, 3694, 2658,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 2658, 3694, 3694, 3694, 3694, 3694, 3694, 2658, 3694,
     3694, 3694, 3694, 2658, 3694, 3694, 2658, 3694, 3694, 2658,
     3694, 3694, 3694, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,

     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694, 2658, 3694,
     2658, 3694, 2658,    0, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694
    } ;

static yyconst flex_int16_t yy_nxt[28653] =
    {   0,
     3694, 3694,  255, 3694,  255, 3694,  256,  257,  256,  257,
     1240,  258, 3694,  258, 1240, 1088, 1098, 1099, 3694,  259,
     1089,  259,  254,  254,  255,  254,  254,  254,  256,  257,
      260,  254,  254,  258,  254,  254,  254,  254,  254,  254,
      254,  259,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  254,  254,  254,  254,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  254,  254,  254,  261,  263,  264,  263,  263,
     1096,  265,  266, 1238, 1239, 1097,  267,  263,  264,  263,
      263,  255,  265,  266,  268,  316,  317,  267, 1141, 1446,
      318,  319,  320, 1142, 1123,  268,  255, 1123,  321, 1151,
      378,  379, 1397, 1398, 1152,  380,  322,  255,  323, 1088,
      381,  256,  257,  382, 1089, 1091,  258,  269, 1091, 1168,
      383, 1462, 1168, 1446,  259, 1463, 1092, 2633,  269,  254,
      270,  271,  272,  270,  273,  256,  257,  274,  254,  254,
      258,  254,  254,  254,  254,  254,  254,  275,  259,  254,
      254,  254,  254,  254,  276,  277,  254,  254,  254,  254,

      254,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      254,  254,  254,  254,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  279,
      254,  280,  278,  254,  281,  282,  283,  281,  284,  256,
      257,  285,  254,  286,  258,  287,  254,  286,  288,  289,
      288,  254,  290,  254,  254,  254,  254,  254,  291,  286,
      292,  286,  254,  254,  293,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  287,  254,  254,  254,  294,  295,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  296,  294,  294,  294,
      294,  294,  294,  279,  254,  284,  294,  297,  297,  298,
      297,  297,  297,  299,  300,  301,  297,  297,  302,  297,
      297,  297,  297,  297,  297,  297,  303,  297,  297,  297,
      297,  297,  304,  305,  297,  297,  297,  297,  297,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  297,  297,
      297,  297,  306,  306,  306,  306,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  297,  297,  297,
      306,  297,  297,  298,  297,  297,  297,  299,  300,  307,
      297,  297,  302,  297,  297,  297,  297,  297,  297,  297,
      303,  297,  297,  297,  297,  297,  297,  305,  297,  297,
      297,  297,  297,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  297,  297,  297,  297,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  309,  308,

      308,  310,  297,  297,  308,  255, 1302,  255, 1088,  256,
      257,  256,  257, 1089,  258, 2393,  258, 1131, 1131, 1132,
     1131,  255,  259, 1088,  259,  316,  317, 1155, 1089, 1699,
      318,  319,  320, 1156,  442,  441,  442,  442,  321,  256,
      257, 1133, 1158, 1700,  258, 1088,  322, 2635,  323, 1303,
     1089, 1504,  452, 1505,  311, 1699,  311,  254,  254,  255,
      254,  254,  254,  256,  257,  312,  254,  254,  258,  254,
      313,  254,  254,  254,  254,  254,  259,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  254,  254,
      254,  254,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  254,  254,  254,
      314,  324,  325,  326,  324,  325,  324,  327,  328,  329,
      324,  324,  330,  324,  324,  324,  324,  324,  324,  324,
      331,  324,  324,  324,  324,  324,  324,  332,  324,  324,
      324,  324,  324,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  334,  324,  324,  324,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  335,  324,  324,  333,  255, 1348,  255, 1088,  337,
      338,  337,  338, 1089,  339, 1349,  339, 1140, 1140, 1140,
     1140,  255,  340,  428,  340,  378,  379,  429,  430, 1728,
      380, 1195,  431, 1196, 1195,  381, 1197,  255,  382, 1088,
      432,  256,  257, 1728, 1089,  383,  258, 1504,  433, 1505,
     1105, 1105, 1105, 1105,  259, 2636,  341, 1106,  341,  342,
      342,  343,  342,  342,  342,  344,  345,  346,  342,  342,
      347,  342,  342,  342,  342,  342,  342,  342,  348,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      342,  342,  342,  342,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  350,
      342,  342,  349,  254,  351,  352,  353,  351,  254,  256,
      257,  354,  254,  254,  258,  254,  254,  254,  288,  355,
      288,  254,  290,  254,  254,  254,  254,  254,  356,  277,
      357,  254,  358,  254,  293,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  254,  360,  254,  254,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  361,  254,  254,  359,  363,  364,  363,
      363, 1247,  365,  366, 1407, 1408, 1248,  367,  363,  364,
      363,  363, 1300,  365,  366,  368, 1155, 1301,  367,  255,
     1320, 1252, 1156,  371,  257, 1321,  368, 1993,  372,  373,
      255, 1158, 1253,  374,  371,  257,  259, 1096, 1231,  372,
      373, 1231, 1097,  375,  374, 1994,  428,  259,  255, 1364,

      429,  430,  469,  470,  375,  431, 1088,  471,  472,  473,
     1442, 1089, 1443,  432,  255,  474,  369, 1159,  469,  470,
     1806,  433,  370,  471,  472,  473, 1359,  369, 1444, 1359,
     1807,  474, 2387,  370,  442,  441,  442,  442, 1088,  256,
      257, 1409, 1410, 1089,  258, 1232, 1233,  376, 1124, 1124,
     1124, 1124,  452, 1366, 1385, 1125, 2387, 1385,  376,  254,
      384,  385,  386,  384,  387,  256,  388,  389,  390,  391,
      258,  392,  254,  391,  393,  394,  393,  395,  396,  397,
      397,  397,  397,  397,  398,  399,  400,  401,  254,  402,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  405,  404,  404,  404,  404,  404,
      406,  254,  254,  407,  408,  409,  404,  410,  411,  412,
      413,  414,  404,  415,  416,  417,  418,  419,  404,  420,
      404,  421,  422,  423,  424,  425,  404,  404,  404,  426,
      254,  387,  404,  254,  434,  435,  434,  434,  436,  256,
      257,  437,  254,  254,  258,  254,  254,  254,  254,  254,
      254,  254,  259,  254,  254,  254,  254,  254,  438,  254,
      254,  254,  254,  254,  254,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  254,  254,  254,  254,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  254,  254,  436,  439,  254,  440,  441,
      442,  440,  254,  256,  443,  444,  254,  254,  258,  445,
      254,  254,  254,  446,  254,  254,  447,  254,  254,  254,
      254,  254,  254,  448,  254,  449,  254,  254,  254,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  451,  254,
      254,  254,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  254,  254,  254,
      450,  255, 2637,  255, 1088,  256,  453,  256,  453, 1089,
      258,  454,  258,  454, 1337,  455, 1337,  455,  259, 1338,
      259, 1338, 1641, 1642,  456,  457,  456,  457,  459,  460,
      459,  459, 1088,  461,  462, 1728, 1362, 1089,  463,  464,
      465, 1363, 1385,  466, 1728, 1385,  467,  459,  460,  459,
      459,  476,  461,  462, 1625,  477,  478,  463,  464,  465,
      479, 1412,  466, 1384, 1412,  467, 1384,  476,  480, 1357,
     1626,  477,  478,  499, 1413,  481,  479,  500,  501,  455,
     1418,  455,  502,  503,  480, 1094, 1094, 1094, 1094, 1388,

      504,  481, 1418, 2210, 1389,  499, 1395,  505,  506,  500,
      501, 1396, 1402, 1095,  502,  503, 2272, 1403,  580,  255,
     1388,  580,  504,  581,  582, 1405, 1721, 1722,  583,  505,
      506,  584,  580,  255, 1742,  580,  585,  581,  582,  482,
     1419, 1479,  583, 1743, 1479,  584, 1134, 1134, 1134, 1134,
      585, 1492, 1419, 1135, 1492,  482,  458,  483,  484,  483,
      483,  458,  461,  462,  485,  458,  458,  463,  458,  458,
      458,  458,  486,  458,  458,  487,  458,  458,  458,  458,
      458,  486,  486,  458,  488,  458,  458,  458,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,

      489,  489,  489,  489,  489,  489,  489,  458,  458,  458,
      458,  489,  490,  489,  491,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  492,  493,  489,  489,  494,  495,
      496,  489,  497,  489,  489,  489,  486,  458,  458,  489,
      255, 1088, 1751,  255,  508,  509, 1089,  508,  509,  510,
     1751, 1752,  510,  515,  516,  517,  515,  511,  518,  519,
      511, 1415, 1501,  520, 1751, 1501, 1416,  515,  516,  517,
      515,  521,  518,  519, 1418, 1397, 1398,  520, 1094, 1094,
     1094, 1094, 1240,  522, 1393,  521, 1240, 1393, 1088,  512,
     1394,  513,  512, 1089,  513, 1418, 1095,  522,  515,  516,

      517,  515, 1425,  518,  519, 1407, 1408, 1426,  520,  515,
      516,  517,  515, 1422,  518,  519,  521, 1409, 1410,  520,
      515,  516,  517,  515, 1419,  518,  519,  521,  522, 1428,
      520,  255,  523,  524, 1429,  256,  257, 2638,  521,  522,
      258, 1101, 1101, 1101, 1101, 1419,  523,  524,  259, 1446,
      526,  515,  516,  517,  515,  557,  518,  519, 1102,  558,
      559,  520, 2639, 1419,  560, 1103, 1088,  561, 1418,  521,
      557, 1089,  562, 1599,  558,  559, 1599,  523,  525,  560,
     1420,  526,  561, 1446, 1793, 1421,  255,  562,  523,  525,
      256,  257, 1794, 1088, 1795,  258,  595,  596, 1089,  523,

      527, 2654,  255,  259, 1440,  563,  256,  257, 2655, 1441,
      555,  258,  595,  596, 1228, 1228, 1228, 1228, 1419,  259,
      563, 1229, 1246, 1246, 1246, 1246, 1325, 1325, 1325, 1325,
      523,  527,  254,  254,  255,  254,  254,  254,  256,  257,
      528,  254,  254,  258,  254,  254,  254,  254,  254,  254,
      254,  259,  254,  254,  254,  254,  254,  254,  529,  254,
      254,  254,  254,  254,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  254,  254,  254,  254,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      531,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  254,  254,  254,  530,  254,  532,  533,  532,
      532,  534,  256,  257,  535,  254,  254,  258,  254,  254,
      254,  254,  254,  254,  254,  259,  254,  254,  254,  254,
      254,  536,  254,  254,  254,  254,  254,  254,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  254,  254,  254,
      254,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  254,  254,  534,  537,

      539,  540, 1088,  539, 1088,  541,  542, 1089, 1468, 1089,
      543,  549,  540, 1468,  549, 1088,  541,  550,  544, 1471,
     1089,  543,  539,  551, 1472,  539, 1476,  552,  542,  544,
      545, 1477,  543,  255, 1483, 2033, 2656,  256,  257, 1484,
      553,  545,  258, 1493, 1101, 1101, 1101, 1101, 1494, 2033,
      259,  546,  545,  539,  551, 1446,  539, 1912,  552,  542,
      557, 1102,  546,  543,  564,  559, 1913, 2002, 1103,  565,
     1521,  553,  561,  554, 2453, 1522, 1337,  562, 2454,  547,
      548, 1338, 2003,  545, 1127, 1128, 1128, 1127,  557, 1446,
      547,  548,  564,  559,  540, 2144, 2145,  565,  566,  567,

      561,  546,  546,  543,  554,  562, 1627, 2657, 1129, 1627,
      563,  568,  555, 1186, 1186, 1186, 1186,  540,  569, 1628,
      587,  566,  567,  545,  588,  589,  543, 1123, 1123,  590,
     1123, 1123,  546,  546,  568,  572,  573,  591,  563,  574,
      575,  569, 1088, 1504,  576, 1505,  545, 1089, 1915,  572,
      573,  587,  577,  574,  575,  588,  589, 1916,  576, 1533,
      590, 1418, 1533, 1104, 1534, 1504,  577, 1505,  591,  255,
      592,  255,  570,  256,  257,  256,  257, 1773,  258, 1318,
      258, 1681, 1318, 1422, 1681,  578,  259, 1506,  259,  255,
     1773, 1088, 1187,  612,  613,  570, 1089, 2660,  614,  578,

     1682,  592,  598,  599,  598,  598,  615,  600,  601, 1507,
     2661, 1419,  602,  598,  599,  598,  598,  255,  600,  601,
      603,  256,  257,  602, 1088, 2154,  258, 1569,  604, 1089,
      605,  603, 1570, 1419,  259, 2155, 1232, 1233,  616,  604,
      617,  605,  606, 1693,  607, 2662, 1693,  593,  594,  593,
      594,  255, 2663,  255, 1088,  256,  257,  608,  257, 1089,
      258, 1578,  258,  609,  610, 1255, 1579, 1728,  259, 1694,
      259, 1339, 1339, 1339, 1339,  255,  606, 1582,  607,  608,
      257, 1728, 1583, 1588,  258,  609,  610, 1418, 1589,  255,
     1340,  619,  259,  612,  613,  620,  621, 1504,  614, 1505,

      622, 1128, 1128, 1128, 1128,  619,  615,  255,  623,  620,
      621,  256,  257, 2664,  622, 1257,  258, 1201, 1201, 1201,
     1201, 1258,  623, 1088,  259, 1129, 1259, 1260, 1089, 1261,
     1168, 1088,  678, 1168, 1088, 1202, 1089, 1419,  616, 1089,
      617,  254,  254,  255,  254,  254,  254,  256,  257,  624,
      254,  254,  258,  254,  254,  254,  254,  254,  254,  254,
      259,  254,  254,  254,  254,  254,  254,  625,  254,  254,
      254,  254,  254,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  254,  254,  254,  254,  626,  626,  626,  627,

      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  628,  626,  626,
      626,  254,  254,  254,  626,  630, 1799,  630, 1088,  631,
      632,  631,  632, 1089,  633, 1800,  633, 1323, 1323, 1323,
     1323, 1801,  634, 2665,  634,  637,  638,  637,  637, 1088,
      639,  640, 1324, 2666, 1089,  641,  637,  638,  637,  637,
     1088,  639,  640,  642, 2667, 1089,  641,  645,  646,  645,
      645, 1088,  647,  648,  642, 2668, 1089,  649,  680, 1915,
      650, 1088,  681,  682,  651,  652, 1089,  683, 1916, 1618,
     1145, 1145, 1145, 1145, 1619,  684, 2669,  653, 1504, 1088,

     1505, 1146,  643,  635, 1089,  635,  645,  646,  645,  645,
     1088,  647,  648,  643, 1129, 1624,  649,  255,  653,  650,
     1631,  256,  257,  651,  652, 1632,  258, 1600,  680, 2140,
     1600, 2670,  681,  682,  259,  705,  653,  683, 1601,  706,
      707, 1999,  678, 2140,  708,  684, 1306, 1306, 1306, 1306,
     1088, 1088,  709, 1307, 2671, 1089, 1089,  653,  254,  254,
      255,  254,  254,  254,  256,  257,  654,  254,  254,  258,
      254,  254,  254,  254,  254,  254,  254,  259,  254,  254,
      254,  254,  254,  254,  655,  254,  254,  254,  254,  254,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  656,  656,  254,
      254,  254,  254,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  254,  254,
      254,  656,  254,  254,  255,  254,  254,  254,  256,  257,
      657,  254,  254,  258,  254,  254,  254,  254,  254,  254,
      254,  259,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  254,  254,  254,  254,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  254,  254,  254,  658,  254,  254,  255,  254,
      254,  254,  256,  257,  659,  254,  254,  258,  254,  254,
      254,  254,  254,  254,  254,  259,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  254,  254,  254,
      254,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  254,  254,  254,  660,
      254,  661,  662,  661,  661,  254,  256,  257,  663,  254,
      254,  258,  254,  254,  254,  254,  664,  254,  254,  259,
      254,  254,  254,  254,  254,  254,  664,  254,  254,  254,
      254,  254,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  254,  254,  254,  254,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      254,  254,  254,  665,  667, 1983,  667, 1088,  668,  669,

      668,  669, 1089,  670, 1984,  670, 1203, 1203, 1203, 1203,
      255,  671,  255,  671,  688,  689,  688,  689, 1088,  690,
     1088,  690, 2575, 1089, 1204, 1089,  705,  691,  717,  691,
      706,  707,  718,  719,  692,  708,  692,  720, 1195,  721,
     2576, 1195,  717,  709, 1088,  722,  718,  719,  672, 1089,
      672,  720, 1088,  721,  673, 1195,  673, 1089, 1195,  722,
     1356, 1356, 1356, 1356,  674,  675,  674,  675, 1356, 1356,
     1356, 1356,  676,  677,  676,  677,  254,  254,  255,  254,
      254,  254,  256,  257,  685,  254,  254,  258,  254,  254,
      254,  254,  254,  254,  254,  259,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  254,  254,  254,
      254,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  254,  254,  254,  686,
      693,  694,  441,  694,  694,  693,  695,  696,  697,  693,
      693,  698,  693,  693,  693,  693,  699,  693,  693,  700,
      693,  693,  693,  693,  693,  693,  701,  693,  693,  693,
      693,  693,  702,  702,  702,  702,  702,  702,  702,  702,

      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  693,  693,  693,  693,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      703,  693,  693,  702,  254,  254,  255,  254,  254,  254,
      256,  257,  710,  254,  254,  258,  711,  254,  254,  254,
      254,  254,  254,  259,  254,  254,  254,  254,  254,  712,
      713,  254,  254,  254,  254,  254,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  254,  254,  254,  254,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  715,  254,  254,  714,  254,  254,
      255,  254,  254,  254,  256,  257,  723,  254,  254,  258,
      724,  254,  254,  254,  725,  254,  254,  259,  254,  254,
      254,  254,  254,  726,  713,  254,  254,  254,  254,  254,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  254,
      254,  254,  254,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  715,  254,
      254,  727,  729, 1088, 2672,  729,  730,  731, 1089,  730,
      731,  732, 1695,  733,  732, 1688,  733, 1696, 1688,  734,
      255, 1418,  734,  255,  256,  257, 1687,  256,  257,  258,
      255, 1697,  258, 1689,  256,  257, 1698,  259, 1690,  258,
      259,  736, 2673, 1691, 2675,  735,  255,  259,  735,  255,
      256,  257,  255,  256,  257,  258,  256,  257,  258, 1714,
      736,  258, 1697,  259, 1696, 2676,  259, 1715,  255,  259,
      743, 1419,  256,  257, 1718, 2677,  743,  258,  783, 1719,
     1165, 1165, 1165, 1165,  737,  259,  738, 1726, 1790,  255,

      739, 1791, 1727,  256,  257, 2678,  740, 1768,  258,  783,
      741,  742, 1769,  737, 1166,  738,  259, 2679, 1167,  739,
     1355, 1356, 1356, 1355, 1803,  740, 1357, 1804, 2680,  741,
      742,  254,  744,  255,  254,  744,  254,  256,  257,  745,
      254,  254,  258,  746,  254,  254,  254,  254,  254,  254,
      259,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  254,  254,  254,  254,  747,  747,  747,  748,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  747,  747,  747,  749,  747,  747,
      747,  254,  254,  254,  747,  254,  254,  255,  254,  254,
      254,  256,  257,  750,  254,  254,  258,  254,  254,  254,
      254,  254,  254,  254,  259,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  254,  254,  254,  254,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  254,  254,  254,  751,  255,

     1446, 2088, 1723,  256,  257, 1723, 1155, 2681,  258,  255,
      752, 1446, 1156,  256,  257, 1724,  259, 2682,  258,  255,
      752, 1158, 1662,  256,  257, 1662,  259, 2088,  258, 1663,
      784, 1664,  753, 2120, 1446, 1664,  259, 1201, 1201, 1201,
     1201, 2119,  753,  754,  755, 1446,  756, 1365, 1365, 1365,
     1365, 2205, 2206,  754,  755, 1202,  756,  254,  254,  255,
      254,  254,  254,  256,  257,  757,  254,  254,  258,  254,
      254,  254,  254,  254,  254,  254,  259,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  254,  254,
      254,  254,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  254,  254,  254,
      758,  254,  254,  255,  254,  254,  254,  256,  257,  759,
      254,  254,  258,  254,  254,  254,  254,  254,  254,  254,
      259,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  254,  254,  254,  254,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  254,  254,  254,  760,  762,  763,  762,  762,  818,
      764,  765, 2683,  819,  820,  766,  767,  768,  821,  822,
      769,  770, 1776,  771, 1778, 1385,  823, 1777, 1385, 1779,
      772,  773,  255,  774,  775,  776,  256,  257, 2141, 1155,
     2349,  258,  255,  784, 2684, 1156,  256,  257, 2348,  259,
     1091,  258, 2141, 1091, 1158,  777,  795,  768,  255,  259,
      818, 1092,  256,  257,  819,  820,  796,  258, 1783,  821,
      822, 2685,  795, 1784, 1785,  259, 1786,  823, 1323, 1323,

     1323, 1323,  796, 2686,  778,  768,  762,  763,  762,  762,
      840,  764,  765, 1324,  841,  842,  766,  767,  768,  843,
     1384,  769,  770, 1384,  771, 1744, 1357,  844, 1744, 1745,
     2033,  772,  773,  845,  774,  775,  776,  255, 2687, 2034,
      255,  798,  799, 1746,  798,  799,  800,  801,  802,  800,
      801,  802, 1091, 2583,  803, 1091,  777,  803,  768, 2688,
     1810, 2584,  804, 1092,  805,  804,  872,  805, 1811, 1954,
      873,  874, 2689, 1812, 1955,  875,  876,  877, 1423, 1423,
     1423, 1423, 2690,  878, 2691,  778,  768,  254,  779,  780,
      779,  779,  254,  256,  257,  781,  254,  254,  258,  254,

      254,  254,  254,  254,  254,  254,  259,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  254,  254,
      254,  254,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  254,  254,  254,
      782,  254,  785,  786,  785,  785,  254,  256,  257,  787,
      254,  788,  258,  789,  254,  788,  254,  790,  254,  254,
      791,  254,  254,  254,  254,  254,  254,  792,  254,  793,

      254,  254,  254,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  254,  254,  254,  254,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  254,  254,  254,  794,  806,  807,  808,  807,  807,
      809,  810,  811,  812,  806,  806,  813,  806,  806,  806,
      806,  806,  806,  806,  814,  806,  806,  806,  806,  806,
      815,  806,  806,  806,  806,  806,  806,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,

      816,  816,  816,  816,  816,  816,  806,  806,  806,  806,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  806,  806,  809,  816,  255,
     1957, 2692,  255,  256,  257, 1958,  256,  257,  258,  824,
      825,  258,  824,  825, 1385, 1479,  259, 1385, 1479,  259,
      828,  829,  828,  828,  840,  830,  831, 2176,  841,  842,
      832,  833,  834,  843,  828,  829,  828,  828,  835,  830,
      831,  844, 2693, 2177,  832,  833,  834,  845,  826, 2205,
     2212,  826,  835,  828,  829,  828,  828,  954,  830,  831,

     1468,  830,  831,  832,  833, 1468,  832,  828,  829,  828,
      828,  835,  830,  831,  966, 2205, 2206,  832,  833,  837,
     1091,  838,  967, 1091,  968,  835, 2694, 1375, 1375, 1375,
     1375, 1092, 2697,  837, 1376,  838,  254,  254,  255,  254,
      254,  254,  256,  257,  846,  254,  254,  258,  254,  254,
      254,  254,  254,  254,  254,  259,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  254,  254,  254,
      254,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  254,  254,  254,  847,
      254,  254,  255,  254,  254,  254,  256,  257,  848,  254,
      254,  258,  254,  254,  254,  254,  254,  254,  254,  259,
      254,  254,  254,  254,  254,  254,  849,  254,  254,  254,
      254,  254,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  254,  254,  254,  254,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      254,  254,  254,  850,  852, 2698,  852, 1468,  853,  854,
      853,  854, 1468,  855, 1492,  855,  856, 1492,  856, 1728,
      852,  857,  852,  857,  859,  854,  859,  854, 1728,  860,
     1501,  860,  856, 1501,  856, 2140,  862,  857,  862,  857,
      863,  864,  863,  864, 2140,  865, 1393,  865,  866, 1393,
      866, 2699, 1394,  867,  858,  867,  858,  862, 2141,  862,
     2031,  869,  864,  869,  864, 2032,  870, 2141,  870,  866,
      858,  866,  858,  872,  867, 1695,  867,  873,  874, 2700,
     1696, 2701,  875,  876,  877, 2702,  868,  880,  868,  880,
      878,  881,  882,  881,  882, 1504,  883, 1505,  883, 1145,

     1145, 1145, 1145, 2071,  884, 2306,  884,  868,  888,  868,
     1146,  888,  889,  890, 2306,  889,  890,  891,  892,  893,
      891,  892,  893, 1129, 1412,  894,  896, 1412,  894,  896,
      897,  898, 2307,  897,  903,  899, 2000, 1413,  899,  905,
      906, 2307,  905,  900,  907,  908,  900, 1714, 2071,  909,
      910,  911, 1696, 1600,  255, 1148, 1600,  912, 1052, 1053,
     1504, 2704, 1505, 1054, 1601,  885,  886,  885,  886,  905,
      906, 1055,  905,  255,  907,  908, 2071,  508,  509,  909,
      910,  911,  510,  459,  460,  459,  459,  912,  461,  462,
      511, 2331, 2171,  463,  934,  935, 2083, 2172,  466, 2083,

     1710,  467, 2306, 1710,  901,  902, 2706,  901,  902,  914,
      915,  914,  914, 1711,  916,  917, 2306, 1155, 1712,  918,
      919,  920,  512, 1156,  952, 2064, 1694,  921,  459,  460,
      459,  459, 1158,  461,  462,  922, 2307,  923,  463,  934,
      935, 2479, 1231,  466,  255, 1231,  467,  255,  937,  938,
     2307,  937,  938,  939, 1533,  940,  939, 1533,  940, 1534,
     1917,  941,  954, 1917,  941, 1757,  830,  963, 2064, 2205,
     2212,  832,  964,  965, 1100, 1101, 1101, 1100, 1959,  966,
     2159, 2708,  924,  914,  915,  914,  914, 1318,  916,  917,
     1318, 1102, 2160,  918,  919,  920, 2161, 2064, 1103, 1232,

     1233,  921,  943,  944,  943,  943, 2640,  945,  946,  922,
     1782,  923,  947,  948,  949, 1681, 2053,  950, 1681, 2053,
      951,  943,  944,  943,  943, 1917,  945,  946, 1917, 1918,
     2640,  947,  948,  949, 1682, 2147,  950,  954, 2148,  951,
     2054,  830,  963, 1919, 1232, 1233,  832,  964,  965, 1423,
     1423, 1423, 1423, 1104,  966, 1851,  924,  925,  925,  926,
      925,  925,  925,  927,  928,  929,  925,  925,  930,  925,
      925,  925,  925,  925,  925,  925,  931,  925,  925,  925,
      925,  925,  925,  932,  925,  925,  925,  925,  925,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,

      933,  933,  933,  933,  933,  933,  933,  933,  925,  925,
      925,  925,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  932,  925,  925,
      933,  255, 1504,  954, 1505,  508,  509,  955,  956, 1504,
      510, 1505,  957, 1203, 1203, 1203, 1203,  954,  511,  954,
      958,  955,  956,  960,  956, 2106,  957, 1627,  961, 1917,
     1627, 1204, 1917, 1918,  958, 1318,  958,  954, 1318,  954,
     1628,  960,  956,  830,  831, 2752,  961, 1919,  832, 2753,
      512, 2587,  952,  959,  958, 2768,  966, 2330, 1108, 1108,

     1108, 1108, 1109, 2094,  967, 1110,  968,  959,  970,  959,
     2106, 1917,  971,  972, 1917, 1985, 2769,  973,  977,  970,
      974,  977, 1103,  971,  972,  975, 2770,  959,  973, 1986,
      980,  978, 1232, 1233,  981,  982,  975,  976, 2106,  983,
     1145, 1145, 1145, 1145, 2347,  980, 2094,  984,  976,  981,
      982, 1146, 1688, 2347,  983, 1688,  970, 2771,  976,  985,
      987,  988,  984, 1693, 1129,  989, 1693,  970, 2772,  976,
     1689,  987,  988,  990,  985, 2094,  989,  255, 2773, 1109,
      985,  993,  994,  255,  990,  991,  995,  993,  994, 1694,
     2774, 2347,  995,  255,  996,  985,  991, 1046, 1047, 1149,

      996, 2386, 1048,  255, 1049, 2347,  991, 1046, 1047, 2162,
     1050, 2163, 1048, 1688, 1049, 2386, 1688,  991,  255, 2164,
     1050, 1057, 1052, 1053, 2399, 1058, 1059, 1054,  997, 2529,
     1060, 1689, 1057, 2775,  997, 1055, 1058, 1059, 1061, 2083,
     2776, 1060, 2083, 2427, 2530,  998, 2778, 2779, 2428, 1061,
     2399,  998,  999, 1000, 1001, 1000, 1000,  999, 1002, 1003,
     1004,  999,  999, 1005,  999,  999,  999,  999,  999,  999,
      999, 1006,  999,  999,  999,  999,  999,  999, 1007,  999,
      999,  999,  999,  999, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,

     1008, 1008, 1008, 1009,  999,  999,  999, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008,  999,  999,  999, 1008,  254, 1010, 1011, 1010,
     1010,  254,  256,  257, 1012,  254,  254,  258,  254,  254,
      254,  254,  254,  254,  254,  259,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013,  254,  254,  254,
      254, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013,  254,  254,  254, 1013,
      255, 2780,  255, 2103, 1015, 1016, 1015, 1016, 2784, 1017,
     1018, 1017, 1018, 2104, 2626, 1063, 1064, 1019, 1063, 1019,
     1065, 1066, 2627, 1681, 1935, 1067, 1681, 2103, 1068, 1117,
     1117, 1117, 1117, 1069, 1206, 1206, 1206, 1206, 2400, 2104,
     1118, 1070, 1682, 1742, 1119, 1071, 1102, 1201, 1201, 1201,
     1201, 2479, 1743, 1103, 1121, 1122, 2707, 1935, 1208, 1438,
     1438, 1438, 1438, 2785, 2400, 1202, 1072, 1020, 1951, 1020,
     1021, 1022, 1023, 1022, 1022, 1024, 1025, 1026, 1027, 1021,

     1021, 1028, 1029, 1030, 1021, 1021, 1021, 1021, 1021, 1031,
     1021, 1021, 1021, 1021, 1021, 1032, 1021, 1021, 1021, 1021,
     1021, 1021, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1021, 1021, 1021, 1021, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1021, 1021, 1024, 1033, 1035,  255, 2641, 1035, 2053, 1036,
     1037, 2053, 1951, 2789, 1038, 1035,  255, 2790, 1035, 2791,
     1036, 1037, 1039, 2792, 2793, 1038, 1351, 1351, 1351, 1351,

     2641, 1040, 2054, 1039, 1073, 1064, 2794, 1073, 1352, 1065,
     1066, 2795, 1040, 2102, 1067, 1077, 2102, 1074, 2796, 1078,
     1079, 1080, 1075, 2797, 1081, 2798, 1711, 1082, 2799, 2801,
     1070, 1041, 1083, 2803, 1071, 1188, 1188, 1188, 1188, 1155,
     1084, 1915, 1041, 1723, 1085, 1156, 1723, 1042, 1662, 1043,
     1916, 1662, 1189, 1044, 1158, 1072, 1724, 1664, 1042, 1191,
     1043, 1664, 1915, 2007, 1044, 1085, 1080, 1086, 1077, 1742,
     1086, 1916, 1078, 1079, 1080, 2007, 1744, 1081, 1743, 1744,
     1087, 1112, 1112, 1112, 1112, 1083, 1192, 2405, 1113, 1173,
     1174, 1174, 1173, 1084, 2113, 2695, 1175, 1085, 1102, 1128,

     1128, 1128, 1128, 1137, 2696, 2028, 1138, 1206, 1206, 1206,
     1206, 2028, 2037, 1241, 1241, 1241, 1241, 2037, 1085, 1080,
     1242, 1917, 1243, 1129, 1917, 2041, 1243, 1203, 1203, 1203,
     1203, 1208, 1262, 1262, 1262, 1262, 1504, 1244, 1505, 1959,
     2041, 1262, 1262, 1262, 1262, 1204, 1304, 1304, 1304, 1304,
     1662, 2102, 1177, 1662, 2102, 2045, 1208, 2802, 1264, 1664,
     2802, 2045, 1115, 1664, 1711, 1208, 1243, 1264, 1178, 2049,
     1305, 1438, 1438, 1438, 1438, 1480, 1480, 1480, 1480, 2049,
     1137, 1130, 1179, 1179, 1180, 1179, 1130, 1130, 1130, 1181,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1269, 1130, 1130,

     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1130, 1130, 1130, 1130, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1183, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 2805, 1130, 1130, 1182, 1174, 1174, 1174, 1174, 2057,
     2057, 2806, 1175, 1234, 1234, 1234, 1234, 1235, 2806, 2807,
     1236, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1155,
     1262, 1262, 1262, 1262, 2808, 1156, 2809, 1208, 1262, 1262,

     1262, 1262, 2810, 2183, 1158, 1208, 2183, 1264, 2465, 1208,
     2102, 1264, 2811, 2102, 1208, 2812, 1264, 1262, 1262, 1262,
     1262, 2813, 1208, 1711, 1264, 2814, 2815, 2816, 1177, 1304,
     1304, 1304, 1304, 2294, 2817, 1265, 2294, 2363, 2561, 1268,
     2363, 1208, 2607, 1264, 3694, 1205, 1206, 1206, 1205, 2123,
     2818, 1207, 2819, 1305, 1235, 1270, 2820, 1272, 1271, 2821,
     2825, 1273, 1262, 1262, 1262, 1262, 1504, 2826, 1505, 1208,
     1449, 1449, 1449, 1449, 1274, 1209, 2827, 2828, 2829, 1316,
     1094, 1094, 1316, 2830, 1275, 1317, 1208, 1450, 1264, 1210,
     1155, 2831, 1276, 2833, 1277, 1211, 1156, 1095, 2822, 1212,

     1213, 2822, 1214, 1215, 1216, 1158, 2834, 2835, 1217, 1218,
     1219, 1220, 1221, 2836, 1222, 2588, 1223, 1224, 1225, 1226,
     1227, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1278, 1262, 1262, 1262, 1262, 2832, 1262,
     1262, 1262, 1262, 1662, 2837, 1208, 1662, 1264, 2838, 1208,
     1663, 1264, 1664, 1208, 1677, 1264, 1664, 1677, 1208, 2839,
     1264, 2840, 2832, 1208, 2846, 1264, 2847, 1262, 1262, 1262,
     1262, 1094, 1094, 1094, 1094, 1262, 1262, 1262, 1262, 1677,
     1279, 1678, 1677, 1281, 1262, 1262, 1262, 1262, 1504, 1095,
     1505, 1208, 1280, 1264, 2849, 2852, 2853, 1282, 1283, 1208,

     2854, 1264, 1262, 1262, 1262, 1262, 1678, 1284, 1208, 2855,
     1264, 1679, 2858, 1285, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1286, 2859, 2860, 2861, 1208, 2800, 1264, 1680,
     2856, 1262, 1262, 1262, 1262, 2862, 1679, 2864, 1208, 2857,
     1264, 2866, 1208, 1289, 1264, 2823, 1287, 2868, 2823, 1288,
     1313, 1313, 1313, 1313, 1680, 1208, 2824, 1264, 2869, 1304,
     1304, 1304, 1304, 1309, 2870, 1290, 1310, 2871, 2872, 1094,
     1094, 1094, 1094, 1292, 1305, 1291, 1315, 1201, 1201, 1201,
     1201, 2873, 2875, 1305, 2876, 1294, 1296, 1095, 2874, 2877,
     1295, 2878, 1293, 2879, 1297, 1202, 2880, 2881, 2882, 1298,

     1203, 1203, 1203, 1203, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1373, 1373, 1373, 1373, 2883, 2884, 1204, 2885,
     2886, 1369, 2887, 2888, 2889, 1369, 2893, 2891, 1371, 2894,
     1233, 2895, 1371, 2706, 2479, 2896, 1374, 2916, 2917, 2943,
     1309, 1326, 1326, 1326, 1326, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1378, 2944, 2958, 1379, 1373, 1373, 1373,
     1373, 2959, 2960, 1372, 1391, 1391, 1391, 1391, 1327, 1374,
     2961, 2962, 2964, 1374, 1399, 1399, 1399, 1399, 2965, 2966,
     2971, 1374, 1392, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 2972, 1400, 2975, 2976, 2977, 1328, 2892, 1329, 1453,

     1453, 1453, 1453, 1456, 1456, 1456, 1456, 2978, 1330, 1331,
     2979, 2980, 1332, 1333, 1334, 2981, 1335, 1456, 1456, 1456,
     1456, 1094, 1094, 1094, 1094, 1201, 1201, 1201, 1201, 2982,
     1378, 1203, 1203, 1203, 1203, 1486, 1486, 1486, 1486, 1095,
     1435, 2984, 2987, 1202, 1435, 1488, 1488, 1488, 1488, 1204,
     1455, 2988, 1487, 1094, 1094, 1094, 1094, 2989, 1457, 1094,
     1094, 1094, 1094, 1201, 1201, 1201, 1201, 1828, 2991, 1490,
     1828, 1095, 1457, 1203, 1203, 1203, 1203, 1095, 1504, 2992,
     1505, 1202, 1527, 1527, 1527, 1527, 2993, 2990, 2994, 1528,
     2990, 1204, 1527, 1527, 1527, 1527, 2995, 1831, 2996, 1528,

     3694, 3694, 3694, 3694, 2071, 2997, 2998, 3694, 1530, 1530,
     1530, 1530, 2999, 1535, 1535, 1535, 1535, 3000, 1831, 2983,
     1536, 1531, 1537, 3001, 3002, 3003, 1537, 1535, 1535, 1535,
     1535, 3004, 3005, 3006, 1536, 1832, 1537, 3007, 1832, 1833,
     1537, 3694, 3694, 3694, 3694, 3008, 2822, 3009, 3694, 2822,
     3694, 3010, 3011, 1834, 3694, 1535, 1535, 1535, 1535, 3012,
     2802, 3013, 1536, 2802, 1537, 1835, 3014, 2985, 1537, 1201,
     1201, 1201, 1201, 1203, 1203, 1203, 1203, 1539, 1539, 1539,
     1539, 1542, 1542, 1542, 1542, 3015, 1835, 1202, 3016, 3017,
     3018, 1204, 1543, 1545, 1545, 1545, 1545, 1545, 1545, 1545,

     1545, 1547, 1547, 1547, 1547, 1544, 1143, 3021, 1548, 1167,
     3025, 1545, 1545, 1545, 1545, 1550, 3026, 1546, 1551, 3027,
     3028, 1546, 1545, 1545, 1545, 1545, 3029, 1541, 1555, 1555,
     1555, 1555, 3030, 3031, 3032, 1546, 1557, 1557, 1557, 1557,
     1556, 1564, 1564, 1564, 1564, 3033, 1546, 1558, 1564, 1564,
     1564, 1564, 1567, 1567, 1567, 1567, 1602, 1602, 1602, 1602,
     3034, 1559, 1602, 1602, 1602, 1602, 1610, 1610, 1610, 1610,
     1568, 3035, 1614, 1614, 1614, 1614, 3036, 1611, 1614, 1614,
     1614, 1614, 1616, 1616, 1616, 1616, 1560, 1615, 3037, 3038,
     3039, 1612, 1550, 1615, 1629, 1629, 1629, 1629, 3041, 2823,

     1633, 1634, 2823, 1635, 3043, 1636, 3044, 1628, 1637, 1638,
     2824, 3047, 1623, 3048, 3050, 3051, 1613, 3052, 1639, 3053,
     1640, 1644, 1644, 1644, 1644, 3054, 3059, 3062, 1645, 1644,
     1644, 1644, 1644, 3063, 3064, 2953, 1645, 1649, 1649, 1649,
     1649, 1655, 1655, 1655, 1655, 1612, 3065, 3066, 1656, 1650,
     2954, 3067, 1651, 1655, 1655, 1655, 1655, 1790, 3082, 3086,
     1656, 1659, 1659, 1659, 1659, 1667, 1667, 1667, 1667, 3087,
     3090, 1647, 1660, 1667, 1667, 1667, 1667, 1701, 3115, 1647,
     1669, 1669, 1669, 1669, 3116, 3117, 3122, 1670, 3123, 1668,
     3127, 1667, 1667, 1667, 1667, 1672, 3128, 1668, 1673, 1667,

     1667, 1667, 1667, 1710, 1702, 1703, 1710, 1704, 3129, 1705,
     3130, 3131, 1706, 1707, 3132, 1668, 1711, 1828, 3133, 1701,
     1828, 1712, 1708, 1668, 1709, 1702, 1703, 3135, 1704, 1694,
     1705, 3136, 3137, 1706, 1707, 1725, 1725, 1725, 1725, 1094,
     1094, 1094, 1094, 1708, 3138, 1709, 3140, 1831, 1724, 1100,
     1101, 1101, 1100, 1717, 3141, 3142, 3143, 1095, 1101, 1101,
     1101, 1101, 1112, 1112, 1112, 1112, 1102, 3145, 1831, 1113,
     3147, 3149, 1672, 1103, 3694, 1102, 1504, 3694, 1505, 1102,
     3150, 3694, 1103, 1105, 1105, 1105, 1105, 3151, 2372, 3152,
     1106, 3694, 3694, 3694, 3694, 2372, 2071, 3153, 3694, 1729,

     1729, 1729, 1729, 1108, 1108, 1108, 1108, 3154, 3155, 2203,
     1118, 2587, 2203, 3156, 1119, 1105, 1105, 1105, 1105, 3157,
     3148, 3158, 1106, 3148, 1121, 1122, 3159, 1103, 1104, 1117,
     1117, 1117, 1117, 3160, 1112, 1112, 1112, 1112, 3161, 2204,
     1118, 1113, 2990, 1115, 1119, 2990, 1102, 1732, 1732, 1732,
     1732, 1102, 2393, 1103, 1121, 1122, 3694, 3694, 3694, 3694,
     2204, 3162, 2393, 3694, 1102, 1734, 1734, 1734, 1734, 3013,
     3164, 3165, 1735, 3694, 1737, 1737, 1737, 1737, 1109, 3166,
     3167, 1110, 1117, 1117, 1117, 1117, 1124, 1124, 1124, 1124,
     3168, 3170, 3173, 1125, 3174, 3175, 3176, 1119, 1103, 1102,

     3177, 1117, 1117, 1117, 1117, 3178, 1103, 1121, 1122, 3180,
     3181, 3182, 1118, 3183, 3185, 1115, 1119, 3186, 1102, 3187,
     3188, 3694, 3694, 3694, 3694, 1103, 1121, 1122, 3694, 3189,
     3190, 1729, 1729, 1729, 1729, 3194, 3201, 3694, 1127, 1128,
     1128, 1127, 1118, 3202, 3203, 3207, 1119, 1128, 1128, 1128,
     1128, 1131, 1131, 1132, 1131, 1109, 1121, 1122, 1131, 1131,
     1132, 1131, 1129, 1134, 1134, 1134, 1134, 3208, 2672, 1254,
     1135, 1129, 2177, 3199, 3221, 1133, 3694, 3694, 3694, 3694,
     3222, 3227, 1133, 3694, 1739, 1739, 1739, 1739, 3200, 1134,
     1134, 1134, 1134, 3228, 3229, 1146, 1135, 1145, 1145, 1145,

     1145, 1140, 1140, 1140, 1140, 3225, 3230, 3245, 1146, 1747,
     1747, 1747, 1747, 1137, 3226, 3246, 1138, 1104, 3252, 3253,
     3256, 1129, 3257, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 3258, 3262, 1129, 1146, 3264, 2574, 3694, 1146, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1129, 3266, 3694,
     1146, 1129, 3268, 3269, 1146, 1165, 1165, 1165, 1165, 1173,
     1174, 1174, 1173, 1129, 2372, 3273, 1175, 1129, 1174, 1174,
     1174, 1174, 2372, 3274, 3275, 1175, 3276, 3277, 3278, 1166,
     3694, 3694, 3694, 3694, 2393, 3279, 3281, 3694, 3279, 3281,
     1137, 1188, 1188, 1188, 1188, 3282, 3280, 2393, 1750, 1188,

     1188, 1188, 1188, 3694, 3694, 3694, 3694, 3283, 1189, 3148,
     3694, 1749, 3148, 3284, 3285, 1191, 1189, 1188, 1188, 1188,
     1188, 3286, 1177, 1191, 3287, 1761, 1761, 1761, 1761, 3270,
     3271, 1177, 1762, 3292, 1189, 3293, 3294, 3296, 1178, 3297,
     3298, 1191, 1775, 1775, 1775, 1775, 3059, 3694, 1228, 1228,
     1228, 1228, 3299, 3301, 3302, 1229, 3305, 3308, 3309, 3694,
     1246, 1246, 1246, 1246, 3310, 1760, 1130, 1179, 1179, 1180,
     1179, 1130, 1130, 1130, 1181, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 3694, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1182, 1182,

     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1130, 1130, 1130,
     1130, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1183, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 3311, 1130, 1130, 1182,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1186, 1186,
     1186, 1186, 1188, 1188, 1188, 1188, 3313, 1189, 3314, 3315,
     3317, 1189, 3327, 3328, 1191, 3332, 3333, 3334, 1191, 1188,
     1188, 1188, 1188, 3335, 3356, 1812, 1191, 3359, 1201, 1201,
     1201, 1201, 1203, 1203, 1203, 1203, 1189, 1781, 1781, 1781,

     1781, 1790, 3360, 1191, 3358, 1192, 1202, 3361, 3364, 3365,
     1204, 3694, 3694, 3694, 3694, 3366, 1760, 2372, 3694, 3371,
     3372, 1208, 1813, 1813, 1813, 1813, 1234, 1234, 1234, 1234,
     1192, 3373, 1231, 3367, 3368, 1231, 3367, 1187, 1780, 1781,
     1781, 1780, 3374, 1832, 1207, 3375, 1832, 1904, 1264, 2393,
     1208, 1815, 1815, 1815, 1815, 1815, 1228, 1228, 1228, 1228,
     3378, 1905, 1208, 1229, 1323, 1323, 1323, 1323, 1209, 1840,
     1840, 1840, 1840, 1835, 1262, 1262, 1262, 1262, 3281, 1324,
     1841, 3281, 1210, 3379, 3369, 3370, 1842, 3369, 1211, 1232,
     1233, 3380, 1212, 1213, 1835, 1214, 1215, 1216, 1208, 3381,

     1264, 1217, 1218, 1219, 1220, 1221, 3382, 1222, 3386, 1223,
     1224, 1225, 1226, 1227, 1241, 1241, 1241, 1241, 3387, 3389,
     3392, 1242, 3279, 1243, 3393, 3279, 3398, 1243, 3694, 3694,
     3694, 3694, 3399, 3280, 3400, 3694, 2013, 3694, 1244, 2013,
     2014, 3694, 1819, 1819, 1819, 1819, 1822, 1822, 1822, 1822,
     3405, 1243, 3694, 1820, 2014, 1243, 3406, 3327, 1823, 1824,
     1828, 3225, 1832, 1828, 1829, 1832, 2015, 1243, 2207, 3412,
     1826, 2207, 1827, 1830, 3413, 1837, 1837, 1837, 1837, 1235,
     1959, 3694, 1236, 1840, 1840, 1840, 1840, 2015, 3414, 1782,
     1831, 1851, 1835, 2155, 1841, 1243, 3433, 3434, 1835, 1208,

     1842, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 3435,
     3436, 1831, 1841, 1835, 3437, 3439, 1841, 3437, 1842, 1835,
     3440, 2071, 1842, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1840, 3441, 3438, 3376, 1841, 3438, 3376, 2071, 1841, 3442,
     1842, 3443, 3013, 3376, 1842, 3377, 3376, 3444, 1844, 1262,
     1262, 1262, 1262, 3013, 3448, 3377, 1235, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 3048, 3451, 1845, 1846, 1855,
     1855, 1855, 1855, 1208, 1847, 1264, 1262, 1262, 1262, 1262,
     3452, 1208, 3453, 1264, 3456, 1208, 1850, 1264, 1262, 1262,
     1262, 1262, 3367, 3368, 1848, 3367, 3457, 1849, 3369, 3370,

     1208, 3369, 1264, 1852, 1853, 3458, 3459, 1854, 1262, 1262,
     1262, 1262, 1208, 3462, 1264, 1262, 1262, 1262, 1262, 3463,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1856, 3462,
     3464, 3465, 1208, 3479, 1264, 1262, 1262, 1262, 1262, 1208,
     3480, 1264, 3135, 2071, 1208, 1857, 1264, 3485, 1208, 2071,
     1264, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1208,
     1858, 1264, 3013, 1859, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1860, 3486, 3013, 1208, 3489, 1264, 3490, 1208,
     1862, 1264, 1861, 1262, 1262, 1262, 1262, 3491, 1208, 3492,
     1264, 3493, 1208, 3494, 1264, 3495, 1863, 1864, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 3462, 1208, 3500, 1264,
     1262, 1262, 1262, 1262, 1866, 1262, 1262, 1262, 1262, 3501,
     3437, 1867, 1208, 3437, 1264, 1865, 1208, 3481, 1264, 3510,
     2071, 1870, 3013, 1868, 1208, 3438, 1264, 1869, 3438, 1208,
     3515, 1264, 3483, 1262, 1262, 1262, 1262, 3317, 3516, 3519,
     1871, 1262, 1262, 1262, 1262, 1872, 1262, 1262, 1262, 1262,
     1876, 1873, 3520, 1874, 3459, 3694, 1877, 1208, 3694, 1264,
     3522, 1875, 3694, 3523, 3527, 1208, 2010, 1264, 2013, 2010,
     1208, 2013, 1264, 1262, 1262, 1262, 1262, 3530, 1878, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1879, 1262, 1262, 1262, 1262, 2012, 1208, 2015, 1264,
     3492, 3694, 3531, 1208, 3694, 1264, 3532, 1208, 3694, 1264,
     3534, 1208, 1881, 1264, 1880, 3535, 1208, 2012, 1264, 2015,
     1262, 1262, 1262, 1262, 3539, 1262, 1262, 1262, 1262, 3542,
     1262, 1262, 1262, 1262, 3543, 1884, 1882, 1304, 1304, 1304,
     1304, 1883, 3549, 1885, 1208, 3551, 1264, 1888, 1887, 1208,
     3532, 1264, 3563, 1886, 1208, 3566, 1264, 1262, 1262, 1262,
     1262, 1305, 3569, 1889, 1262, 1262, 1262, 1262, 2632, 2631,
     2630, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1090,
     2629, 1208, 2628, 1264, 1150, 2618, 1890, 1090, 1208, 2617,

     1264, 1153, 1150, 1892, 1891, 1208, 2616, 1264, 1153, 1208,
     1154, 1264, 1306, 1306, 1306, 1306, 1153, 1162, 1154, 1307,
     3694, 3694, 3694, 3694, 2615, 1162, 2614, 3694, 2372, 2612,
     1893, 1899, 1899, 1899, 1899, 1306, 1306, 1306, 1306, 1894,
     2611, 1169, 1307, 1313, 1313, 1313, 1313, 2057, 1828, 1169,
     1896, 1828, 1895, 1313, 1313, 1313, 1313, 1315, 1901, 1901,
     1901, 1901, 1309, 2209, 2608, 1310, 2209, 1305, 2049, 1315,
     1313, 1313, 1313, 1313, 2107, 2045, 2210, 1305, 1831, 1315,
     1171, 2041, 1305, 1316, 1094, 1094, 1316, 1828, 1171, 1317,
     1828, 1902, 2037, 2211, 1305, 2598, 1315, 2028, 2595, 1831,

     1903, 1095, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1339, 1339, 1339, 1339, 2211, 2007, 2592, 1831, 1339, 1339,
     1339, 1339, 1920, 1920, 1920, 1920, 2591, 2590, 1184, 1340,
     2589, 2586, 1351, 1351, 1351, 1351, 1184, 1340, 1831, 1309,
     1326, 1326, 1326, 1326, 1352, 1930, 1930, 1930, 1930, 1355,
     1356, 1356, 1355, 2585, 1319, 1357, 1931, 1356, 1356, 1356,
     1356, 1359, 1319, 1828, 1359, 2582, 1828, 1327, 2581, 2580,
     2579, 1932, 1937, 1937, 1937, 1937, 1938, 1939, 1940, 1938,
     1933, 1933, 1933, 1933, 1933, 1365, 1365, 1365, 1365, 1944,
     1944, 1944, 1944, 1831, 2578, 1328, 1945, 1329, 2577, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1330, 1331, 2574,
     1163, 1332, 1333, 1334, 1831, 1335, 1369, 1163, 1336, 2573,
     1369, 2572, 2571, 1371, 2570, 1163, 1336, 1371, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1373, 1373, 1373, 1373,
     1375, 1375, 1375, 1375, 1170, 1369, 1367, 1376, 2569, 1369,
     1172, 1170, 1371, 1951, 1367, 2564, 1371, 1172, 1942, 1170,
     1374, 3694, 3694, 3694, 3694, 1172, 1430, 1445, 3694, 1375,
     1375, 1375, 1375, 1935, 1430, 1445, 1376, 1373, 1373, 1373,
     1373, 1949, 1949, 1949, 1949, 1378, 1194, 1250, 1379, 1373,
     1373, 1373, 1373, 2293, 2558, 2557, 1385, 1322, 1947, 1385,

     2556, 1374, 1194, 1250, 1322, 1374, 1953, 1953, 1953, 1953,
     1194, 1250, 1322, 1374, 2555, 1815, 1815, 1815, 1815, 1815,
     1391, 1391, 1391, 1391, 1399, 1399, 1399, 1399, 1423, 1423,
     1423, 1423, 1434, 1434, 1434, 1434, 2554, 2207, 1392, 2553,
     2207, 2552, 1400, 1438, 1438, 1438, 1438, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 2551, 1969, 1969, 1969, 1969,
     2550, 2549, 1378, 1970, 1450, 2548, 2547, 1835, 1450, 1971,
     1449, 1449, 1449, 1449, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1448, 1450, 1835, 1435,
     1973, 1973, 1973, 1973, 1448, 2546, 2545, 1974, 1456, 1456,

     1456, 1456, 1981, 1981, 1981, 1981, 1480, 1480, 1480, 1480,
     1488, 1488, 1488, 1488, 2544, 1341, 1431, 1982, 1486, 1486,
     1486, 1486, 1341, 1431, 1452, 1455, 2543, 2482, 2481, 1455,
     1341, 1431, 1452, 1455, 1490, 1487, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 2009, 2009, 2009, 2009, 2010, 2479,
     2201, 2010, 2011, 1457, 2475, 1527, 1527, 1527, 1527, 2468,
     2467, 2011, 1528, 1458, 1490, 3694, 3694, 3694, 3694, 1467,
     2466, 1458, 3694, 1530, 1530, 1530, 1530, 1467, 2012, 1530,
     1530, 1530, 1530, 2464, 2463, 1987, 1531, 1530, 1530, 1530,
     1530, 1459, 1531, 2462, 1535, 1535, 1535, 1535, 1459, 2012,

     1531, 1536, 1256, 1537, 1470, 2461, 1459, 1537, 3694, 3694,
     3694, 3694, 1470, 1473, 2460, 3694, 2459, 3694, 1256, 1478,
     1473, 3694, 1535, 1535, 1535, 1535, 1256, 1478, 1473, 1536,
     2458, 1537, 2457, 2456, 2455, 1537, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1542, 1542,
     1542, 1542, 2452, 2018, 2018, 2018, 2018, 2451, 1481, 1543,
     2019, 1545, 1545, 1545, 1545, 1481, 2020, 1547, 1547, 1547,
     1547, 1485, 1544, 1481, 1548, 3694, 3694, 3694, 3694, 1485,
     1502, 1508, 3694, 2450, 1509, 1546, 1541, 2449, 1502, 1508,
     1541, 1509, 1514, 1516, 1541, 1547, 1547, 1547, 1547, 1509,

     1514, 1516, 1548, 1545, 1545, 1545, 1545, 2024, 2024, 2024,
     2024, 1550, 2448, 2447, 1551, 1545, 1545, 1545, 1545, 2446,
     1555, 1555, 1555, 1555, 2445, 2444, 2443, 1546, 2442, 1572,
     1574, 1546, 1556, 2025, 2025, 2025, 2025, 1572, 1574, 1546,
     1557, 1557, 1557, 1557, 2026, 1564, 1564, 1564, 1564, 2441,
     2440, 1558, 2030, 2030, 2030, 2030, 1567, 1567, 1567, 1567,
     2039, 2039, 2039, 2039, 2439, 1559, 2043, 2043, 2043, 2043,
     2047, 2047, 2047, 2047, 1568, 2051, 2051, 2051, 2051, 1599,
     1515, 1606, 1599, 1602, 1602, 1602, 1602, 1515, 1550, 1606,
     1560, 2059, 2059, 2059, 2059, 1515, 2438, 2437, 2052, 2052,

     2052, 2052, 2052, 1610, 1610, 1610, 1610, 1614, 1614, 1614,
     1614, 2436, 1517, 1648, 1611, 1616, 1616, 1616, 1616, 1517,
     2435, 1648, 1615, 1616, 1616, 1616, 1616, 1517, 1612, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1644, 1644, 1644,
     1644, 1658, 1628, 1731, 1645, 3694, 3694, 3694, 3694, 1658,
     2434, 1731, 3694, 1613, 1649, 1649, 1649, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1650, 1741, 1237, 1651,
     1650, 2433, 2432, 1651, 1650, 1741, 1237, 1651, 2074, 2074,
     2074, 2074, 1612, 2075, 2075, 2075, 2075, 1647, 1649, 1649,
     1649, 1649, 1154, 2431, 1573, 3694, 2076, 2076, 2076, 2076,

     1650, 1573, 1250, 1651, 1655, 1655, 1655, 1655, 1154, 1573,
     1250, 1656, 3694, 3694, 3694, 3694, 1154, 2430, 2429, 3694,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 2426, 2425,
     2424, 1660, 2421, 2420, 1773, 1660, 1659, 1659, 1659, 1659,
     1667, 1667, 1667, 1667, 2417, 1575, 1575, 1660, 1669, 1669,
     1669, 1669, 1575, 2416, 1609, 1670, 3694, 3694, 3694, 3694,
     1575, 1609, 1256, 3694, 1668, 1669, 1669, 1669, 1669, 1609,
     1256, 2415, 1670, 1667, 1667, 1667, 1667, 2082, 2082, 2082,
     2082, 1672, 2414, 1756, 1673, 1667, 1667, 1667, 1667, 1725,
     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1668, 1189, 1756,

     1311, 1668, 1724, 1729, 1729, 1729, 1729, 1756, 1311, 1668,
     1729, 1729, 1729, 1729, 1855, 1855, 1855, 1855, 1119, 1153,
     2411, 1118, 1155, 2122, 2402, 1119, 1153, 2401, 1121, 1122,
     2108, 2108, 2108, 2108, 1153, 1121, 1122, 1734, 1734, 1734,
     1734, 1118, 2100, 2398, 1735, 1119, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1103, 1121, 1122, 1380, 1672, 3694,
     3694, 3694, 3694, 1102, 1765, 1380, 3694, 1102, 1737, 1737,
     1737, 1737, 1109, 1856, 1163, 1110, 1729, 1729, 1729, 1729,
     1765, 1163, 1739, 1739, 1739, 1739, 2397, 1118, 1765, 1163,
     1552, 1119, 1103, 1146, 1739, 1739, 1739, 1739, 1552, 2396,

     2395, 1121, 1122, 2394, 2393, 1146, 1145, 1145, 1145, 1145,
     2392, 1747, 1747, 1747, 1747, 1137, 2207, 1146, 1138, 2207,
     1145, 1145, 1145, 1145, 1665, 1674, 1145, 1145, 1145, 1145,
     1129, 1146, 1665, 1674, 2388, 1129, 2385, 1146, 2124, 2124,
     2124, 2124, 2125, 2384, 1129, 2126, 1835, 2383, 2382, 1109,
     1129, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 2381,
     2079, 1194, 2127, 1761, 1761, 1761, 1761, 1835, 1189, 1170,
     1762, 1172, 1189, 2380, 2378, 1191, 1170, 1194, 1172, 1191,
     3694, 3694, 3694, 3694, 1170, 1194, 1172, 3694, 2377, 2376,
     2375, 2118, 1137, 2117, 1188, 1188, 1188, 1188, 2132, 2132,

     2132, 2132, 2138, 2374, 2373, 1762, 2143, 2143, 2143, 2143,
     2372, 2139, 2139, 2139, 2139, 2371, 2370, 2369, 1191, 2125,
     1813, 1813, 1813, 1813, 2129, 2142, 2143, 2143, 2142, 2057,
     1208, 1207, 1837, 1837, 1837, 1837, 1235, 1836, 1767, 1236,
     1813, 1813, 1813, 1813, 1836, 1767, 1264, 1767, 2057, 1208,
     2365, 2183, 1836, 1767, 2183, 1209, 1208, 2190, 2190, 2190,
     2190, 1322, 2364, 2049, 2191, 2049, 1264, 2045, 1322, 1210,
     1815, 1815, 1815, 1815, 1815, 1211, 1322, 2045, 1341, 1212,
     1213, 1244, 1214, 1215, 1216, 1341, 2041, 2041, 1217, 1218,
     1219, 1220, 1221, 1341, 1222, 1968, 1223, 1224, 1225, 1226,

     1227, 1819, 1819, 1819, 1819, 1920, 1920, 1920, 1920, 2037,
     1243, 1968, 1820, 1235, 1243, 2186, 2186, 2186, 2186, 1968,
     2037, 2350, 2187, 2348, 1243, 2028, 2028, 2091, 1243, 1822,
     1822, 1822, 1822, 2193, 2193, 2193, 2193, 1541, 2017, 2188,
     2212, 1823, 1824, 2091, 2194, 2195, 2195, 2195, 2195, 2206,
     2007, 2091, 2196, 1826, 1243, 2007, 2336, 2197, 1822, 1822,
     1822, 1822, 1837, 1837, 1837, 1837, 1235, 2335, 1243, 1236,
     1823, 1824, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1154, 2334, 1826, 1841, 1827, 2333, 1208, 1841, 1154, 1840,
     1840, 1840, 1840, 1842, 1840, 1840, 1840, 1840, 2332, 1504,

     1841, 1840, 1840, 1840, 1840, 1841, 1842, 2284, 2284, 2284,
     2284, 1842, 1841, 1840, 1840, 1840, 1840, 1998, 1842, 2329,
     1840, 1840, 1840, 1840, 1841, 1840, 1840, 1840, 1840, 2328,
     1842, 1841, 1262, 1262, 1262, 1262, 1841, 1842, 1840, 1840,
     1840, 1840, 1842, 1235, 2217, 1262, 1262, 1262, 1262, 1841,
     2327, 1262, 1262, 1262, 1262, 1842, 1208, 2326, 1264, 1899,
     1899, 1899, 1899, 2218, 2225, 1938, 1939, 1940, 1938, 1208,
     1756, 1264, 1948, 2325, 2219, 1208, 1765, 1264, 1756, 1948,
     2324, 2223, 2323, 2221, 1765, 1315, 2220, 1948, 2222, 2227,
     2226, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 2322, 1262, 1262, 1262, 1262, 2224, 1262,
     1262, 1262, 1262, 2321, 1968, 1208, 2091, 1264, 2216, 1208,
     2107, 1264, 1968, 1208, 2091, 1264, 2216, 2271, 1208, 2107,
     1264, 2319, 2318, 1208, 2314, 1264, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 2313, 2312, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 2311, 1502,
     1208, 2310, 1264, 2309, 1208, 2228, 1264, 1502, 2229, 2231,
     1208, 2230, 1264, 1960, 1208, 2308, 1264, 1956, 1208, 1951,
     1264, 2232, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1951, 1262, 1262, 1262, 1262, 2289, 2289, 2289, 2289, 2233,

     1262, 1262, 1262, 1262, 2299, 1574, 1208, 2298, 1264, 2234,
     1208, 1935, 1264, 1574, 2235, 1208, 2236, 1264, 1935, 2290,
     2293, 2237, 2291, 2288, 1208, 2287, 1264, 2286, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     2285, 2238, 1262, 1262, 1262, 1262, 1940, 1939, 1940, 1940,
     2240, 2239, 1208, 2128, 1264, 3419, 1208, 2283, 1264, 2241,
     1208, 2128, 1264, 3419, 2282, 2210, 1208, 2281, 1264, 1262,
     1262, 1262, 1262, 2280, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 2279, 2242, 1262, 1262,
     1262, 1262, 1431, 1208, 2278, 1264, 1459, 2243, 1208, 1431,

     1264, 2277, 1208, 1459, 1264, 2245, 1208, 1431, 1264, 2244,
     2203, 1459, 1208, 2203, 1264, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1473, 1262, 1262, 1262, 1262, 2246, 2276,
     1473, 2247, 1262, 1262, 1262, 1262, 2271, 2275, 1473, 1208,
     2204, 1264, 2274, 1208, 2249, 1264, 2273, 2270, 1208, 2248,
     1264, 1262, 1262, 1262, 1262, 2269, 1208, 1793, 1264, 2215,
     2214, 2204, 2250, 1262, 1262, 1262, 2257, 2213, 2201, 1481,
     2251, 1262, 1262, 1262, 1262, 1208, 1481, 1264, 2252, 2199,
     1262, 1262, 1262, 1262, 1481, 2185, 2184, 1208, 2182, 1264,
     2181, 1262, 1262, 1262, 1262, 1208, 2180, 1264, 2179, 2253,

     2178, 2254, 2175, 2174, 1208, 2255, 1264, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1208, 2256, 1264, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     2173, 1208, 2170, 1264, 2169, 1208, 1509, 1264, 2317, 2317,
     2317, 2317, 1208, 1509, 1264, 2258, 1208, 2259, 1264, 2168,
     1208, 1509, 1264, 1899, 1899, 1899, 1899, 2167, 1262, 1262,
     1262, 1262, 2166, 2165, 2260, 1262, 1262, 1262, 1262, 2158,
     1262, 1262, 1262, 1262, 2157, 2156, 2153, 2263, 2152, 1315,
     2262, 2261, 1208, 2207, 1264, 2151, 2207, 2216, 2150, 1208,
     2264, 1264, 2209, 2265, 1208, 2209, 1264, 1901, 1901, 1901,

     1901, 1309, 2149, 2216, 1310, 2210, 2146, 1773, 1773, 2107,
     2136, 2216, 2135, 1835, 1449, 1449, 1449, 1449, 2272, 2134,
     2133, 1305, 2211, 1192, 1189, 2268, 1930, 1930, 1930, 1930,
     2122, 1450, 2266, 2119, 1835, 2296, 2294, 1931, 2267, 2294,
     2116, 2115, 2107, 2211, 2297, 2297, 2297, 2297, 2300, 2300,
     2300, 2300, 1932, 2105, 2101, 1933, 1933, 1933, 1933, 1933,
     1944, 1944, 1944, 1944, 2100, 1369, 2099, 1945, 3694, 3694,
     3694, 3694, 1371, 2098, 2097, 3694, 2096, 2095, 1309, 1368,
     1368, 1368, 1368, 1949, 1949, 1949, 1949, 1378, 2304, 2093,
     1379, 1981, 1981, 1981, 1981, 2092, 1369, 2305, 2305, 2305,

     2305, 2090, 2089, 1371, 1700, 1515, 1982, 1374, 1969, 1969,
     1969, 1969, 1515, 1687, 1687, 1970, 3694, 3694, 3694, 3694,
     1515, 1971, 2087, 3694, 1973, 1973, 1973, 1973, 1687, 3694,
     2086, 1974, 3694, 3694, 3694, 3694, 2338, 2085, 2302, 3694,
     2320, 2320, 2320, 2320, 1517, 2339, 2339, 2339, 2339, 2010,
     2013, 1517, 2010, 2013, 2018, 2018, 2018, 2018, 1502, 1517,
     2084, 2019, 1685, 1683, 1378, 1675, 2080, 2020, 2079, 1654,
     3694, 3694, 3694, 3694, 1502, 2107, 2107, 3694, 1654, 2012,
     2015, 2072, 1502, 3694, 2340, 2340, 2340, 2340, 2341, 2341,
     2341, 2341, 2024, 2024, 2024, 2024, 1550, 2020, 2345, 1551,

     2012, 2015, 2025, 2025, 2025, 2025, 2070, 2346, 2346, 2346,
     2346, 2352, 2343, 2026, 2363, 2355, 1546, 2363, 2069, 2358,
     2353, 2353, 2353, 2353, 2356, 2356, 2356, 2356, 2359, 2359,
     2359, 2359, 2361, 2052, 2052, 2052, 2052, 2052, 2367, 2068,
     2067, 2362, 2362, 2362, 2362, 2066, 2065, 2368, 2368, 2368,
     2368, 1649, 1649, 1649, 1649, 2074, 2074, 2074, 2074, 2075,
     2075, 2075, 2075, 1650, 2063, 2062, 1651, 2076, 2076, 2076,
     2076, 2061, 2060, 1550, 2076, 2076, 2076, 2076, 2082, 2082,
     2082, 2082, 1672, 2057, 2055, 1673, 2108, 2108, 2108, 2108,
     1574, 2049, 2108, 2108, 2108, 2108, 2045, 1145, 1145, 1145,

     1145, 1119, 1668, 1118, 2041, 2037, 1574, 1119, 1146, 2035,
     1103, 1121, 1122, 2023, 1574, 1576, 1103, 1121, 1122, 1576,
     2023, 1129, 2406, 2406, 2406, 2406, 3139, 3144, 2023, 2407,
     2409, 2409, 2409, 2409, 1188, 1188, 1188, 1188, 2132, 2132,
     2132, 2132, 3139, 3144, 2028, 1762, 2190, 2190, 2190, 2190,
     3139, 3144, 1562, 2191, 2127, 1553, 2022, 2017, 1191, 1672,
     2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389,
     2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389,
     2390, 2390, 2390, 2390, 2390, 2389, 2389, 2389, 2389, 2389,
     2389, 2389, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,

     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2389, 2389, 2389, 2389, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2389, 2389, 2389, 2391, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 2007, 2005, 2004, 1146, 2001, 1998, 1996, 1146,
     2124, 2124, 2124, 2124, 2125, 1995, 1992, 2126, 1129, 1991,
     1990, 1989, 1129, 2409, 2409, 2409, 2409, 2125, 1988, 1466,
     2410, 1773, 1980, 1979, 2127, 1188, 1188, 1188, 1188, 1978,
     2419, 2419, 2419, 2419, 1977, 1976, 1975, 2127, 2423, 2423,

     2423, 2423, 1189, 2193, 2193, 2193, 2193, 2404, 1967, 1191,
     2186, 2186, 2186, 2186, 2194, 2403, 1966, 2187, 1965, 1243,
     1964, 1573, 1208, 1243, 3694, 3694, 3694, 3694, 1573, 1963,
     1436, 3694, 1609, 3694, 2188, 1962, 1573, 3694, 1961, 1609,
     1414, 2125, 2469, 2469, 2469, 2469, 1960, 1609, 3694, 1406,
     2413, 1406, 1575, 1575, 2125, 2422, 2423, 2423, 2422, 1575,
     1956, 1207, 1951, 1243, 1381, 1369, 2471, 1575, 2472, 3694,
     3694, 3694, 3694, 1943, 1935, 1929, 3694, 3694, 1928, 1208,
     2473, 2473, 2473, 2473, 1927, 1209, 2195, 2195, 2195, 2195,
     1926, 1925, 1823, 2196, 2284, 2284, 2284, 2284, 2197, 1210,

     1840, 1840, 1840, 1840, 1826, 1211, 1827, 1924, 2081, 1212,
     1213, 1841, 1214, 1215, 1216, 2081, 1923, 1842, 1217, 1218,
     1219, 1220, 1221, 2081, 1222, 1922, 1223, 1224, 1225, 1226,
     1227, 3694, 3694, 3694, 3694, 2196, 1921, 1914, 3694, 1911,
     2197, 1910, 1909, 3694, 1908, 1907, 1906, 2476, 2476, 2476,
     2476, 2476, 2186, 2186, 2186, 2186, 1312, 1898, 1897, 2191,
     1267, 1243, 1851, 1839, 1838, 1243, 2473, 2473, 2473, 2473,
     1840, 1840, 1840, 1840, 1821, 1817, 2188, 1816, 1823, 2078,
     2078, 1841, 1840, 1840, 1840, 1840, 2078, 1842, 1809, 1808,
     1826, 1805, 1802, 1841, 2078, 1840, 1840, 1840, 1840, 1842,

     1840, 1840, 1840, 1840, 1798, 1243, 1841, 1840, 1840, 1840,
     1840, 1841, 1842, 2284, 2284, 2284, 2284, 1842, 1841, 1840,
     1840, 1840, 1840, 1797, 1842, 1796, 1840, 1840, 1840, 1840,
     1841, 1792, 1262, 1262, 1262, 1262, 1842, 1841, 1840, 1840,
     1840, 1840, 2484, 1842, 1789, 1788, 1267, 2485, 1787, 1841,
     1262, 1262, 1262, 1262, 2486, 1842, 1208, 1782, 1264, 1262,
     1262, 1262, 1262, 2487, 1262, 1262, 1262, 1262, 1773, 1771,
     1770, 2492, 1192, 3694, 1208, 1193, 1264, 1766, 1262, 1262,
     1262, 1262, 2488, 1208, 1764, 1264, 1758, 2494, 1208, 1161,
     1264, 2490, 2489, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 2493, 1208, 2110, 1264, 1262, 1262, 1262, 1262, 1755,
     2110, 1754, 2491, 1262, 1262, 1262, 1262, 1208, 2110, 1264,
     2495, 1208, 1753, 1264, 1262, 1262, 1262, 1262, 1748, 1208,
     1143, 1264, 2507, 2507, 2507, 2507, 1143, 1208, 1116, 1264,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1208, 2496,
     1264, 1098, 2498, 1720, 1717, 1687, 1208, 1687, 1264, 1262,
     1262, 1262, 1262, 1687, 1208, 2497, 1264, 2131, 1208, 2131,
     1264, 2289, 2289, 2289, 2289, 1687, 2131, 1685, 2499, 1684,
     2500, 1683, 1675, 1208, 2131, 1264, 1666, 2501, 2502, 2503,
     2503, 2503, 2503, 2502, 2502, 2502, 2502, 2502, 2502, 2502,

     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 1654, 2510,
     1643, 2508, 2516, 2504, 1623, 2505, 2502, 2502, 2502, 2502,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 2509, 1262, 1262, 1262, 1262, 1608, 2121, 2502,
     2502, 2502, 2502, 2121, 1208, 2121, 1264, 1605, 1208, 1604,
     1264, 1603, 1208, 2121, 1264, 1598, 1595, 1208, 1592, 1264,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 2502, 2502,
     2502, 2506, 1262, 1262, 1262, 1262, 1587, 1262, 1262, 1262,
     1262, 1581, 1836, 2511, 1208, 1577, 1264, 1576, 1208, 1836,
     1264, 1262, 1262, 1262, 1262, 2512, 1208, 1836, 1264, 2514,

     2513, 1208, 1571, 1264, 1262, 1262, 1262, 1262, 1566, 1262,
     1262, 1262, 1262, 1562, 1553, 1208, 1164, 1264, 1262, 1262,
     1262, 1262, 1526, 1262, 1262, 1262, 1262, 1525, 1208, 1524,
     1264, 2517, 1523, 1208, 2515, 1264, 1262, 1262, 1262, 1262,
     1520, 1519, 1208, 2518, 1264, 2519, 2520, 1208, 1513, 1264,
     1512, 1262, 1262, 1262, 1262, 1511, 1262, 1262, 1262, 1262,
     1208, 1510, 1264, 1262, 1262, 1262, 1262, 1500, 1262, 1262,
     1262, 1262, 2521, 1499, 2522, 1208, 1498, 1264, 1497, 2523,
     1208, 1496, 1264, 1262, 1262, 1262, 1262, 1208, 1495, 1264,
     2524, 2525, 1208, 1475, 1264, 1262, 1262, 1262, 1262, 2289,

     2289, 2289, 2289, 1262, 1262, 1262, 1262, 1208, 1466, 1264,
     2526, 1262, 1262, 1262, 1262, 2527, 1464, 1461, 1460, 1208,
     1439, 1264, 1436, 2290, 1433, 2529, 2528, 1208, 1432, 1264,
     1262, 1262, 1262, 1262, 1414, 1208, 1406, 1264, 1767, 1401,
     2530, 1262, 1262, 1262, 1262, 1767, 2531, 1767, 1390, 1387,
     2532, 1381, 1364, 1767, 1208, 1361, 1264, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1208, 2533, 1264, 2534, 1353,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1350, 1347,
     1346, 1208, 1345, 1264, 1344, 1208, 1341, 1264, 1262, 1262,
     1262, 1262, 1343, 1341, 1208, 2535, 1264, 1342, 1208, 2536,

     1264, 1341, 2559, 2559, 2559, 2559, 1935, 1312, 2537, 1267,
     1254, 1251, 1208, 2560, 1264, 2563, 2563, 2563, 2563, 1249,
     1200, 1198, 2539, 1193, 2538, 2300, 2300, 2300, 2300, 2540,
     2300, 2300, 2300, 2300, 1368, 1368, 1368, 1368, 1449, 1449,
     1449, 1449, 1369, 2317, 2317, 2317, 2317, 1369, 2541, 1371,
     1185, 1369, 1164, 1951, 1371, 1450, 1161, 1144, 1371, 1143,
     1116, 2542, 2568, 2568, 2568, 2568, 2320, 2320, 2320, 2320,
     2007, 2340, 2340, 2340, 2340, 2341, 2341, 2341, 2341, 2594,
     2594, 2594, 2594, 2028, 2020, 2341, 2341, 2341, 2341, 3694,
     1948, 2037, 2597, 2597, 2597, 2597, 3694, 1948, 3694, 2343,

     2600, 2600, 2600, 2600, 2041, 1948, 2566, 3694, 2045, 2343,
     3694, 3694, 2049, 2602, 2602, 2602, 2602, 2604, 2604, 2604,
     2604, 2606, 2606, 2606, 2606, 2057, 2406, 2406, 2406, 2406,
     3694, 3694, 3694, 2407, 2610, 2610, 2610, 2610, 2619, 2620,
     3694, 3694, 3694, 2621, 3694, 3694, 2622, 2623, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 2624, 3694, 2625, 2389,
     2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389,
     2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2390,
     2390, 2390, 2390, 2390, 2389, 2389, 2389, 2389, 2389, 2389,
     2389, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,

     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2389, 2389, 2389, 2389, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2389,
     2389, 2389, 2391, 2642, 2643, 3694, 3694, 3694, 2644, 3694,
     3694, 2645, 2646, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 2647, 3694, 2648, 1146, 3694, 3694, 3694, 1146, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 1129, 3694, 3694,
     1431, 1129, 2652, 2652, 2652, 2652, 2125, 1431, 3694, 2410,
     3694, 3694, 3694, 2127, 3694, 1431, 3694, 2127, 2023, 1188,

     1188, 1188, 1188, 3694, 3694, 2023, 2127, 2081, 2649, 2659,
     2659, 2659, 2659, 2023, 2081, 2650, 1189, 2674, 2674, 2674,
     2674, 3694, 2081, 1191, 2703, 2703, 2703, 2703, 3694, 3694,
     3694, 2187, 3694, 1208, 3694, 2469, 2469, 2469, 2469, 2777,
     2777, 2777, 2777, 3694, 2473, 2473, 2473, 2473, 2188, 2469,
     2469, 2469, 2469, 3694, 3694, 3694, 1823, 3694, 2653, 2471,
     3694, 3694, 3694, 2125, 2658, 2659, 2659, 2658, 1826, 2196,
     1207, 3694, 3694, 2471, 2197, 2472, 3694, 2473, 2473, 2473,
     2473, 2476, 2476, 2476, 2476, 2476, 3694, 3694, 1208, 1823,
     2787, 2787, 2787, 2787, 1209, 3694, 2508, 2196, 3694, 3694,

     3694, 1826, 2197, 1827, 2781, 2781, 2781, 2781, 1210, 2476,
     2476, 2476, 2476, 2476, 1211, 2782, 3694, 2110, 1212, 1213,
     3694, 1214, 1215, 1216, 2110, 3694, 3694, 1217, 1218, 1219,
     1220, 1221, 2110, 1222, 3694, 1223, 1224, 1225, 1226, 1227,
     1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 2986, 3694,
     3482, 1841, 3484, 3694, 2986, 1841, 3482, 1842, 3484, 3694,
     3694, 1842, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     2986, 3694, 3482, 1841, 3484, 3694, 2783, 1841, 2986, 1842,
     3482, 3694, 3484, 1842, 1840, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 3694, 3694, 3694, 1841, 2078, 2078, 3694, 1841,

     3694, 1842, 3694, 2078, 3694, 1842, 1840, 1840, 1840, 1840,
     3694, 2078, 1262, 1262, 1262, 1262, 2709, 1841, 3694, 3694,
     3694, 2710, 3694, 1842, 1840, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 3694, 3694, 3694, 1841, 1208, 2711, 1264, 1841,
     3694, 1842, 3694, 2713, 3694, 1842, 3694, 2718, 2848, 2848,
     2848, 2848, 2712, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 2559, 2559, 2559, 2559, 2714, 1262, 1262, 1262, 1262,
     3694, 2121, 2560, 3694, 2715, 3694, 2121, 1208, 2121, 1264,
     2131, 1208, 2131, 1264, 3694, 3694, 2121, 2716, 3694, 2131,
     1208, 2717, 1264, 3694, 3694, 3694, 2719, 2131, 2720, 1262,

     1262, 1262, 1262, 2723, 2723, 2723, 2723, 3694, 1262, 1262,
     1262, 1262, 2726, 2726, 2726, 2726, 1262, 1262, 1262, 1262,
     3694, 3694, 3694, 1208, 3694, 1264, 1341, 1208, 3694, 1264,
     3694, 2721, 1208, 1341, 1264, 3694, 1208, 3694, 1264, 3694,
     1208, 1341, 1264, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 3694, 3694, 3694, 2722, 1262, 1262, 1262, 1262, 2507,
     2507, 2507, 2507, 2731, 2731, 2731, 2731, 1208, 3694, 1264,
     3694, 1208, 3694, 1264, 3694, 2727, 3694, 3694, 3694, 1208,
     2725, 1264, 2724, 1208, 3694, 1264, 3694, 1208, 3694, 1264,
     3694, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 3694, 3694, 3694,
     2728, 1262, 1262, 1262, 1262, 1208, 2729, 1264, 3694, 1208,
     3694, 1264, 3694, 1208, 3694, 1264, 3694, 1208, 3694, 1264,
     3694, 2730, 3694, 3694, 3694, 1208, 3694, 1264, 3694, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 3694, 2733, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 2735, 3694, 1208, 2732, 1264, 2734, 1208, 3694, 1264,
     3694, 1208, 3694, 1264, 2736, 3694, 3694, 1208, 3694, 1264,
     3694, 1208, 3694, 1264, 3694, 1262, 1262, 1262, 1262, 3694,
     1262, 1262, 1262, 1262, 3694, 3694, 3694, 2737, 1262, 1262,

     1262, 1262, 3694, 3694, 3694, 3694, 2739, 3694, 1431, 1208,
     2738, 1264, 3694, 2740, 1208, 1431, 1264, 3694, 2651, 3694,
     2741, 3694, 1208, 1431, 1264, 2651, 2742, 1262, 1262, 1262,
     1262, 3694, 3694, 2651, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 3694, 3694, 2744, 3694,
     3694, 1208, 1341, 1264, 3694, 3694, 2743, 2745, 1208, 1341,
     1264, 3694, 1208, 3694, 1264, 2788, 1208, 1341, 1264, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 3694, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     3694, 3694, 2746, 1208, 2651, 1264, 3694, 1208, 3694, 1264,

     3694, 2651, 1208, 2747, 1264, 3694, 1208, 3694, 1264, 2651,
     1208, 2748, 1264, 2749, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 2750, 3694, 3694, 3694,
     2751, 1262, 1262, 1262, 1262, 3694, 3694, 3694, 1208, 3694,
     1264, 3694, 1208, 2756, 1264, 3694, 1208, 2755, 1264, 2754,
     2761, 2761, 2761, 2761, 3694, 1208, 3694, 1264, 2763, 2763,
     2763, 2763, 3694, 3694, 1262, 1262, 1262, 2764, 1262, 1262,
     1262, 1262, 3694, 2758, 1208, 3694, 1264, 1262, 1262, 1262,
     1262, 2759, 1208, 3694, 1264, 3694, 2760, 2757, 1208, 3694,
     1264, 3694, 1208, 3146, 1264, 1368, 1368, 1368, 1368, 3694,

     3146, 1208, 3694, 1264, 2018, 2018, 2018, 2018, 3146, 3694,
     3694, 2019, 1369, 2863, 2863, 2863, 2863, 2020, 3694, 1371,
     3694, 3265, 3694, 2766, 1145, 1145, 1145, 1145, 3265, 2762,
     2842, 2842, 2842, 2842, 3694, 1146, 3265, 2765, 3694, 3694,
     2767, 1146, 2652, 2652, 2652, 2652, 2125, 3694, 1129, 2410,
     1188, 1188, 1188, 1188, 2843, 2851, 2851, 2851, 2851, 2865,
     2865, 2865, 2865, 3694, 2786, 3267, 2127, 1189, 2867, 2867,
     2867, 2867, 3267, 3694, 1191, 2674, 2674, 2674, 2674, 1208,
     3267, 2841, 2890, 2890, 2890, 2890, 2703, 2703, 2703, 2703,
     3694, 3694, 2724, 2187, 3694, 3694, 3694, 2186, 2186, 2186,

     2186, 3694, 3694, 3694, 2187, 3694, 1243, 3694, 3694, 2844,
     1243, 2469, 2469, 2469, 2469, 3694, 2845, 1840, 1840, 1840,
     1840, 2188, 3511, 2125, 2850, 2851, 2851, 2850, 1841, 3511,
     1207, 3694, 2729, 3694, 1842, 2471, 3694, 3511, 1840, 1840,
     1840, 1840, 1840, 1840, 1840, 1840, 3694, 2730, 1208, 1841,
     1243, 3512, 3694, 1841, 1209, 1842, 3694, 3694, 3512, 1842,
     3694, 2762, 2777, 2777, 2777, 2777, 3512, 3694, 1210, 1840,
     1840, 1840, 1840, 3694, 1211, 3694, 3694, 3694, 1212, 1213,
     1841, 1214, 1215, 1216, 3694, 3694, 1842, 1217, 1218, 1219,
     1220, 1221, 3694, 1222, 3694, 1223, 1224, 1225, 1226, 1227,

     3694, 3694, 2898, 3694, 2897, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 1840, 3694, 3694, 3694, 1841, 3694, 3694, 3694,
     1841, 3694, 1842, 3694, 3694, 3694, 1842, 1840, 1840, 1840,
     1840, 1840, 1840, 1840, 1840, 3694, 2899, 3694, 1841, 3694,
     3694, 3694, 1841, 3694, 1842, 3694, 3694, 3694, 1842, 3694,
     1840, 1840, 1840, 1840, 3694, 3694, 1262, 1262, 1262, 1262,
     3694, 1841, 2777, 2777, 2777, 2777, 2901, 1842, 1262, 1262,
     1262, 1262, 3694, 1262, 1262, 1262, 1262, 3694, 2900, 3694,
     1208, 3694, 1264, 3694, 2902, 3694, 3694, 3694, 2903, 2905,
     3694, 3694, 1208, 3694, 1264, 3694, 3694, 1208, 3694, 1264,

     3694, 3694, 3694, 2906, 2907, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 2723, 2723, 2723, 2723, 1262, 1262, 1262,
     1262, 2904, 2726, 2726, 2726, 2726, 3694, 3694, 3694, 1208,
     3694, 1264, 3694, 1208, 3694, 1264, 3694, 1208, 3694, 1264,
     3694, 1208, 3694, 1264, 3694, 3694, 1208, 3694, 1264, 2913,
     2913, 2913, 2913, 3694, 1262, 1262, 1262, 1262, 3694, 3694,
     2914, 2731, 2731, 2731, 2731, 3694, 2909, 3694, 2908, 3694,
     3694, 3694, 1211, 1208, 3694, 1264, 3694, 3694, 1208, 2911,
     1264, 1856, 3694, 3694, 3694, 1208, 3694, 1264, 3694, 2910,
     1262, 1262, 1262, 1262, 2912, 3694, 1226, 1262, 1262, 1262,

     1262, 3694, 2920, 2920, 2920, 2920, 3694, 2921, 2922, 2922,
     2922, 2922, 3694, 3694, 1208, 3694, 1264, 1262, 1262, 1262,
     1262, 1208, 3694, 1264, 3694, 3694, 1208, 2915, 1264, 3694,
     3694, 3694, 1208, 3694, 1264, 1262, 1262, 1262, 1262, 3694,
     3694, 1208, 3694, 1264, 1262, 1262, 1262, 1262, 3694, 2926,
     2926, 2926, 2926, 2918, 3694, 1262, 1262, 1262, 1262, 1208,
     2919, 1264, 1262, 1262, 1262, 1262, 3694, 3694, 1208, 3694,
     1264, 3694, 3694, 1208, 2923, 1264, 3694, 3694, 3694, 1208,
     3694, 1264, 2929, 2929, 2929, 2929, 1208, 3694, 1264, 1262,
     1262, 1262, 1262, 3694, 2924, 3694, 1262, 1262, 1262, 1262,

     2933, 2933, 2933, 2933, 3694, 3694, 2930, 3694, 1264, 2925,
     2927, 3694, 3694, 1208, 3694, 1264, 3694, 2928, 3694, 3694,
     1208, 3694, 1264, 3694, 1208, 3694, 1264, 1262, 1262, 1262,
     1262, 3694, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 3694, 1262, 1262, 1262, 1262, 3694,
     3694, 1208, 3694, 1264, 3694, 3694, 1208, 3694, 1264, 3694,
     1208, 3694, 1264, 3694, 1208, 3694, 1264, 2931, 2932, 1208,
     3694, 1264, 2939, 2939, 2939, 2939, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 3694, 3694, 2934, 2935, 2947, 2947,
     2947, 2947, 3694, 3694, 3694, 2936, 2940, 3694, 1264, 3694,

     1208, 3694, 1264, 3694, 1208, 3694, 1264, 2948, 2948, 2948,
     2948, 3694, 1208, 2937, 1264, 3694, 2941, 3694, 2938, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1208, 3694, 1264, 3694, 2945, 2761, 2761, 2761, 2761,
     3694, 3694, 3694, 1208, 2942, 1264, 3694, 1208, 3694, 1264,
     3694, 1208, 2946, 1264, 2763, 2763, 2763, 2763, 3694, 3694,
     1208, 3694, 1264, 1262, 1262, 1262, 1262, 3694, 3694, 3694,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1208, 3694,
     1264, 3694, 3694, 2951, 3694, 3694, 2949, 1208, 3694, 1264,
     3694, 3694, 2950, 2952, 1208, 3694, 1264, 3694, 1208, 3694,

     1264, 1262, 1262, 1262, 1262, 2781, 2781, 2781, 2781, 3694,
     2967, 2967, 2967, 2967, 3694, 3694, 2782, 3694, 3694, 3694,
     2953, 2968, 3694, 3694, 3694, 1208, 3694, 1264, 2969, 2969,
     2969, 2969, 3694, 3694, 3694, 2954, 3694, 3694, 3694, 2956,
     2781, 2781, 2781, 2781, 2970, 2970, 2970, 2970, 2955, 3694,
     3694, 2782, 1368, 1368, 1368, 1368, 3694, 3694, 3694, 3694,
     1145, 1145, 1145, 1145, 3694, 3694, 2957, 3694, 3694, 1369,
     3694, 1146, 2842, 2842, 2842, 2842, 1371, 2963, 1188, 1188,
     1188, 1188, 3694, 1146, 1129, 3020, 3020, 3020, 3020, 2848,
     2848, 2848, 2848, 3694, 3694, 1189, 2843, 3022, 3022, 3022,

     3022, 3694, 1191, 3023, 3024, 3024, 3023, 2973, 3024, 3024,
     3024, 3024, 2863, 2863, 2863, 2863, 2865, 2865, 2865, 2865,
     3694, 2974, 2867, 2867, 2867, 2867, 3040, 3040, 3040, 3040,
     3694, 3694, 1208, 2650, 3694, 3694, 3694, 3019, 3042, 3042,
     3042, 3042, 3694, 3045, 3045, 3045, 3045, 3049, 3049, 3049,
     3049, 2844, 3055, 3055, 3055, 3055, 3060, 3060, 3060, 3060,
     3061, 3061, 3061, 3061, 3694, 3694, 1211, 3046, 2890, 2890,
     2890, 2890, 3694, 2911, 3694, 1856, 3056, 3694, 1840, 1840,
     1840, 1840, 3694, 1840, 1840, 1840, 1840, 3694, 2912, 1841,
     1226, 3694, 3694, 3694, 1841, 1842, 3057, 3694, 3694, 3694,

     1842, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 3694,
     3694, 3694, 1841, 3694, 3694, 3694, 1841, 3694, 1842, 3694,
     3694, 3694, 1842, 3694, 3058, 1840, 1840, 1840, 1840, 1840,
     1840, 1840, 1840, 3694, 3694, 3694, 1841, 3068, 3069, 2949,
     1841, 3694, 1842, 3694, 3694, 3694, 1842, 3694, 3074, 3074,
     3074, 3074, 1840, 1840, 1840, 1840, 3070, 3694, 3694, 1841,
     3694, 3694, 3694, 1841, 3071, 1842, 3694, 3694, 3694, 1842,
     1262, 1262, 1262, 1262, 3694, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 3694, 1262, 1262,
     1262, 1262, 3694, 3694, 1208, 3694, 1264, 3073, 3072, 1208,

     3694, 1264, 3694, 1208, 3694, 1264, 3694, 1208, 3694, 1264,
     3694, 3075, 1208, 3694, 1264, 3694, 3694, 3076, 3694, 3078,
     3077, 3081, 3081, 3081, 3081, 2913, 2913, 2913, 2913, 3083,
     3083, 3083, 3083, 3694, 3084, 3694, 2914, 3694, 3694, 3084,
     1262, 1262, 1262, 1262, 3694, 1208, 3694, 1264, 3694, 1208,
     3694, 1264, 3694, 3694, 3694, 3079, 1262, 1262, 1262, 1262,
     3694, 3080, 3694, 3694, 1208, 3694, 1264, 1262, 1262, 1262,
     1262, 2920, 2920, 2920, 2920, 3694, 2921, 3694, 3694, 3694,
     1208, 3694, 1264, 3694, 2922, 2922, 2922, 2922, 3694, 3694,
     3694, 1208, 3694, 1264, 3694, 1208, 3694, 1264, 3694, 3085,

     3694, 3094, 3094, 3094, 3094, 3694, 3694, 3694, 1208, 3694,
     1264, 3694, 3694, 1262, 1262, 1262, 1262, 3694, 2926, 2926,
     2926, 2926, 3694, 3694, 3088, 1208, 3694, 3095, 1262, 1262,
     1262, 1262, 3694, 3100, 3100, 3100, 3100, 1208, 3694, 1264,
     3089, 3091, 1208, 3694, 1264, 3126, 3126, 3126, 3126, 3694,
     3694, 3694, 1208, 3694, 1264, 3694, 3092, 1782, 3093, 2502,
     2503, 2503, 2503, 2503, 2502, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 2502, 1262,
     1262, 1262, 1262, 3694, 2504, 3098, 2505, 2502, 2502, 2502,
     2502, 3097, 2929, 2929, 2929, 2929, 3101, 3101, 3101, 3101,

     3694, 3694, 3694, 1208, 3694, 1264, 3102, 3102, 3102, 3102,
     2502, 2502, 2502, 2502, 3096, 3694, 2930, 3694, 1264, 3694,
     1208, 3694, 1264, 2933, 2933, 2933, 2933, 3694, 3694, 3694,
     2940, 3694, 1264, 3103, 3103, 3103, 3103, 3694, 3694, 2502,
     2502, 2502, 2506, 3694, 3099, 3694, 3694, 1208, 3694, 1264,
     1262, 1262, 1262, 1262, 3694, 3694, 3694, 1208, 3694, 1264,
     3105, 3105, 3105, 3105, 1262, 1262, 1262, 1262, 3694, 1262,
     1262, 1262, 1262, 3694, 1208, 3694, 1264, 2939, 2939, 2939,
     2939, 3694, 3694, 3694, 3106, 3694, 1264, 3694, 1208, 3694,
     1264, 3694, 3694, 1208, 3694, 1264, 3112, 3112, 3112, 3112,

     3694, 2940, 3694, 1264, 3107, 3694, 3694, 3104, 3694, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 3694, 3694, 3694,
     1782, 3057, 3118, 3118, 3118, 3118, 3694, 3109, 3111, 3694,
     3694, 3694, 3108, 1208, 3694, 1264, 3694, 1208, 3694, 1264,
     3694, 3694, 3110, 3694, 3694, 3694, 3119, 3694, 1264, 3058,
     2947, 2947, 2947, 2947, 3694, 2948, 2948, 2948, 2948, 1262,
     1262, 1262, 1262, 3113, 3120, 3120, 3120, 3120, 1262, 1262,
     1262, 1262, 3694, 3694, 1208, 3694, 1264, 3694, 3114, 1208,
     3694, 1264, 3694, 1208, 3694, 1264, 3694, 3694, 1208, 3694,
     1264, 3694, 1208, 3694, 1264, 1262, 1262, 1262, 1262, 3125,

     3125, 3125, 3125, 3694, 1262, 1262, 1262, 1262, 3694, 2967,
     2967, 2967, 2967, 2969, 2969, 2969, 2969, 3694, 2923, 1208,
     2968, 1264, 3694, 1208, 3694, 1264, 3694, 3121, 1208, 3694,
     1264, 2970, 2970, 2970, 2970, 2967, 2967, 2967, 2967, 2969,
     2969, 2969, 2969, 3694, 3694, 3694, 2968, 2970, 2970, 2970,
     2970, 1368, 1368, 1368, 1368, 3694, 3694, 3694, 3694, 1188,
     1188, 1188, 1188, 2499, 3124, 3694, 3694, 3694, 1369, 3020,
     3020, 3020, 3020, 3694, 3694, 1371, 1189, 3022, 3022, 3022,
     3022, 3694, 3694, 1191, 3171, 3172, 3172, 3171, 3172, 3172,
     3172, 3172, 3179, 3179, 3179, 3179, 3184, 3184, 3184, 3184,

     3040, 3040, 3040, 3040, 3042, 3042, 3042, 3042, 3134, 3694,
     3694, 3694, 1208, 3694, 2571, 3045, 3045, 3045, 3045, 3100,
     3100, 3100, 3100, 3694, 3694, 3694, 3169, 3191, 3191, 3191,
     3191, 3192, 3192, 3192, 3192, 3049, 3049, 3049, 3049, 3046,
     3193, 3193, 3193, 3193, 3195, 3195, 3195, 3195, 3055, 3055,
     3055, 3055, 3694, 3694, 3694, 3056, 3112, 3112, 3112, 3112,
     3204, 3204, 3204, 3204, 3060, 3060, 3060, 3060, 3196, 3694,
     3694, 3694, 3056, 3061, 3061, 3061, 3061, 3206, 3206, 3206,
     3206, 3694, 3694, 3694, 3205, 3694, 3694, 3694, 3197, 3694,
     3694, 3694, 3057, 3209, 3209, 3209, 3209, 1840, 1840, 1840,

     1840, 1840, 1840, 1840, 1840, 3694, 3694, 3694, 1841, 3694,
     3694, 3694, 1841, 3694, 1842, 3694, 3198, 3694, 1842, 3694,
     3058, 1840, 1840, 1840, 1840, 3213, 3213, 3213, 3213, 3694,
     3694, 3694, 1841, 3694, 3694, 3694, 1841, 3694, 1842, 3694,
     3694, 3694, 1842, 1840, 1840, 1840, 1840, 3694, 1840, 1840,
     1840, 1840, 3694, 3694, 1841, 3694, 3694, 3694, 3211, 1841,
     1842, 3694, 3694, 3694, 3210, 1842, 3074, 3074, 3074, 3074,
     1840, 1840, 1840, 1840, 3694, 3694, 3694, 1841, 3694, 3694,
     3694, 1841, 1262, 1262, 1262, 1262, 3212, 1842, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     3694, 3694, 3214, 3694, 3694, 3694, 1208, 3694, 1264, 3694,
     3694, 3694, 1208, 3215, 1264, 3694, 1208, 3694, 1264, 3694,
     1208, 3694, 1264, 3219, 3219, 3219, 3219, 3694, 3216, 3081,
     3081, 3081, 3081, 3694, 3694, 3217, 3694, 3694, 2946, 3694,
     3083, 3083, 3083, 3083, 3694, 3084, 3694, 1208, 3694, 1264,
     3084, 3694, 3694, 1208, 3694, 1264, 3694, 3694, 3218, 1262,
     1262, 1262, 1262, 3694, 1262, 1262, 1262, 1262, 3224, 3224,
     3224, 3224, 3094, 3094, 3094, 3094, 1262, 1262, 1262, 1262,
     3694, 3694, 3694, 1208, 3694, 1264, 3694, 3694, 1208, 3694,
     1264, 3694, 1208, 3694, 1264, 3694, 1208, 3694, 3095, 3694,

     1208, 3694, 1264, 3232, 3232, 3232, 3232, 3694, 1262, 1262,
     1262, 1262, 3234, 3234, 3234, 3234, 3100, 3100, 3100, 3100,
     3694, 3101, 3101, 3101, 3101, 3694, 3694, 1208, 3694, 1264,
     3220, 3223, 1208, 3694, 1264, 3694, 3235, 3694, 1264, 3102,
     3102, 3102, 3102, 3694, 3231, 1208, 3694, 1264, 3103, 3103,
     3103, 3103, 1262, 1262, 1262, 1262, 3105, 3105, 3105, 3105,
     3694, 3694, 3694, 2940, 3694, 1264, 3694, 3233, 3237, 3237,
     3237, 3237, 1208, 3694, 1264, 3694, 1208, 3694, 1264, 3694,
     3106, 3694, 1264, 1262, 1262, 1262, 1262, 3694, 1262, 1262,
     1262, 1262, 1782, 1262, 1262, 1262, 1262, 3694, 3694, 3694,

     3197, 3241, 3241, 3241, 3241, 3694, 3694, 1208, 3694, 1264,
     3694, 3236, 1208, 3694, 1264, 3694, 3694, 1208, 3694, 1264,
     1262, 1262, 1262, 1262, 3694, 1208, 3694, 1264, 3198, 3112,
     3112, 3112, 3112, 1262, 1262, 1262, 1262, 3238, 1262, 1262,
     1262, 1262, 3694, 3694, 1208, 3694, 1264, 1262, 1262, 1262,
     1262, 3694, 3240, 3239, 3694, 3694, 3694, 1208, 3694, 1264,
     3694, 3694, 1208, 3694, 1264, 3118, 3118, 3118, 3118, 3694,
     3694, 1208, 3694, 1264, 3248, 3248, 3248, 3248, 3242, 3243,
     3694, 3120, 3120, 3120, 3120, 3251, 3251, 3251, 3251, 3119,
     3694, 1264, 1262, 1262, 1262, 1262, 3694, 3694, 1782, 3125,

     3125, 3125, 3125, 3694, 3694, 1208, 3244, 1264, 3694, 1208,
     3694, 1264, 3694, 3694, 3694, 3247, 1208, 3694, 1264, 3126,
     3126, 3126, 3126, 1208, 3694, 1264, 3259, 3259, 3259, 3259,
     3694, 1211, 3260, 3260, 3260, 3260, 3694, 3694, 3249, 3694,
     1856, 3261, 3261, 3261, 3261, 1368, 1368, 1368, 1368, 3694,
     3694, 3254, 3694, 2912, 3694, 1226, 3250, 3272, 3272, 3272,
     3272, 3694, 1369, 1188, 1188, 1188, 1188, 3694, 3694, 1371,
     3289, 3289, 3289, 3289, 3290, 3291, 3291, 3290, 3694, 3694,
     1189, 3694, 3694, 3694, 3255, 3694, 3694, 1191, 3291, 3291,
     3291, 3291, 3295, 3295, 3295, 3295, 3179, 3179, 3179, 3179,

     3300, 3300, 3300, 3300, 3263, 3184, 3184, 3184, 3184, 3694,
     3694, 3694, 1208, 3303, 3303, 3303, 3303, 3304, 3304, 3304,
     3304, 3306, 3306, 3306, 3306, 3191, 3191, 3191, 3191, 3192,
     3192, 3192, 3192, 3694, 3694, 3694, 3288, 3193, 3193, 3193,
     3193, 3195, 3195, 3195, 3195, 3307, 3237, 3237, 3237, 3237,
     3694, 3694, 3694, 3056, 3312, 3312, 3312, 3312, 3204, 3204,
     3204, 3204, 3694, 3694, 3694, 3196, 3248, 3248, 3248, 3248,
     3206, 3206, 3206, 3206, 3316, 3316, 3316, 3316, 3209, 3209,
     3209, 3209, 3205, 3694, 3694, 3197, 1840, 1840, 1840, 1840,
     1840, 1840, 1840, 1840, 3694, 3694, 3694, 1841, 3694, 3694,

     3694, 1841, 3694, 1842, 3694, 3694, 3694, 1842, 3320, 3320,
     3320, 3320, 3694, 3198, 3694, 3213, 3213, 3213, 3213, 1841,
     1211, 1840, 1840, 1840, 1840, 1842, 1841, 3249, 3694, 1856,
     3694, 3694, 1841, 3694, 1262, 1262, 1262, 1262, 1842, 3694,
     3694, 3694, 2912, 3694, 1226, 3250, 3694, 3694, 3694, 3319,
     3322, 3322, 3322, 3322, 3323, 3323, 3323, 3323, 1208, 3318,
     1264, 1841, 3694, 3694, 3694, 1841, 3694, 1842, 3694, 3694,
     3694, 1842, 1262, 1262, 1262, 1262, 3694, 3694, 3694, 3321,
     3694, 3694, 3694, 3324, 3219, 3219, 3219, 3219, 1262, 1262,
     1262, 1262, 3329, 3329, 3329, 3329, 1208, 3694, 1264, 3224,

     3224, 3224, 3224, 3330, 3330, 3330, 3330, 3694, 1208, 3694,
     1264, 3694, 1208, 3694, 1264, 3694, 1208, 3694, 1264, 1262,
     1262, 1262, 1262, 1208, 3694, 1264, 3232, 3232, 3232, 3232,
     3694, 3325, 3337, 3337, 3337, 3338, 3234, 3234, 3234, 3234,
     3694, 3694, 3694, 1208, 3694, 1264, 3694, 3694, 3326, 3694,
     1208, 3694, 1264, 3694, 3694, 3694, 1208, 3694, 1264, 3694,
     3235, 3694, 1264, 3339, 3339, 3339, 3339, 3237, 3237, 3237,
     3237, 3694, 3354, 3354, 3354, 3354, 3248, 3248, 3248, 3248,
     3694, 3694, 3331, 3694, 3694, 3694, 3336, 1782, 3340, 3341,
     3341, 3341, 3341, 3340, 3340, 3340, 3340, 3340, 3340, 3340,

     3340, 3340, 3340, 3340, 3340, 3340, 3340, 3340, 1262, 1262,
     1262, 1262, 3694, 3342, 3340, 3343, 3340, 3340, 3340, 3340,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 3259, 3259,
     3259, 3259, 1208, 3694, 1264, 3241, 3241, 3241, 3241, 3340,
     3340, 3340, 3340, 3694, 1208, 3694, 1264, 3694, 1208, 3694,
     1264, 3355, 3694, 3694, 3345, 3348, 3348, 3348, 3348, 1208,
     3694, 1264, 3694, 1262, 1262, 1262, 1262, 3694, 3340, 3340,
     3340, 3344, 3694, 3694, 1262, 1262, 1262, 1262, 3694, 3349,
     3694, 1264, 1262, 1262, 1262, 1262, 3694, 1208, 3346, 1264,
     3251, 3251, 3251, 3251, 3694, 3694, 3347, 3694, 1208, 3350,

     1264, 3694, 3694, 3352, 3694, 3694, 1208, 3694, 1264, 3337,
     3337, 3337, 3337, 3694, 1208, 3694, 1264, 3260, 3260, 3260,
     3260, 3261, 3261, 3261, 3261, 3694, 3694, 3351, 3259, 3259,
     3259, 3259, 3694, 1208, 3694, 1264, 3260, 3260, 3260, 3260,
     3261, 3261, 3261, 3261, 3694, 3694, 3694, 3353, 3694, 3357,
     3362, 3362, 3362, 3362, 3363, 3363, 3363, 3363, 3272, 3272,
     3272, 3272, 1188, 1188, 1188, 1188, 3289, 3289, 3289, 3289,
     3694, 1369, 3384, 3385, 3385, 3384, 3694, 3694, 1371, 1189,
     3385, 3385, 3385, 3385, 3694, 3694, 1191, 3388, 3388, 3388,
     3388, 3295, 3295, 3295, 3295, 3390, 3390, 3390, 3390, 3391,

     3391, 3391, 3391, 3694, 1208, 3300, 3300, 3300, 3300, 3394,
     3394, 3394, 3394, 3303, 3303, 3303, 3303, 3304, 3304, 3304,
     3304, 3395, 3395, 3395, 3396, 3306, 3306, 3306, 3306, 3339,
     3339, 3339, 3339, 3694, 3383, 3397, 3397, 3397, 3397, 3312,
     3312, 3312, 3312, 3401, 3401, 3401, 3401, 3694, 3694, 3307,
     3316, 3316, 3316, 3316, 3395, 3395, 3395, 3395, 1840, 1840,
     1840, 1840, 3408, 3408, 3408, 3408, 3694, 3402, 3694, 1841,
     3694, 3694, 3694, 1841, 3694, 1842, 3694, 3694, 3694, 1842,
     3320, 3320, 3320, 3320, 3694, 3694, 3694, 3403, 3694, 3694,
     3694, 1841, 3409, 3409, 3409, 3409, 3322, 3322, 3322, 3322,

     3694, 3694, 3694, 1841, 3694, 3694, 3694, 1841, 3694, 1842,
     3694, 3694, 3694, 3407, 3694, 3404, 3323, 3323, 3323, 3323,
     1262, 1262, 1262, 1262, 3694, 3694, 3694, 1841, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 3411, 3411, 3411, 3411,
     3329, 3329, 3329, 3329, 1208, 3694, 1264, 3330, 3330, 3330,
     3330, 3694, 1208, 3694, 1264, 3694, 1208, 3694, 1264, 1262,
     1262, 1262, 1262, 3694, 1208, 3694, 1264, 3337, 3337, 3337,
     3337, 3337, 3337, 3337, 3337, 3339, 3339, 3339, 3339, 1262,
     1262, 1262, 1262, 1208, 3694, 1264, 2932, 3410, 3694, 3694,
     3694, 1208, 3694, 1264, 3694, 1208, 3694, 1264, 1262, 1262,

     1262, 1262, 3694, 1208, 3694, 1264, 3423, 3423, 3423, 3423,
     3425, 3425, 3425, 3425, 3694, 2508, 3415, 3354, 3354, 3354,
     3354, 3694, 1208, 3694, 1264, 3694, 3331, 3694, 3416, 3694,
     3424, 3694, 1264, 3694, 1782, 3694, 3694, 3694, 3421, 3362,
     3362, 3362, 3362, 3417, 3340, 3341, 3341, 3341, 3341, 3340,
     3340, 3340, 3418, 3340, 3340, 3340, 3340, 3340, 3340, 3340,
     3340, 3340, 3340, 3340, 3446, 3447, 3447, 3446, 3694, 3342,
     3340, 3343, 3340, 3340, 3340, 3340, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3340, 3340, 3340, 3340, 3419,

     3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3340, 3340, 3340, 3420, 1262, 1262,
     1262, 1262, 3348, 3348, 3348, 3348, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1208, 3694, 1264, 3694, 3349, 3694, 1264, 3694,
     1208, 3694, 1264, 3694, 1208, 3694, 1264, 3694, 1208, 3694,
     1264, 3694, 1208, 3694, 1264, 3694, 3403, 3430, 3430, 3430,
     3430, 3694, 1262, 1262, 1262, 1262, 3428, 3694, 3694, 3694,
     3426, 3694, 3363, 3363, 3363, 3363, 3694, 3445, 3445, 3445,

     3445, 3422, 3694, 3694, 3404, 3427, 1208, 3694, 1264, 1369,
     3447, 3447, 3447, 3447, 1189, 3694, 1371, 3694, 3694, 3694,
     3429, 1191, 3449, 3449, 3449, 3449, 3388, 3388, 3388, 3388,
     3450, 3450, 3450, 3450, 1208, 3390, 3390, 3390, 3390, 3432,
     3391, 3391, 3391, 3391, 3394, 3394, 3394, 3394, 3395, 3395,
     3395, 3395, 3395, 3395, 3395, 3395, 3431, 3397, 3397, 3397,
     3397, 3454, 3454, 3454, 3454, 3694, 3401, 3401, 3401, 3401,
     3425, 3425, 3425, 3425, 3694, 1840, 1840, 1840, 1840, 3694,
     3408, 3408, 3408, 3408, 3694, 3455, 1841, 3694, 3694, 3694,
     3402, 1841, 1842, 3409, 3409, 3409, 3409, 1262, 1262, 1262,

     1262, 3694, 3694, 3694, 1841, 3411, 3411, 3411, 3411, 3416,
     3403, 1262, 1262, 1262, 1262, 3466, 3466, 3466, 3466, 3694,
     3694, 1208, 3694, 1264, 3417, 3466, 3466, 3466, 3466, 1262,
     1262, 1262, 1262, 3694, 3694, 1208, 3694, 1264, 3404, 3694,
     3694, 3694, 3468, 1262, 1262, 1262, 1262, 3694, 3460, 3694,
     3694, 3694, 3468, 1208, 3461, 1264, 3423, 3423, 3423, 3423,
     3471, 3471, 3471, 3471, 3694, 3694, 3694, 1208, 3694, 1264,
     2235, 3469, 3425, 3425, 3425, 3425, 1262, 1262, 1262, 1262,
     3424, 3694, 1264, 3694, 1782, 1262, 1262, 1262, 1262, 3694,
     1262, 1262, 1262, 1262, 3475, 3475, 3475, 3475, 3694, 3694,

     1208, 3694, 1264, 3430, 3430, 3430, 3430, 3694, 3694, 1208,
     3694, 1264, 3694, 3694, 1208, 3470, 1264, 3694, 3476, 3694,
     1264, 3694, 3472, 1262, 1262, 1262, 1262, 3477, 3477, 3477,
     3477, 3445, 3445, 3445, 3445, 3694, 3694, 3474, 3487, 3488,
     3488, 3487, 3488, 3488, 3488, 3488, 3694, 1208, 3694, 1264,
     3694, 3694, 3694, 3473, 3694, 1191, 3449, 3449, 3449, 3449,
     3450, 3450, 3450, 3450, 3694, 3694, 1208, 3454, 3454, 3454,
     3454, 3471, 3471, 3471, 3471, 3496, 3496, 3496, 3496, 3694,
     3694, 3694, 2235, 1840, 1840, 1840, 1840, 3499, 3499, 3499,
     3499, 3455, 3694, 3694, 1841, 1262, 1262, 1262, 1262, 3497,

     1842, 3466, 3466, 3466, 3466, 3694, 3478, 3466, 3466, 3466,
     3466, 1262, 1262, 1262, 1262, 3503, 3503, 3503, 3503, 1208,
     3694, 1264, 3471, 3471, 3471, 3471, 3694, 3694, 3468, 1262,
     1262, 1262, 1262, 3694, 3468, 1208, 3694, 1264, 3694, 3504,
     3694, 1264, 1262, 1262, 1262, 1262, 3498, 1262, 1262, 1262,
     1262, 3694, 3694, 1208, 3254, 1264, 3694, 3694, 3502, 3475,
     3475, 3475, 3475, 3694, 3694, 3694, 1208, 3694, 1264, 3505,
     3694, 1208, 3694, 1264, 3507, 3507, 3507, 3507, 3477, 3477,
     3477, 3477, 3694, 3476, 3694, 1264, 3508, 3508, 3508, 3508,
     3694, 3694, 3694, 3429, 3513, 3514, 3514, 3513, 1782, 3514,

     3514, 3514, 3514, 3517, 3517, 3517, 3517, 3496, 3496, 3496,
     3496, 3507, 3507, 3507, 3507, 3506, 3694, 1840, 1840, 1840,
     1840, 3694, 3694, 1208, 3694, 3694, 3694, 3518, 1841, 3694,
     3694, 3497, 3694, 3694, 1842, 3499, 3499, 3499, 3499, 3694,
     1262, 1262, 1262, 1262, 3503, 3503, 3503, 3503, 3524, 3524,
     3524, 3524, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     3507, 3507, 3507, 3507, 1208, 3509, 1264, 3694, 3504, 3694,
     1264, 3694, 1782, 3694, 3694, 3694, 1208, 3694, 1264, 3694,
     1208, 3694, 1264, 3694, 3694, 3521, 3470, 3508, 3508, 3508,
     3508, 3694, 3694, 3694, 3525, 3528, 3529, 3529, 3528, 3529,

     3529, 3529, 3529, 3517, 3517, 3517, 3517, 3524, 3524, 3524,
     3524, 3694, 3694, 1840, 1840, 1840, 1840, 3524, 3524, 3524,
     3524, 3694, 3694, 1208, 1841, 3694, 3694, 3518, 3526, 3694,
     1842, 1262, 1262, 1262, 1262, 3537, 3537, 3537, 3537, 3540,
     3541, 3541, 3540, 3541, 3541, 3541, 3541, 3544, 3544, 3544,
     3544, 3546, 3546, 3546, 3546, 1208, 3694, 1264, 3694, 3538,
     3694, 1264, 1841, 3547, 3547, 3547, 3547, 1208, 1842, 3694,
     3694, 3545, 1262, 1262, 1262, 1262, 3694, 3694, 3536, 3694,
     3533, 3537, 3537, 3537, 3537, 3550, 3550, 3550, 3550, 3552,
     3553, 3553, 3552, 3694, 3694, 3694, 1208, 3694, 1264, 3553,

     3553, 3553, 3553, 3694, 3694, 3538, 3694, 1264, 3694, 1782,
     3554, 3554, 3554, 3554, 3544, 3544, 3544, 3544, 3526, 3550,
     3550, 3550, 3550, 1208, 3546, 3546, 3546, 3546, 3547, 3547,
     3547, 3547, 3694, 3694, 3694, 1841, 3694, 3694, 3545, 3694,
     3694, 3694, 3548, 3555, 3555, 3555, 3555, 3550, 3550, 3550,
     3550, 3557, 3557, 3557, 3557, 3559, 3560, 3560, 3559, 3560,
     3560, 3560, 3560, 3554, 3554, 3554, 3554, 3555, 3555, 3555,
     3555, 3557, 3557, 3557, 3557, 3694, 3694, 3694, 3558, 3561,
     3561, 3561, 3561, 1208, 3562, 3564, 3565, 3565, 3564, 3562,
     3565, 3565, 3565, 3565, 3561, 3561, 3561, 3561, 3558, 3562,

     3567, 3568, 3568, 3567, 3562, 3568, 3568, 3568, 3568, 3570,
     3571, 3571, 3570, 3694, 1208, 3571, 3571, 3571, 3571, 3694,
     3694, 3694, 3556, 3572, 3572, 3572, 3572, 3694, 3573, 1208,
     3694, 3694, 3694, 3573, 3575, 3576, 3576, 3575, 3694, 1208,
     3576, 3576, 3576, 3576, 3572, 3572, 3572, 3572, 3563, 3694,
     3694, 3574, 3572, 3572, 3572, 3572, 3577, 3578, 3578, 3577,
     3694, 3694, 3694, 3563, 1208, 3578, 3578, 3578, 3578, 3694,
     3694, 3694, 3574, 3579, 3580, 3580, 3579, 3694, 3694, 3694,
     3574, 3580, 3580, 3580, 3580, 3581, 3582, 3582, 3581, 1208,
     3582, 3582, 3582, 3582, 3583, 3584, 3584, 3583, 3584, 3584,

     3584, 3584, 3694, 3694, 3694, 1208, 3585, 3586, 3586, 3585,
     3586, 3586, 3586, 3586, 1208, 3587, 3588, 3588, 3587, 3694,
     3694, 3694, 1208, 3588, 3588, 3588, 3588, 3589, 3590, 3590,
     3589, 3694, 3694, 3694, 1208, 3590, 3590, 3590, 3590, 3591,
     3592, 3592, 3591, 3592, 3592, 3592, 3592, 1208, 3593, 3594,
     3594, 3593, 3594, 3594, 3594, 3594, 3694, 3694, 3694, 1208,
     3595, 3596, 3596, 3595, 3694, 3694, 3694, 1208, 3596, 3596,
     3596, 3596, 3597, 3598, 3598, 3597, 1208, 3598, 3598, 3598,
     3598, 3599, 3600, 3600, 3599, 3600, 3600, 3600, 3600, 3694,
     3694, 3694, 1208, 3601, 3602, 3602, 3601, 3602, 3602, 3602,

     3602, 1208, 3603, 3604, 3604, 3603, 3694, 3694, 3694, 1208,
     3604, 3604, 3604, 3604, 3605, 3606, 3606, 3605, 3694, 3694,
     3694, 1208, 3606, 3606, 3606, 3606, 3607, 3608, 3608, 3607,
     3608, 3608, 3608, 3608, 1208, 3609, 3610, 3610, 3609, 3610,
     3610, 3610, 3610, 3694, 3694, 3694, 1208, 3611, 3612, 3612,
     3611, 3694, 3694, 3694, 1208, 3612, 3612, 3612, 3612, 3613,
     3614, 3614, 3613, 1208, 3614, 3614, 3614, 3614, 3615, 3616,
     3616, 3615, 3616, 3616, 3616, 3616, 3694, 3694, 3694, 1208,
     3617, 3618, 3618, 3617, 3618, 3618, 3618, 3618, 1208, 3619,
     3620, 3620, 3619, 3694, 3694, 3694, 1208, 3620, 3620, 3620,

     3620, 3621, 3622, 3622, 3621, 3694, 3694, 3694, 1208, 3622,
     3622, 3622, 3622, 3623, 3624, 3624, 3623, 3624, 3624, 3624,
     3624, 1208, 3625, 3626, 3626, 3625, 3626, 3626, 3626, 3626,
     3694, 3694, 3694, 1208, 3627, 3628, 3628, 3627, 3694, 3694,
     3694, 1208, 3628, 3628, 3628, 3628, 3629, 3630, 3630, 3629,
     1208, 3630, 3630, 3630, 3630, 3631, 3632, 3632, 3631, 3632,
     3632, 3632, 3632, 3694, 3694, 3694, 1208, 3633, 3634, 3634,
     3633, 3634, 3634, 3634, 3634, 1208, 3635, 3636, 3636, 3635,
     3694, 3694, 3694, 1208, 3636, 3636, 3636, 3636, 3637, 3638,
     3638, 3637, 3694, 3694, 3694, 1208, 3638, 3638, 3638, 3638,

     3639, 3640, 3640, 3639, 3640, 3640, 3640, 3640, 1208, 3641,
     3642, 3642, 3641, 3642, 3642, 3642, 3642, 3694, 3694, 3694,
     1208, 3643, 3644, 3644, 3643, 3694, 3694, 3694, 1208, 3644,
     3644, 3644, 3644, 3645, 3646, 3646, 3645, 1208, 3646, 3646,
     3646, 3646, 3647, 3648, 3648, 3647, 3648, 3648, 3648, 3648,
     3694, 3694, 3694, 1208, 3649, 3650, 3650, 3649, 3650, 3650,
     3650, 3650, 1208, 3651, 3652, 3652, 3651, 3694, 3694, 3694,
     1208, 3652, 3652, 3652, 3652, 3653, 3654, 3654, 3653, 3694,
     3694, 3694, 1208, 3654, 3654, 3654, 3654, 3655, 3656, 3656,
     3655, 3656, 3656, 3656, 3656, 1208, 3657, 3658, 3658, 3657,

     3658, 3658, 3658, 3658, 3694, 3694, 3694, 1208, 3659, 3660,
     3660, 3659, 3694, 3694, 3694, 1208, 3660, 3660, 3660, 3660,
     3661, 3662, 3662, 3661, 1208, 3662, 3662, 3662, 3662, 3663,
     3664, 3664, 3663, 3664, 3664, 3664, 3664, 3694, 3694, 3694,
     1208, 3665, 3666, 3666, 3665, 3666, 3666, 3666, 3666, 1208,
     3667, 3668, 3668, 3667, 3694, 3694, 3694, 1208, 3668, 3668,
     3668, 3668, 3669, 3670, 3670, 3669, 3694, 3694, 3694, 1208,
     3670, 3670, 3670, 3670, 3671, 3672, 3672, 3671, 3672, 3672,
     3672, 3672, 1208, 3673, 3674, 3674, 3673, 3674, 3674, 3674,
     3674, 3694, 3694, 3694, 1208, 3675, 3676, 3676, 3675, 3694,

     3694, 3694, 1208, 3676, 3676, 3676, 3676, 3677, 3678, 3678,
     3677, 1208, 3678, 3678, 3678, 3678, 3679, 3680, 3680, 3679,
     3680, 3680, 3680, 3680, 3694, 3694, 3694, 1208, 3681, 3682,
     3682, 3681, 3682, 3682, 3682, 3682, 1208, 3683, 3684, 3684,
     3683, 3694, 3694, 3694, 1208, 3684, 3684, 3684, 3684, 3685,
     3686, 3686, 3685, 3694, 3694, 3694, 1208, 3686, 3686, 3686,
     3686, 3687, 3688, 3688, 3687, 3688, 3688, 3688, 3688, 1208,
     3689, 3690, 3690, 3689, 3690, 3690, 3690, 3690, 3694, 3694,
     3694, 1208, 3691, 3692, 3692, 3691, 3694, 3694, 3694, 1208,
     3692, 3692, 3692, 3692, 3693, 1234, 1234, 3693, 1208, 1234,

     1234, 1234, 1234, 3693, 1234, 1234, 3693, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1208, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1208,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,

      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,

      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      507,  507,  507,  507,  507,  507,  507,  507,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  644,  644,  644,  644,  644,  644,  644,  644,

      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,

      871,  871,  871,  871,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,

      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  936,  936,  936,  936,

      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  953,  953,  953,  953,  953,  953,  953,  953,

      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,

     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,

     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,

     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1093, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1093, 3694, 3694,
     3694, 3694, 3694, 1093, 3694, 3694, 3694, 3694, 3694, 3694,
     1093, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1093, 1107,
     1107, 1107, 3694, 3694, 3694, 1107, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1107, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1107,
     1111, 1111, 1111, 1111, 3694, 3694, 1111, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1111, 3694, 3694, 3694,
     3694, 3694, 1111, 3694, 3694, 3694, 3694, 3694, 3694, 1111,

     1111, 1114, 1114, 1114, 3694, 3694, 3694, 1114, 3694, 3694,
     3694, 3694, 3694, 3694, 1114, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1114, 3694, 3694, 3694, 3694, 3694, 3694,
     1114, 1114, 1120, 1120, 1120, 3694, 3694, 3694, 3694, 3694,
     3694, 1120, 3694, 3694, 1120, 1120, 3694, 1120, 1120, 1120,
     1120, 3694, 3694, 3694, 1120, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1120, 1126, 1126, 1126, 3694, 3694, 3694, 1126,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1126, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1126, 1130, 1130, 1130, 1130, 1130, 1130,

     1130, 1130, 1130, 1130, 1130, 1130, 1130, 3694, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 3694, 1130, 1130, 1130, 1136, 1136, 1136, 3694,
     3694, 3694, 1136, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1136, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1136, 1139, 1139, 1139,
     1139, 3694, 3694, 1139, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1139, 3694, 3694, 3694, 3694, 3694, 1139,
     3694, 3694, 3694, 3694, 3694, 3694, 1139, 1139, 1147, 1147,
     1147, 3694, 3694, 3694, 3694, 3694, 3694, 1147, 3694, 3694,

     3694, 3694, 3694, 1147, 1147, 3694, 3694, 3694, 3694, 3694,
     1147, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1147, 1157,
     3694, 3694, 3694, 1157, 3694, 1157, 3694, 3694, 1157, 3694,
     3694, 3694, 1157, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1157, 1160, 1160, 3694, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1176, 1176, 1176, 3694, 3694, 3694, 1176,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1176, 3694, 3694, 3694, 3694,

     1176, 3694, 3694, 1176, 1190, 1190, 1190, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1190, 3694, 1190,
     1190, 3694, 3694, 3694, 3694, 3694, 1190, 3694, 1190, 3694,
     3694, 3694, 3694, 3694, 1190, 1199, 1199, 3694, 1199, 1199,
     1199, 1199, 1199, 1199, 3694, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1230, 1230, 1230,
     3694, 3694, 3694, 1230, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1230,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1230, 1237, 1237,

     1237, 1237, 3694, 3694, 1237, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1237, 3694, 3694, 3694, 3694, 3694,
     1237, 3694, 3694, 3694, 3694, 3694, 3694, 1237, 1237, 1245,
     1245, 1245, 3694, 3694, 3694, 1245, 1245, 3694, 3694, 3694,
     1245, 3694, 3694, 3694, 3694, 1245, 3694, 3694, 3694, 3694,
     3694, 1245, 3694, 3694, 3694, 1245, 3694, 3694, 3694, 1245,
     1263, 1263, 1263, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1263, 1263, 3694, 1263, 3694,
     3694, 3694, 1263, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1263, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,

     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1299, 1299, 3694, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 3694, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1308, 1308, 1308, 3694, 3694,
     3694, 1308, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1308, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1308, 1311, 1311, 1311, 1311,
     3694, 3694, 1311, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 1311, 3694, 3694, 3694, 3694, 3694, 1311, 3694,
     3694, 3694, 3694, 3694, 3694, 1311, 1311, 1314, 1314, 1314,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1314, 1314, 3694, 1314, 3694, 3694, 3694, 1314,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1314, 1354, 1354,
     3694, 3694, 1354, 3694, 3694, 1354, 1354, 3694, 1354, 1354,
     1354, 1354, 1354, 3694, 1354, 1354, 1354, 1354, 1354, 1354,
     3694, 1354, 1354, 1354, 1354, 1354, 3694, 3694, 1354, 1354,
     1358, 1358, 3694, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,

     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1360, 1360, 3694, 1360, 1360, 1360, 1360, 1360,
     1360, 3694, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1370, 1370, 1370, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1370, 3694, 1370,
     1370, 3694, 3694, 3694, 3694, 3694, 1370, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1370, 1377, 1377, 1377, 3694, 3694,
     3694, 1377, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1377, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 1377, 1380, 1380, 1380, 1380,
     3694, 3694, 1380, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1380, 3694, 3694, 3694, 3694, 3694, 1380, 3694,
     3694, 3694, 3694, 3694, 3694, 1380, 1380, 1382, 1382, 1382,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1382, 1382, 3694, 3694, 3694, 3694, 3694, 1382,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1382, 1383, 1383,
     3694, 1383, 1383, 3694, 3694, 1383, 1383, 3694, 1383, 1383,
     1383, 1383, 1383, 3694, 1383, 1383, 1383, 1383, 1383, 1383,
     3694, 1383, 1383, 3694, 1383, 1383, 3694, 3694, 1383, 1383,

     1386, 1386, 3694, 1386, 1386, 1386, 1386, 1386, 1386, 3694,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1404, 1404, 3694, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1411, 1411, 3694, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 3694, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1417, 1417, 1417, 1417,

     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1424, 1424,
     3694, 1424, 1424, 3694, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 3694, 1424, 3694, 1424, 1424, 1424, 1424, 1424,
     1427, 1427, 3694, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1437, 3694, 3694, 3694, 1437, 1437, 1437, 1437,

     1437, 1437, 1437, 1437, 3694, 1437, 3694, 3694, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1447, 3694, 1447, 3694, 3694, 3694,
     3694, 3694, 3694, 1447, 3694, 1447, 3694, 3694, 3694, 3694,
     3694, 1447, 1451, 1451, 1451, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1451, 3694, 1451, 3694, 3694,
     3694, 3694, 3694, 3694, 1451, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1451, 1454, 1454, 1454, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1454, 3694,
     3694, 3694, 3694, 3694, 3694, 1454, 3694, 1454, 3694, 3694,

     3694, 3694, 3694, 1454, 1465, 1465, 3694, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1469, 3694, 3694, 3694,
     1469, 3694, 3694, 3694, 3694, 3694, 3694, 1469, 3694, 3694,
     3694, 3694, 3694, 3694, 1469, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1469, 1474, 1474, 3694, 1474, 1474, 3694, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1482, 1482, 1482, 1482, 1482,

     1482, 1482, 1482, 1482, 1482, 1482, 3694, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1489, 1489, 1489,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1489, 1489, 3694, 3694, 3694, 3694, 3694, 1489,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1489, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 3694,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1503, 1503, 3694, 1503, 3694, 3694, 3694, 1503, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 1503, 1518, 1518, 3694, 1518,
     1518, 1518, 1518, 1518, 1518, 3694, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1529, 1529,
     1529, 3694, 3694, 3694, 1529, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1529, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1529, 1532,
     1532, 1532, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1532, 3694, 3694, 3694, 1532, 3694, 3694, 3694, 3694, 3694,
     3694, 1532, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1532,

     1538, 1538, 1538, 3694, 3694, 3694, 1538, 1538, 3694, 3694,
     3694, 1538, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1538, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1538, 1540, 1540, 1540, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1540, 3694, 3694, 3694,
     3694, 3694, 3694, 1540, 1540, 3694, 3694, 3694, 3694, 3694,
     3694, 1540, 1549, 1549, 1549, 3694, 3694, 3694, 1549, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1549, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1549, 1552, 1552, 1552, 1552, 3694, 3694, 1552,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1552,
     3694, 3694, 3694, 3694, 3694, 1552, 3694, 3694, 3694, 3694,
     3694, 3694, 1552, 1552, 1554, 1554, 1554, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1554,
     1554, 3694, 3694, 3694, 3694, 3694, 1554, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1554, 1561, 1561, 3694, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1563, 3694, 3694,
     3694, 1563, 3694, 3694, 1563, 1563, 3694, 3694, 3694, 1563,

     1563, 1563, 3694, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1565,
     1565, 3694, 1565, 1565, 1565, 1565, 1565, 1565, 3694, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1580, 1580, 3694, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1584, 1584, 3694, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1585, 1585, 3694, 1585, 1585,
     3694, 1585, 1585, 1585, 3694, 3694, 3694, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586, 3694,
     1586, 1586, 1586, 1586, 1586, 1586, 3694, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1590,
     1590, 3694, 1590, 1590, 3694, 1590, 1590, 1590, 3694, 1590,
     1590, 1590, 1590, 1590, 3694, 1590, 1590, 1590, 1590, 1590,

     1590, 1590, 1590, 1590, 1590, 1590, 1590, 3694, 3694, 1590,
     1590, 1591, 1591, 3694, 1591, 1591, 1591, 1591, 1591, 1591,
     3694, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1593, 1593, 3694, 1593, 1593, 3694, 1593,
     1593, 1593, 3694, 3694, 3694, 1593, 1593, 1593, 3694, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1594, 1594, 3694, 1594, 1594,
     1594, 1594, 1594, 1594, 3694, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,

     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1596, 1596, 3694,
     1596, 1596, 3694, 1596, 1596, 1596, 3694, 1596, 1596, 1596,
     1596, 1596, 3694, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 3694, 3694, 1596, 1596, 1597,
     1597, 3694, 1597, 1597, 1597, 1597, 1597, 1597, 3694, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1607, 1607, 3694, 1607, 1607, 1607, 1607, 1607, 1607,
     3694, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,

     1607, 1607, 1607, 1617, 1617, 3694, 1617, 1617, 3694, 1617,
     1617, 1617, 3694, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 3694, 1617,
     1617, 1617, 1617, 1617, 1617, 1620, 1620, 3694, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1621, 1621, 3694,
     1621, 1621, 3694, 1621, 1621, 1621, 3694, 3694, 3694, 1621,
     1621, 1621, 3694, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1622,

     1622, 3694, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
     1622, 3694, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
     1622, 3694, 1622, 1622, 3694, 1622, 1622, 1622, 1622, 1622,
     1622, 1630, 1630, 3694, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 3694, 1630, 1630, 3694, 1630, 1630, 1630,
     1630, 1630, 1630, 1646, 1646, 1646, 3694, 3694, 3694, 1646,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1646, 1646, 3694, 3694, 3694,
     3694, 3694, 3694, 1646, 1652, 1652, 1652, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 1652, 3694, 1652, 3694, 3694, 1652,
     3694, 3694, 3694, 3694, 3694, 3694, 1652, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1652, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1657, 1657, 1657,
     3694, 3694, 3694, 1657, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1657,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1657, 1661, 1661,
     1661, 3694, 3694, 3694, 3694, 3694, 3694, 1661, 3694, 3694,

     3694, 3694, 3694, 1661, 3694, 3694, 3694, 3694, 3694, 3694,
     1661, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1661, 1665,
     3694, 3694, 3694, 3694, 3694, 1665, 1665, 3694, 3694, 3694,
     1665, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1665, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1665,
     1671, 1671, 1671, 3694, 3694, 3694, 1671, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1671, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1671, 1674, 1674, 1674, 1674, 3694, 3694, 1674, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1674, 3694, 3694,

     3694, 3694, 3694, 1674, 3694, 3694, 3694, 3694, 3694, 3694,
     1674, 1674, 1676, 1676, 1676, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1676, 1676, 3694,
     3694, 3694, 3694, 3694, 1676, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1676, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1692, 1692, 3694, 1692, 1692,
     1692, 1692, 1692, 1692, 1692, 1692, 1692, 3694, 1692, 1692,
     3694, 1692, 1692, 1692, 1692, 1692, 1692, 3694, 1692, 1692,

     3694, 1692, 1692, 1692, 1692, 1692, 1692, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1716,
     1716, 3694, 1716, 1716, 1716, 1716, 3694, 1716, 1716, 1716,
     1716, 3694, 1716, 1716, 3694, 1716, 1716, 1716, 3694, 1716,
     1716, 3694, 1716, 1716, 3694, 3694, 1716, 1716, 1716, 1716,
     1716, 1093, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1093, 3694, 3694, 3694, 3694, 3694, 1093, 3694, 3694, 3694,
     3694, 3694, 3694, 1093, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 1093, 1114, 1114, 1114, 3694, 3694, 3694, 1114, 3694,
     3694, 3694, 3694, 3694, 3694, 1114, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1114, 3694, 3694, 3694, 3694, 3694,
     3694, 1114, 1114, 1107, 1107, 1107, 3694, 3694, 3694, 1107,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1107, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1107, 1730, 1730, 1730, 3694, 3694, 3694,
     3694, 3694, 3694, 1730, 3694, 3694, 1730, 3694, 3694, 1730,
     3694, 1730, 1730, 3694, 3694, 3694, 1730, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1730, 1120, 1120, 1120, 3694, 3694,

     3694, 3694, 3694, 3694, 1120, 3694, 3694, 1120, 1120, 3694,
     1120, 1120, 1120, 1120, 3694, 3694, 3694, 1120, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1120, 1733, 1733, 1733, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1733,
     3694, 1733, 3694, 3694, 3694, 3694, 3694, 3694, 1733, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1733, 1736, 1736, 1736,
     3694, 3694, 3694, 1736, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1736,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1736, 1126, 1126,
     1126, 3694, 3694, 3694, 1126, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1126, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1126, 1738,
     1738, 1738, 3694, 3694, 3694, 3694, 3694, 3694, 1738, 3694,
     3694, 1738, 3694, 3694, 1738, 3694, 1738, 1738, 3694, 3694,
     3694, 1738, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1738,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 3694, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 3694, 1130,
     1130, 1130, 1136, 1136, 1136, 3694, 3694, 3694, 1136, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 1136, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1136, 1740, 1740, 1740, 3694, 3694, 3694, 3694,
     3694, 3694, 1740, 3694, 3694, 3694, 3694, 3694, 1740, 3694,
     3694, 3694, 3694, 3694, 3694, 1740, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1740, 1147, 1147, 1147, 3694, 3694, 3694,
     3694, 3694, 3694, 1147, 3694, 3694, 3694, 3694, 3694, 1147,
     1147, 3694, 3694, 3694, 3694, 3694, 1147, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1147, 1157, 3694, 3694, 3694, 1157,
     3694, 1157, 3694, 3694, 1157, 3694, 3694, 3694, 1157, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1157, 1160, 1160, 3694,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1176,
     1176, 1176, 3694, 3694, 3694, 1176, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1176, 3694, 3694, 3694, 3694, 1176, 3694, 3694, 1176,
     1759, 1759, 1759, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1759, 3694, 1759, 1759, 3694, 3694, 3694,
     3694, 3694, 1759, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1759, 1190, 1190, 1190, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 1190, 3694, 1190, 1190, 3694, 3694,
     3694, 3694, 3694, 1190, 3694, 1190, 3694, 3694, 3694, 3694,
     3694, 1190, 1763, 1763, 1763, 3694, 3694, 3694, 1763, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1763, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1763, 1772, 1772, 3694, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 3694, 1772,
     1772, 1772, 1772, 1772, 1772, 1774, 1774, 3694, 1774, 1774,
     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,

     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,
     1774, 1774, 1774, 1774, 1774, 1774, 1774, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1230,
     1230, 1230, 3694, 3694, 3694, 1230, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1230, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1230,
     1814, 1814, 1814, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1814, 3694, 3694, 1814, 3694,

     3694, 3694, 1814, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1814, 1263, 1263, 1263, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1263, 1263, 3694, 1263,
     3694, 3694, 3694, 1263, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1263, 1818, 1818, 3694, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1245, 1245, 1245, 3694, 3694, 3694,
     1245, 1245, 3694, 3694, 3694, 1245, 3694, 3694, 3694, 3694,
     1245, 3694, 3694, 3694, 3694, 3694, 1245, 3694, 3694, 3694,

     1245, 3694, 3694, 3694, 1245, 1825, 1825, 1825, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1825, 1825, 3694, 3694, 3694,
     1825, 1825, 3694, 1825, 3694, 3694, 3694, 1825, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1825, 1843, 1843, 1843, 3694,
     3694, 3694, 3694, 3694, 3694, 1843, 3694, 3694, 3694, 1843,
     3694, 1843, 3694, 3694, 3694, 3694, 3694, 3694, 1843, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1843, 1299, 1299, 3694,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 3694, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1308,

     1308, 1308, 3694, 3694, 3694, 1308, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1308, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1308,
     1900, 1900, 1900, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1900, 3694, 3694, 1900, 3694,
     3694, 3694, 1900, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1900, 1314, 1314, 1314, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1314, 1314, 3694, 1314,
     3694, 3694, 3694, 1314, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1314, 1354, 1354, 3694, 3694, 1354, 3694, 3694, 1354,

     1354, 3694, 1354, 1354, 1354, 1354, 1354, 3694, 1354, 1354,
     1354, 1354, 1354, 1354, 3694, 1354, 1354, 1354, 1354, 1354,
     3694, 3694, 1354, 1354, 1358, 1358, 3694, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1934, 1934, 3694, 1934,
     1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
     1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934, 1934,
     1934, 3694, 1934, 1934, 1934, 1934, 1934, 1934, 1936, 1936,
     3694, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936,

     1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936,
     1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936,
     1941, 1941, 3694, 1941, 1941, 1941, 1941, 1941, 1941, 1941,
     1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941,
     1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941,
     1941, 1941, 1370, 1370, 1370, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1370, 3694, 1370, 1370, 3694,
     3694, 3694, 3694, 3694, 1370, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1370, 1946, 1946, 1946, 3694, 3694, 3694, 1946,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 1946, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1946, 1377, 1377, 1377, 3694, 3694, 3694,
     1377, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1377, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1377, 1382, 1382, 1382, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1382, 1382, 3694, 3694, 3694, 3694, 3694, 1382, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1382, 1383, 1383, 3694, 1383,
     1383, 3694, 3694, 1383, 1383, 3694, 1383, 1383, 1383, 1383,
     1383, 3694, 1383, 1383, 1383, 1383, 1383, 1383, 3694, 1383,

     1383, 3694, 1383, 1383, 3694, 3694, 1383, 1383, 1950, 1950,
     3694, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950,
     1950, 1950, 1950, 3694, 1950, 1950, 1950, 1950, 1950, 1950,
     1952, 1952, 3694, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1411, 1411, 3694, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 3694, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,

     1411, 1411, 1411, 1411, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1424, 1424, 3694, 1424,
     1424, 3694, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     3694, 1424, 3694, 1424, 1424, 1424, 1424, 1424, 1427, 1427,
     3694, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,

     1437, 3694, 3694, 3694, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 3694, 1437, 3694, 3694, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1447, 3694, 1447, 3694, 3694, 3694, 3694, 3694,
     3694, 1447, 3694, 1447, 3694, 3694, 3694, 3694, 3694, 1447,
     1451, 1451, 1451, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1451, 3694, 1451, 3694, 3694, 3694, 3694,
     3694, 3694, 1451, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1451, 1972, 1972, 1972, 3694, 3694, 3694, 1972, 3694, 3694,
     3694, 3694, 1972, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 1972, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1972, 1454, 1454, 1454, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1454, 3694, 3694,
     3694, 3694, 3694, 3694, 1454, 3694, 1454, 3694, 3694, 3694,
     3694, 3694, 1454, 1452, 1452, 1452, 3694, 3694, 3694, 1452,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1452, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1452, 1465, 1465, 3694, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,

     1465, 1465, 1465, 1465, 1465, 1465, 1469, 3694, 3694, 3694,
     1469, 3694, 3694, 3694, 3694, 3694, 3694, 1469, 3694, 3694,
     3694, 3694, 3694, 3694, 1469, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1469, 1474, 1474, 3694, 1474, 1474, 3694, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 3694, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1489, 1489, 1489,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1489, 1489, 3694, 3694, 3694, 3694, 3694, 1489,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1489, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 3694,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1503, 1503, 3694, 1503, 3694, 3694, 3694, 1503, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1503, 1997, 3694, 3694, 3694,
     3694, 3694, 3694, 1997, 3694, 3694, 3694, 1997, 1997, 3694,
     3694, 1997, 3694, 3694, 3694, 3694, 1997, 3694, 1997, 2006,

     2006, 3694, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006,
     2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006, 2006,
     2006, 2006, 2006, 2006, 3694, 2006, 2006, 2006, 2006, 2006,
     2006, 2008, 2008, 3694, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 1529, 1529, 1529, 3694, 3694, 3694, 1529,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1529, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1529, 1532, 1532, 1532, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 1532, 3694, 3694, 3694, 1532,
     3694, 3694, 3694, 3694, 3694, 3694, 1532, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1532, 1538, 1538, 1538, 3694, 3694,
     3694, 1538, 1538, 3694, 3694, 3694, 1538, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1538, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1538, 1540, 1540, 1540, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1540, 3694, 3694, 3694, 3694, 3694, 3694, 1540, 1540,
     3694, 3694, 3694, 3694, 3694, 3694, 1540, 2016, 2016, 3694,
     2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016,

     2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016,
     2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2021,
     2021, 2021, 3694, 3694, 3694, 2021, 3694, 3694, 3694, 3694,
     2021, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 2021, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2021,
     1549, 1549, 1549, 3694, 3694, 3694, 1549, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1549, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1549, 1554, 1554, 1554, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1554, 1554, 3694, 3694,

     3694, 3694, 3694, 1554, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1554, 1561, 1561, 3694, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1563, 3694, 3694, 3694, 1563, 3694,
     3694, 1563, 1563, 3694, 3694, 3694, 1563, 1563, 1563, 3694,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 2027, 2027, 3694, 2027,
     2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027,
     2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027, 2027,

     2027, 3694, 2027, 2027, 2027, 2027, 2027, 2027, 2029, 2029,
     3694, 2029, 2029, 2029, 2029, 2029, 2029, 2029, 2029, 2029,
     2029, 2029, 2029, 2029, 2029, 2029, 2029, 2029, 2029, 2029,
     2029, 2029, 2029, 2029, 2029, 2029, 2029, 2029, 2029, 2029,
     1585, 1585, 3694, 1585, 1585, 3694, 1585, 1585, 1585, 3694,
     3694, 3694, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 2036, 2036, 3694, 2036, 2036, 2036, 2036, 2036,
     2036, 2036, 2036, 2036, 2036, 2036, 2036, 2036, 2036, 2036,
     2036, 2036, 2036, 2036, 2036, 2036, 2036, 3694, 2036, 2036,

     2036, 2036, 2036, 2036, 2038, 2038, 3694, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2038, 1590, 1590, 3694, 1590,
     1590, 3694, 1590, 1590, 1590, 3694, 1590, 1590, 1590, 1590,
     1590, 3694, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 3694, 3694, 1590, 1590, 2040, 2040,
     3694, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 3694, 2040, 2040, 2040, 2040, 2040, 2040,

     2042, 2042, 3694, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
     2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
     2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
     2042, 2042, 1593, 1593, 3694, 1593, 1593, 3694, 1593, 1593,
     1593, 3694, 3694, 3694, 1593, 1593, 1593, 3694, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 2044, 2044, 3694, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 3694,
     2044, 2044, 2044, 2044, 2044, 2044, 2046, 2046, 3694, 2046,

     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 1596, 1596,
     3694, 1596, 1596, 3694, 1596, 1596, 1596, 3694, 1596, 1596,
     1596, 1596, 1596, 3694, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 3694, 3694, 1596, 1596,
     2048, 2048, 3694, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
     2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
     2048, 2048, 2048, 2048, 2048, 3694, 2048, 2048, 2048, 2048,
     2048, 2048, 2050, 2050, 3694, 2050, 2050, 2050, 2050, 2050,

     2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050,
     2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050,
     2050, 2050, 2050, 2050, 2056, 2056, 3694, 2056, 2056, 2056,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 3694,
     2056, 2056, 2056, 2056, 2056, 2056, 2058, 2058, 3694, 2058,
     2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058,
     2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058,
     2058, 2058, 2058, 2058, 2058, 2058, 2058, 2058, 1617, 1617,
     3694, 1617, 1617, 3694, 1617, 1617, 1617, 3694, 1617, 1617,

     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 3694, 1617, 1617, 1617, 1617, 1617, 1617,
     1621, 1621, 3694, 1621, 1621, 3694, 1621, 1621, 1621, 3694,
     3694, 3694, 1621, 1621, 1621, 3694, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1622, 1622, 3694, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 3694, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 3694, 1622, 1622, 3694, 1622, 1622,
     1622, 1622, 1622, 1622, 1630, 1630, 3694, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,

     1630, 1630, 1630, 1630, 1630, 1630, 3694, 1630, 1630, 3694,
     1630, 1630, 1630, 1630, 1630, 1630, 1646, 1646, 1646, 3694,
     3694, 3694, 1646, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1646, 1646,
     3694, 3694, 3694, 3694, 3694, 3694, 1646, 2073, 2073, 2073,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 2073, 3694, 2073,
     3694, 3694, 2073, 3694, 3694, 3694, 3694, 3694, 3694, 2073,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 2073, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,

     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1652, 1652, 1652, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1652, 3694, 1652, 3694, 3694, 1652, 3694, 3694, 3694, 3694,
     3694, 3694, 1652, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1652, 1657, 1657, 1657, 3694, 3694, 3694, 1657, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1657, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1657, 2077, 2077, 2077, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 2077, 3694, 3694,
     3694, 3694, 3694, 3694, 2077, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 2077, 1661, 1661, 1661, 3694, 3694, 3694, 3694,
     3694, 3694, 1661, 3694, 3694, 3694, 3694, 3694, 1661, 3694,
     3694, 3694, 3694, 3694, 3694, 1661, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1661, 1671, 1671, 1671, 3694, 3694, 3694,
     1671, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1671, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1671, 1676, 1676, 1676, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1676, 1676, 3694, 3694, 3694, 3694, 3694, 1676, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1676, 1686, 1686, 1686, 1686,

     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1692, 1692,
     3694, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692,
     3694, 1692, 1692, 3694, 1692, 1692, 1692, 1692, 1692, 1692,
     3694, 1692, 1692, 3694, 1692, 1692, 1692, 1692, 1692, 1692,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 3694, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1716, 1716, 3694, 1716, 1716, 1716, 1716, 3694,

     1716, 1716, 1716, 1716, 3694, 1716, 1716, 3694, 1716, 1716,
     1716, 3694, 1716, 1716, 3694, 1716, 1716, 3694, 3694, 1716,
     1716, 1716, 1716, 1716, 1730, 1730, 1730, 3694, 3694, 3694,
     3694, 3694, 3694, 1730, 3694, 3694, 1730, 3694, 3694, 1730,
     3694, 1730, 1730, 3694, 3694, 3694, 1730, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1730, 2109, 2109, 2109, 3694, 3694,
     3694, 3694, 3694, 3694, 2109, 3694, 3694, 2109, 3694, 3694,
     2109, 2109, 2109, 2109, 3694, 3694, 3694, 2109, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2109, 1733, 1733, 1733, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1733,

     3694, 1733, 3694, 3694, 3694, 3694, 3694, 3694, 1733, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1733, 1736, 1736, 1736,
     3694, 3694, 3694, 1736, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1736,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1736, 1731, 1731,
     1731, 1731, 3694, 3694, 1731, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1731, 3694, 3694, 3694, 3694, 3694,
     1731, 3694, 3694, 3694, 3694, 3694, 3694, 1731, 1731, 1738,
     1738, 1738, 3694, 3694, 3694, 3694, 3694, 3694, 1738, 3694,
     3694, 1738, 3694, 3694, 1738, 3694, 1738, 1738, 3694, 3694,

     3694, 1738, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1738,
     1740, 1740, 1740, 3694, 3694, 3694, 3694, 3694, 3694, 1740,
     3694, 3694, 3694, 3694, 3694, 1740, 3694, 3694, 3694, 3694,
     3694, 3694, 1740, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1740, 2111, 2111, 2111, 3694, 3694, 3694, 3694, 3694, 3694,
     2111, 3694, 3694, 3694, 3694, 3694, 2111, 2111, 3694, 3694,
     3694, 3694, 3694, 2111, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 2111, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 3694, 2112, 2112, 3694, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,

     2112, 2112, 2112, 2112, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 3694,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 1741, 1741, 1741, 1741,
     3694, 3694, 1741, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1741, 3694, 3694, 3694, 3694, 3694, 1741, 3694,
     3694, 3694, 3694, 3694, 3694, 1741, 1741, 1147, 1147, 1147,
     3694, 3694, 3694, 3694, 3694, 3694, 1147, 3694, 3694, 3694,
     3694, 3694, 1147, 1147, 3694, 3694, 3694, 3694, 3694, 1147,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1147, 1157, 3694,

     3694, 3694, 1157, 3694, 1157, 3694, 3694, 1157, 3694, 3694,
     3694, 1157, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1157,
     2128, 2128, 2128, 2128, 3694, 3694, 2128, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 2128, 3694, 3694, 3694,
     3694, 3694, 2128, 3694, 3694, 3694, 3694, 3694, 3694, 2128,
     2128, 1759, 1759, 1759, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1759, 3694, 1759, 1759, 3694, 3694,
     3694, 3694, 3694, 1759, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1759, 1763, 1763, 1763, 3694, 3694, 3694, 1763, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 1763, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1763, 2130, 2130, 2130, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2130, 2130,
     3694, 3694, 3694, 3694, 3694, 2130, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 2130, 2137, 2137, 3694, 2137, 2137, 2137,
     2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137,
     2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 3694,
     2137, 2137, 2137, 2137, 2137, 2137, 1237, 1237, 1237, 1237,
     3694, 3694, 1237, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1237, 3694, 3694, 3694, 3694, 3694, 1237, 3694,

     3694, 3694, 3694, 3694, 3694, 1237, 1237, 1814, 1814, 1814,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1814, 3694, 3694, 1814, 3694, 3694, 3694, 1814,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1814, 1818, 1818,
     3694, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     2189, 2189, 2189, 3694, 3694, 3694, 2189, 2189, 3694, 3694,
     3694, 2189, 3694, 3694, 3694, 3694, 2189, 3694, 3694, 3694,
     3694, 3694, 2189, 3694, 3694, 3694, 2189, 3694, 3694, 3694,

     2189, 2192, 2192, 2192, 3694, 3694, 3694, 2192, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 2192, 3694, 3694,
     3694, 3694, 3694, 2192, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 2192, 2198, 2198, 2198, 3694, 3694, 3694, 2198, 3694,
     3694, 3694, 2198, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 2198, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 2198, 1825, 1825, 1825, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1825, 1825, 3694, 3694, 3694, 1825, 1825,
     3694, 1825, 3694, 3694, 3694, 1825, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1825, 2200, 3694, 3694, 3694, 3694, 3694,

     3694, 2200, 3694, 3694, 3694, 2200, 2200, 3694, 3694, 2200,
     3694, 3694, 3694, 3694, 2200, 3694, 2200, 2202, 2202, 2202,
     2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202, 3694,
     2202, 2202, 3694, 2202, 2202, 2202, 2202, 2202, 2202, 2202,
     2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202, 2208,
     2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
     2208, 2208, 2208, 2208, 3694, 2208, 2208, 2208, 2208, 2208,
     2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
     2208, 1843, 1843, 1843, 3694, 3694, 3694, 3694, 3694, 3694,
     1843, 3694, 3694, 3694, 1843, 3694, 1843, 3694, 3694, 3694,

     3694, 3694, 3694, 1843, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1843, 1263, 1263, 1263, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1263, 1263, 3694,
     1263, 3694, 3694, 3694, 1263, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1263, 1900, 1900, 1900, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1900, 3694,
     3694, 1900, 3694, 3694, 3694, 1900, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1900, 1311, 1311, 1311, 1311, 3694, 3694,
     1311, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1311, 3694, 3694, 3694, 3694, 3694, 1311, 3694, 3694, 3694,

     3694, 3694, 3694, 1311, 1311, 2292, 2292, 2292, 2292, 2292,
     2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292,
     2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292,
     2292, 2292, 2292, 2292, 2292, 2292, 2292, 1358, 1358, 3694,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 2295,
     2295, 3694, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295,
     2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295,
     2295, 2295, 2295, 2295, 3694, 2295, 2295, 2295, 2295, 2295,

     2295, 1941, 1941, 3694, 1941, 1941, 1941, 1941, 1941, 1941,
     1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941,
     1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941, 1941,
     1941, 1941, 1941, 1946, 1946, 1946, 3694, 3694, 3694, 1946,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1946, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1946, 2301, 2301, 2301, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 2301, 3694, 2301,
     2301, 3694, 3694, 3694, 3694, 3694, 2301, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 2301, 1370, 1370, 1370, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1370, 3694,
     1370, 1370, 3694, 3694, 3694, 3694, 3694, 1370, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1370, 1380, 1380, 1380, 1380,
     3694, 3694, 1380, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1380, 3694, 3694, 3694, 3694, 3694, 1380, 3694,
     3694, 3694, 3694, 3694, 3694, 1380, 1380, 2303, 2303, 3694,
     2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303,
     2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303, 2303,
     2303, 2303, 3694, 2303, 2303, 2303, 2303, 2303, 2303, 1437,
     3694, 3694, 3694, 1437, 1437, 1437, 1437, 1437, 1437, 1437,

     1437, 3694, 1437, 3694, 3694, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 2315, 3694, 2315, 3694, 3694, 3694, 3694, 3694, 3694,
     2315, 3694, 2315, 3694, 3694, 3694, 3694, 3694, 2315, 1972,
     1972, 1972, 3694, 3694, 3694, 1972, 3694, 3694, 3694, 3694,
     1972, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1972, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1972,
     2316, 2316, 2316, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 2316, 3694, 2316, 3694, 3694, 3694, 3694,
     3694, 3694, 2316, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     2316, 1452, 1452, 1452, 3694, 3694, 3694, 1452, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1452, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1452, 1997, 3694, 3694, 3694, 3694, 3694, 3694, 1997,
     3694, 3694, 3694, 1997, 1997, 3694, 3694, 1997, 3694, 3694,
     3694, 3694, 1997, 3694, 1997, 1503, 1503, 3694, 1503, 3694,
     3694, 3694, 1503, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1503, 2337, 2337, 3694, 2337, 2337, 2337, 2337, 2337, 2337,
     2337, 2337, 2337, 2337, 2337, 2337, 2337, 2337, 2337, 2337,
     2337, 2337, 2337, 2337, 2337, 2337, 3694, 2337, 2337, 2337,

     2337, 2337, 2337, 2016, 2016, 3694, 2016, 2016, 2016, 2016,
     2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016,
     2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016,
     2016, 2016, 2016, 2016, 2016, 2021, 2021, 2021, 3694, 3694,
     3694, 2021, 3694, 3694, 3694, 3694, 2021, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 2021, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2021, 2342, 2342, 2342, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 2342, 2342, 3694, 3694, 3694, 3694, 3694, 2342, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 2342, 1552, 1552, 1552,

     1552, 3694, 3694, 1552, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1552, 3694, 3694, 3694, 3694, 3694, 1552,
     3694, 3694, 3694, 3694, 3694, 3694, 1552, 1552, 2344, 2344,
     3694, 2344, 2344, 2344, 2344, 2344, 2344, 2344, 2344, 2344,
     2344, 2344, 2344, 2344, 2344, 2344, 2344, 2344, 2344, 2344,
     2344, 2344, 2344, 3694, 2344, 2344, 2344, 2344, 2344, 2344,
     2351, 2351, 3694, 2351, 2351, 2351, 2351, 2351, 2351, 2351,
     2351, 2351, 2351, 2351, 2351, 2351, 2351, 2351, 2351, 2351,
     2351, 2351, 2351, 2351, 2351, 3694, 2351, 2351, 2351, 2351,
     2351, 2351, 2354, 2354, 3694, 2354, 2354, 2354, 2354, 2354,

     2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354,
     2354, 2354, 2354, 2354, 2354, 2354, 2354, 3694, 2354, 2354,
     2354, 2354, 2354, 2354, 2357, 2357, 3694, 2357, 2357, 2357,
     2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357,
     2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357, 3694,
     2357, 2357, 2357, 2357, 2357, 2357, 2360, 2360, 3694, 2360,
     2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360,
     2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360,
     2360, 3694, 2360, 2360, 2360, 2360, 2360, 2360, 1596, 1596,
     3694, 1596, 1596, 3694, 1596, 1596, 1596, 3694, 1596, 1596,

     1596, 1596, 1596, 3694, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 3694, 3694, 1596, 1596,
     2366, 2366, 3694, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
     2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366,
     2366, 2366, 2366, 2366, 2366, 3694, 2366, 2366, 2366, 2366,
     2366, 2366, 2379, 2379, 2379, 2379, 2379, 2379, 2379, 2379,
     2379, 2379, 2379, 2379, 2379, 2379, 2379, 2379, 3694, 2379,
     2379, 2379, 2379, 2379, 2379, 3694, 2379, 2379, 2379, 2379,
     2379, 2379, 2379, 2379, 2073, 2073, 2073, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 2073, 3694, 2073, 3694, 3694, 2073,

     3694, 3694, 3694, 3694, 3694, 3694, 2073, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 2073, 2077, 2077, 2077, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     2077, 3694, 3694, 3694, 3694, 3694, 3694, 2077, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2077, 1674, 1674, 1674, 1674,
     3694, 3694, 1674, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1674, 3694, 3694, 3694, 3694, 3694, 1674, 3694,
     3694, 3694, 3694, 3694, 3694, 1674, 1674, 1692, 1692, 3694,
     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 3694,
     1692, 1692, 3694, 1692, 1692, 1692, 1692, 1692, 1692, 3694,

     1692, 1692, 3694, 1692, 1692, 1692, 1692, 1692, 1692, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 3694, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 2109, 2109, 2109, 3694, 3694, 3694, 3694, 3694, 3694,
     2109, 3694, 3694, 2109, 3694, 3694, 2109, 2109, 2109, 2109,
     3694, 3694, 3694, 2109, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 2109, 2111, 2111, 2111, 3694, 3694, 3694, 3694, 3694,
     3694, 2111, 3694, 3694, 3694, 3694, 3694, 2111, 2111, 3694,
     3694, 3694, 3694, 3694, 2111, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 2111, 1147, 1147, 1147, 3694, 3694, 3694, 3694,
     3694, 3694, 1147, 3694, 3694, 3694, 3694, 3694, 1147, 1147,
     3694, 3694, 3694, 3694, 3694, 1147, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1147, 1157, 3694, 3694, 3694, 1157, 3694,
     1157, 3694, 3694, 1157, 3694, 3694, 3694, 1157, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1157, 2128, 2128, 2128, 2128,
     3694, 3694, 2128, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 2128, 3694, 3694, 3694, 3694, 3694, 2128, 3694,
     3694, 3694, 3694, 3694, 3694, 2128, 2128, 2408, 2408, 2408,
     3694, 3694, 3694, 2408, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2408,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 2408, 2412, 2412,
     2412, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 2412, 2412, 3694, 3694, 3694, 3694, 3694,
     2412, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2412, 1759,
     1759, 1759, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1759, 3694, 1759, 1759, 3694, 3694, 3694, 3694,
     3694, 1759, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1759,
     2130, 2130, 2130, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2130, 2130, 3694, 3694, 3694,

     3694, 3694, 2130, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     2130, 1763, 1763, 1763, 3694, 3694, 3694, 1763, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1763, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 1763, 2418, 2418, 3694, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2418, 3694, 2418, 2418,
     2418, 2418, 2418, 2418, 2189, 2189, 2189, 3694, 3694, 3694,
     2189, 2189, 3694, 3694, 3694, 2189, 3694, 3694, 3694, 3694,
     2189, 3694, 3694, 3694, 3694, 3694, 2189, 3694, 3694, 3694,

     2189, 3694, 3694, 3694, 2189, 2470, 2470, 2470, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     2470, 2470, 3694, 2470, 3694, 3694, 3694, 2470, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2470, 2192, 2192, 2192, 3694,
     3694, 3694, 2192, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2192, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 2192, 2474, 2474, 2474,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 2474, 3694, 3694,
     3694, 3694, 2474, 2474, 3694, 2474, 3694, 3694, 3694, 2474,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 2474, 2198, 2198,

     2198, 3694, 3694, 3694, 2198, 3694, 3694, 3694, 2198, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     2198, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2198, 2477,
     3694, 3694, 3694, 2477, 3694, 3694, 3694, 3694, 2477, 3694,
     3694, 3694, 3694, 3694, 3694, 2477, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 2477, 2200, 3694, 3694, 3694, 3694, 3694,
     3694, 2200, 3694, 3694, 3694, 2200, 2200, 3694, 3694, 2200,
     3694, 3694, 3694, 3694, 2200, 3694, 2200, 2478, 2478, 3694,
     2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478,
     2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478,

     2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2480,
     2480, 3694, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,
     2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,
     2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,
     2480, 2483, 2483, 2483, 3694, 3694, 3694, 3694, 3694, 3694,
     2483, 3694, 3694, 3694, 2483, 3694, 2483, 3694, 3694, 3694,
     3694, 3694, 3694, 2483, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 2483, 1843, 1843, 1843, 3694, 3694, 3694, 3694, 3694,
     3694, 1843, 3694, 3694, 3694, 1843, 3694, 1843, 3694, 3694,
     3694, 3694, 3694, 3694, 1843, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 1843, 1263, 1263, 1263, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1263, 1263,
     3694, 1263, 3694, 3694, 3694, 1263, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1263, 2292, 2292, 2292, 2292, 2292, 2292,
     2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292,
     2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292, 2292,
     2292, 2292, 2292, 2292, 2292, 2292, 1358, 1358, 3694, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 2562, 2562,

     3694, 2562, 2562, 2562, 2562, 2562, 2562, 2562, 2562, 2562,
     2562, 2562, 2562, 2562, 2562, 2562, 2562, 2562, 2562, 2562,
     2562, 2562, 2562, 3694, 2562, 2562, 2562, 2562, 2562, 2562,
     2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565,
     2565, 2565, 2565, 2565, 2565, 2565, 3694, 2565, 2565, 2565,
     2565, 2565, 2565, 3694, 2565, 2565, 2565, 2565, 2565, 2565,
     2565, 2565, 2301, 2301, 2301, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2301, 3694, 2301, 2301, 3694,
     3694, 3694, 3694, 3694, 2301, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 2301, 1370, 1370, 1370, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 1370, 3694, 1370, 1370,
     3694, 3694, 3694, 3694, 3694, 1370, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1370, 2567, 2567, 3694, 2567, 2567, 2567,
     2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567,
     2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567, 3694,
     2567, 2567, 2567, 2567, 2567, 2567, 1437, 3694, 3694, 3694,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 3694, 1437,
     3694, 3694, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 2315, 3694,
     2315, 3694, 3694, 3694, 3694, 3694, 3694, 2315, 3694, 2315,

     3694, 3694, 3694, 3694, 3694, 2315, 2316, 2316, 2316, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2316,
     3694, 2316, 3694, 3694, 3694, 3694, 3694, 3694, 2316, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 2316, 1503, 1503, 3694,
     1503, 3694, 3694, 3694, 1503, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1503, 2593, 2593, 3694, 2593, 2593, 2593, 2593,
     2593, 2593, 2593, 2593, 2593, 2593, 2593, 2593, 2593, 2593,
     2593, 2593, 2593, 2593, 2593, 2593, 2593, 2593, 3694, 2593,
     2593, 2593, 2593, 2593, 2593, 2342, 2342, 2342, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     2342, 2342, 3694, 3694, 3694, 3694, 3694, 2342, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2342, 2596, 2596, 3694, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 3694, 2596, 2596, 2596, 2596, 2596, 2596, 2599, 2599,
     3694, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 3694, 2599, 2599, 2599, 2599, 2599, 2599,
     2601, 2601, 3694, 2601, 2601, 2601, 2601, 2601, 2601, 2601,
     2601, 2601, 2601, 2601, 2601, 2601, 2601, 2601, 2601, 2601,

     2601, 2601, 2601, 2601, 2601, 3694, 2601, 2601, 2601, 2601,
     2601, 2601, 2603, 2603, 3694, 2603, 2603, 2603, 2603, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2603, 3694, 2603, 2603,
     2603, 2603, 2603, 2603, 2605, 2605, 3694, 2605, 2605, 2605,
     2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605,
     2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605, 3694,
     2605, 2605, 2605, 2605, 2605, 2605, 1596, 1596, 3694, 1596,
     1596, 1596, 1596, 1596, 1596, 3694, 1596, 1596, 1596, 1596,
     1596, 3694, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,

     1596, 1596, 1596, 1596, 3694, 3694, 1596, 1596, 2609, 2609,
     3694, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609,
     2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609,
     2609, 2609, 2609, 3694, 2609, 2609, 2609, 2609, 2609, 2609,
     2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613,
     2613, 2613, 2613, 2613, 2613, 2613, 3694, 2613, 2613, 2613,
     2613, 2613, 2613, 3694, 2613, 2613, 2613, 2613, 2613, 2613,
     2613, 2613, 1665, 3694, 3694, 3694, 3694, 3694, 1665, 1665,
     3694, 3694, 3694, 1665, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 1665, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 1665, 1692, 1692, 3694, 1692, 1692, 1692, 1692,
     1692, 1692, 1692, 1692, 1692, 3694, 1692, 1692, 3694, 1692,
     1692, 1692, 1692, 1692, 1692, 3694, 1692, 1692, 3694, 1692,
     1692, 1692, 1692, 1692, 1692, 2634, 2634, 2634, 2634, 2634,
     2634, 2634, 2634, 2634, 2634, 2634, 2634, 2634, 2634, 2634,
     2634, 3694, 2634, 2634, 2634, 2634, 2634, 2634, 3694, 2634,
     2634, 2634, 2634, 2634, 2634, 2634, 2634, 1147, 1147, 1147,
     3694, 3694, 3694, 3694, 3694, 3694, 1147, 3694, 3694, 3694,
     3694, 3694, 1147, 1147, 3694, 3694, 3694, 3694, 3694, 1147,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 1147, 1157, 3694,

     3694, 3694, 1157, 3694, 1157, 3694, 3694, 1157, 3694, 3694,
     3694, 1157, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1157,
     2408, 2408, 2408, 3694, 3694, 3694, 2408, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 2408, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     2408, 2412, 2412, 2412, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 2412, 2412, 3694, 3694,
     3694, 3694, 3694, 2412, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 2412, 1759, 1759, 1759, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1759, 3694, 1759, 1759, 3694,

     3694, 3694, 3694, 3694, 1759, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1759, 2189, 2189, 2189, 3694, 3694, 3694, 2189,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2189,
     3694, 3694, 3694, 3694, 3694, 2189, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 2189, 2470, 2470, 2470, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2470,
     2470, 3694, 2470, 3694, 3694, 3694, 2470, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 2470, 2705, 3694, 3694, 3694, 3694,
     3694, 3694, 2705, 3694, 3694, 3694, 2705, 2705, 3694, 3694,
     2705, 3694, 3694, 3694, 3694, 2705, 3694, 2705, 2474, 2474,

     2474, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2474, 3694,
     3694, 3694, 3694, 2474, 2474, 3694, 2474, 3694, 3694, 3694,
     2474, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2474, 2477,
     3694, 3694, 3694, 2477, 3694, 3694, 3694, 3694, 2477, 3694,
     3694, 3694, 3694, 3694, 3694, 2477, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 2477, 2478, 2478, 3694, 2478, 2478, 2478,
     2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478,
     2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478, 2478,
     2478, 2478, 2478, 2478, 2478, 2478, 2480, 2480, 3694, 2480,
     2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,

     2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,
     2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2483, 2483,
     2483, 3694, 3694, 3694, 3694, 3694, 3694, 2483, 3694, 3694,
     3694, 2483, 3694, 2483, 3694, 3694, 3694, 3694, 3694, 3694,
     2483, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 2483, 1843,
     1843, 1843, 3694, 3694, 3694, 3694, 3694, 3694, 1843, 3694,
     3694, 3694, 1843, 3694, 1843, 3694, 3694, 3694, 3694, 3694,
     3694, 1843, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1843,
     1263, 1263, 1263, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 1263, 1263, 3694, 1263, 3694,

     3694, 3694, 1263, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1263, 1358, 1358, 3694, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1370, 1370, 1370, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 1370, 3694, 1370, 1370,
     3694, 3694, 3694, 3694, 3694, 1370, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1370, 1431, 1431, 1431, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1431,
     3694, 3694, 3694, 3694, 3694, 3694, 1431, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 1431, 1437, 3694, 3694, 3694, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 3694, 1437, 3694,
     3694, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1503, 1503, 3694,
     1503, 3694, 3694, 3694, 1503, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 1503, 2021, 2021, 2021, 3694, 3694, 3694, 2021,
     3694, 3694, 3694, 3694, 2021, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2021, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 2021, 2804, 2804, 3694, 2804, 2804, 3694,
     2804, 2804, 2804, 2804, 2804, 2804, 2804, 2804, 2804, 2804,

     2804, 2804, 2804, 2804, 2804, 2804, 2804, 2804, 2804, 2804,
     2804, 2804, 2804, 2804, 2804, 2804, 1692, 1692, 3694, 1692,
     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 3694, 1692,
     1692, 3694, 1692, 1692, 1692, 1692, 1692, 1692, 3694, 1692,
     1692, 3694, 1692, 1692, 1692, 1692, 1692, 1692, 1147, 1147,
     1147, 3694, 3694, 3694, 3694, 3694, 3694, 1147, 3694, 3694,
     3694, 3694, 3694, 1147, 1147, 3694, 3694, 3694, 3694, 3694,
     1147, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 1147, 2128,
     2128, 2128, 2128, 3694, 3694, 2128, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 2128, 3694, 3694, 3694, 3694,

     3694, 2128, 3694, 3694, 3694, 3694, 3694, 3694, 2128, 2128,
     1759, 1759, 1759, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 1759, 3694, 1759, 1759, 3694, 3694, 3694,
     3694, 3694, 1759, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     1759, 2189, 2189, 2189, 3694, 3694, 3694, 2189, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 2189, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 2189, 3163, 3163, 3163, 3163, 3163, 3163, 3163, 3163,
     3163, 3163, 3163, 3163, 3163, 3163, 3163, 3163, 3694, 3163,
     3163, 3163, 3163, 3163, 3163, 3694, 3163, 3163, 3163, 3163,

     3163, 3163, 3163, 3163, 3340, 3340, 3340, 3340, 3340, 3340,
     3340, 3340, 3340, 3340, 3340, 3340, 3340, 3340, 3340, 3340,
     3694, 3340, 3340, 3340, 3340, 3340, 3340, 3694, 3340, 3340,
     3340, 3340, 3340, 3340, 3340, 3340, 3467, 3467, 3467, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3467, 3694, 3694, 3694, 3467, 3694, 3694, 3467, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3467,  253, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694
    } ;

static yyconst flex_int16_t yy_chk[28653] =
    {   0,
        0,    0,    1,    0,    2,    0,    1,    1,    2,    2,
      391,    1,    0,    2,  391,  259,  269,  269,    0,    1,
      259,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
      268,    5,    5,  390,  390,  268,    5,    6,    6,    6,
        6,   19,    6,    6,    5,   19,   19,    6,  290,  656,
       19,   19,   19,  290,  279,    6,   33,  279,   19,  303,
       33,   33,  554,  554,  303,   33,   19,   83,   19,  321,
       33,   83,   83,   33,  321,  261,   83,    5,  261,  325,
       33,  674,  325,  656,   83,  674,  261, 2388,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   15,  433,   16,  331,   15,
       15,   16,   16,  331,   15, 2392,   16,  282,  282,  282,
      282,   20,   15,  340,   16,   20,   20,  308,  340, 1070,
       20,   20,   20,  308,   43,   43,   43,   43,   20,   43,
       43,  282,  308, 1070,   43,  348,   20, 2394,   20,  433,
      348,  747,   43,  747,   15, 1070,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,  496,   24,  368,   23,
       23,   24,   24,  368,   23,  496,   24,  288,  288,  288,
      288,   34,   23,   37,   24,   34,   34,   37,   37, 1097,
       34,  361,   37,  369,  361,   34,  369,   84,   34,  382,
       37,   84,   84, 1097,  382,   34,   84, 1502,   37, 1502,
      273,  273,  273,  273,   84, 2395,   23,  273,   24,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,  396,   29,   29,  573,  573,  396,   29,   30,   30,
       30,   30,  432,   30,   30,   29,  309,  432,   30,   31,
      447,  400,  309,   31,   31,  447,   30, 1499,   31,   31,
       32,  309,  400,   31,   32,   32,   31,  452,  388,   32,
       32,  388,  452,   31,   32, 1499,   38,   32,   49,  526,

       38,   38,   49,   49,   32,   38,  467,   49,   49,   49,
      653,  467,  653,   38,   50,   49,   29,  309,   50,   50,
     1224,   38,   29,   50,   50,   50,  519,   30,  653,  519,
     1224,   50, 2088,   30,   44,   44,   44,   44,  474,   44,
       44,  578,  578,  474,   44,  388,  388,   31,  280,  280,
      280,  280,   44,  526,  542,  280, 2088,  542,   32,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   45, 2396,   46,  480,   45,   45,   46,   46,  480,
       45,   45,   46,   46,  487,   45,  504,   46,   45,  487,
       46,  504,  991,  991,   45,   45,   46,   46,   47,   47,
       47,   47,  511,   47,   47, 1096,  521,  511,   47,   47,
       47,  521,  550,   47, 1096,  550,   47,   48,   48,   48,
       48,   51,   48,   48,  976,   51,   51,   48,   48,   48,
       51,  580,   48,  539,  580,   48,  539,   52,   51,  539,
      976,   52,   52,   55,  580,   51,   52,   55,   55,   45,
      586,   46,   55,   55,   52,  263,  263,  263,  263,  544,

       55,   52,  588, 1986,  544,   56,  553,   55,   55,   56,
       56,  553,  562,  263,   56,   56, 1986,  562,   85,   85,
      568,   85,   56,   85,   85,  568, 1085, 1085,   85,   56,
       56,   85,   86,   86, 1141,   86,   85,   86,   86,   51,
      586,  712,   86, 1141,  712,   86,  284,  284,  284,  284,
       86,  733,  588,  284,  733,   52,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       57,  577, 1151,   58,   57,   57,  577,   58,   58,   57,
     1152, 1151,   58,   59,   59,   59,   59,   57,   59,   59,
       58,  585,  744,   59, 1152,  744,  585,   60,   60,   60,
       60,   59,   60,   60,  589, 1398, 1398,   60,  264,  264,
      264,  264, 1240,   59,  549,   60, 1240,  549,  603,   57,
      549,   57,   58,  603,   58,  590,  264,   60,   61,   61,

       61,   61,  615,   61,   61, 1408, 1408,  615,   61,   62,
       62,   62,   62,  592,   62,   62,   61, 1410, 1410,   62,
       63,   63,   63,   63,  589,   63,   63,   62,   61,  623,
       63,   73,   59,   59,  623,   73,   73, 2397,   63,   62,
       73,  271,  271,  271,  271,  590,   60,   60,   73, 1445,
       63,   64,   64,   64,   64,   75,   64,   64,  271,   75,
       75,   64, 2398,  592,   75,  271,  634,   75,  591,   64,
       76,  634,   75,  903,   76,   76,  903,   61,   61,   76,
      591,   64,   76, 1445, 1216,  591,   91,   76,   62,   62,
       91,   91, 1216,  642, 1216,   91,   91,   91,  642,   63,

       63, 2414,   92,   91,  652,   75,   92,   92, 2415,  652,
       73,   92,   92,   92,  387,  387,  387,  387,  591,   92,
       76,  387,  393,  393,  393,  393,  466,  466,  466,  466,
       64,   64,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       69,   69,  671,   69,  684,   69,   69,  671,  686,  684,
       69,   70,   70,  686,   70,  691,   70,   70,   69,  700,
      691,   70,   71,   71,  700,   71,  709,   71,   71,   70,
       69,  709,   71,   74,  722, 1570, 2416,   74,   74,  722,
       71,   70,   74,  734,  272,  272,  272,  272,  734, 1570,
       74,   69,   71,   72,   72, 1447,   72, 1334,   72,   72,
       77,  272,   70,   72,   77,   77, 1334, 1511,  272,   77,
      771,   72,   77,   71, 2172,  771,  791,   77, 2172,   69,
       69,  791, 1511,   72,  281,  281,  281,  281,   78, 1447,
       70,   70,   78,   78,   79, 1783, 1783,   78,   79,   79,

       78,   71,   71,   79,   72,   78,  977, 2417,  281,  977,
       77,   79,   74,  358,  358,  358,  358,   80,   79,  977,
       87,   80,   80,   79,   87,   87,   80, 1104, 1123,   87,
     1104, 1123,   72,   72,   80,   81,   81,   87,   78,   81,
       81,   80,  803,  748,   81,  748,   80,  803, 1337,   82,
       82,   88,   81,   82,   82,   88,   88, 1337,   82,  783,
       88, 1417,  783,  281,  783,  749,   82,  749,   88,   89,
       87,   90,   79,   89,   89,   90,   90, 2418,   89,  443,
       90, 1040,  443, 1419, 1040,   81,   89,  748,   90,   99,
     2419,  814,  358,   99,   99,   80,  814, 2424,   99,   82,

     1040,   88,   93,   93,   93,   93,   99,   93,   93,  749,
     2425, 1417,   93,   94,   94,   94,   94,   95,   94,   94,
       93,   95,   95,   94,  823, 1791,   95,  835,   93,  823,
       93,   94,  835, 1419,   95, 1791,  443,  443,   99,   94,
       99,   94,   95, 1063,   95, 2426, 1063,   89,   89,   90,
       90,   96, 2427,   97,  844,   96,   96,   97,   97,  844,
       96,  857,   97,   97,   97,  403,  857, 1727,   96, 1063,
       97,  488,  488,  488,  488,   98,   96,  867,   96,   98,
       98, 1727,  867,  878,   98,   98,   98, 1420,  878,  100,
      488,  101,   98,  100,  100,  101,  101, 1503,  100, 1503,

      101,  283,  283,  283,  283,  102,  100,  121,  101,  102,
      102,  121,  121, 2428,  102,  403,  121,  374,  374,  374,
      374,  403,  102,  884,  121,  283,  403,  403,  884,  403,
     1168,  894,  121, 1168,  900,  374,  894, 1420,  100,  900,
      100,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  105, 1220,  106,  912,  105,
      105,  106,  106,  912,  105, 1220,  106,  459,  459,  459,
      459, 1220,  105, 2429,  106,  107,  107,  107,  107,  921,
      107,  107,  459, 2430,  921,  107,  108,  108,  108,  108,
      931,  108,  108,  107, 2431,  931,  108,  109,  109,  109,
      109,  941,  109,  109,  108, 2432,  941,  109,  123, 1388,
      109,  951,  123,  123,  109,  109,  951,  123, 1388,  958,
      294,  294,  294,  294,  958,  123, 2433,  109, 1506,  966,

     1506,  294,  107,  105,  966,  106,  110,  110,  110,  110,
      975,  110,  110,  108,  294,  975,  110,  122,  109,  110,
      984,  122,  122,  110,  110,  984,  122,  905,  124, 1777,
      905, 2434,  124,  124,  122,  131,  110,  124,  905,  131,
      131, 1506,  122, 1777,  131,  124,  436,  436,  436,  436,
      990,  996,  131,  436, 2435,  990,  996,  110,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  119, 1471,  120, 1006,  119,  119,

      120,  120, 1006,  119, 1471,  120,  375,  375,  375,  375,
      127,  119,  128,  120,  127,  127,  128,  128, 1019,  127,
     1031,  128, 2313, 1019,  375, 1031,  132,  127,  135,  128,
      132,  132,  135,  135,  127,  132,  128,  135, 1178,  135,
     2313, 1178,  136,  132, 1039,  135,  136,  136,  119, 1039,
      120,  136, 1050,  136,  119, 1195,  120, 1050, 1195,  136,
      516,  516,  516,  516,  119,  119,  120,  120,  517,  517,
      517,  517,  119,  119,  120,  120,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  139, 1055, 2436,  140,  139,  139, 1055,  140,
      140,  139, 1068,  139,  140, 1057,  140, 1068, 1057,  139,
      141, 1421,  140,  142,  141,  141, 1061,  142,  142,  141,
      143, 1069,  142, 1057,  143,  143, 1069,  141, 1061,  143,
      142,  143, 2437, 1061, 2439,  141,  145,  143,  142,  144,
      145,  145,  146,  144,  144,  145,  146,  146,  144, 1074,
      144,  146, 1075,  145, 1074, 2440,  144, 1075,  161,  146,
      145, 1421,  161,  161, 1083, 2441,  146,  161,  161, 1083,
      323,  323,  323,  323,  143,  161,  143, 1095, 1214,  162,

      143, 1214, 1095,  162,  162, 2442,  143, 1196,  162,  162,
      143,  143, 1196,  144,  323,  144,  162, 2443,  323,  144,
      515,  515,  515,  515, 1222,  144,  515, 1222, 2444,  144,
      144,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  151,

     1968, 1699, 1086,  151,  151, 1086, 1154, 2445,  151,  152,
      151, 2315, 1154,  152,  152, 1086,  151, 2446,  152,  163,
      152, 1154, 1018,  163,  163, 1018,  152, 1699,  163, 1018,
      163, 1018,  151, 1752, 1968, 1018,  163,  381,  381,  381,
      381, 1752,  152,  151,  151, 2315,  151,  524,  524,  524,
      524, 1831, 1831,  152,  152,  381,  152,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  157,  157,  157,  157,  173,
      157,  157, 2447,  173,  173,  157,  157,  157,  173,  173,
      157,  157, 1202,  157, 1204, 1357,  173, 1202, 1357, 1204,
      157,  157,  164,  157,  157,  157,  164,  164, 1779, 1157,
     2034,  164,  167,  164, 2448, 1157,  167,  167, 2034,  164,
     1090,  167, 1779, 1090, 1157,  157,  167,  157,  168,  167,
      174, 1090,  168,  168,  174,  174,  167,  168, 1209,  174,
      174, 2449,  168, 1209, 1209,  168, 1209,  174,  460,  460,

      460,  460,  168, 2450,  157,  157,  158,  158,  158,  158,
      181,  158,  158,  460,  181,  181,  158,  158,  158,  181,
     1384,  158,  158, 1384,  158, 1142, 1384,  181, 1142, 1142,
     1569,  158,  158,  181,  158,  158,  158,  169, 2451, 1569,
      170,  169,  169, 1142,  170,  170,  169,  169,  169,  170,
      170,  170, 1091, 2326,  169, 1091,  158,  170,  158, 2452,
     1227, 2326,  169, 1091,  169,  170,  195,  170, 1227, 1392,
      195,  195, 2453, 1227, 1392,  195,  195,  195,  598,  598,
      598,  598, 2454,  195, 2455,  158,  158,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  175,
     1400, 2457,  176,  175,  175, 1400,  176,  176,  175,  175,
      175,  176,  176,  176, 1394, 1479,  175, 1394, 1479,  176,
      177,  177,  177,  177,  182,  177,  177, 1807,  182,  182,
      177,  177,  177,  182,  178,  178,  178,  178,  177,  178,
      178,  182, 2458, 1807,  178,  178,  178,  182,  175, 1835,
     1835,  176,  178,  179,  179,  179,  179,  223,  179,  179,

     1467,  223,  223,  179,  179, 1467,  223,  180,  180,  180,
      180,  179,  180,  180,  223, 2204, 2204,  180,  180,  179,
     1093,  179,  223, 1093,  223,  180, 2459,  534,  534,  534,
      534, 1093, 2461,  180,  534,  180,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  187, 2462,  188, 1469,  187,  187,
      188,  188, 1469,  187, 1492,  188,  187, 1492,  188, 1726,
      189,  187,  190,  188,  189,  189,  190,  190, 1726,  189,
     1501,  190,  189, 1501,  190, 1776,  191,  189,  192,  190,
      191,  191,  192,  192, 1776,  191, 1393,  192,  191, 1393,
      192, 2463, 1393,  191,  187,  192,  188,  193, 1778,  194,
     1568,  193,  193,  194,  194, 1568,  193, 1778,  194,  193,
      189,  194,  190,  196,  193, 1695,  194,  196,  196, 2464,
     1695, 2466,  196,  196,  196, 2467,  191,  197,  192,  198,
      196,  197,  197,  198,  198, 1507,  197, 1507,  198,  295,

      295,  295,  295, 1642,  197, 1954,  198,  193,  199,  194,
      295,  200,  199,  199, 1954,  200,  200,  199,  199,  199,
      200,  200,  200,  295, 1412,  199,  201, 1412,  200,  202,
      201,  201, 1957,  202,  202,  201, 1507, 1412,  202,  203,
      203, 1957,  203,  201,  203,  203,  202, 1714, 1642,  203,
      203,  203, 1714, 1600,  245,  295, 1600,  203,  245,  245,
     2000, 2471, 2000,  245, 1600,  197,  197,  198,  198,  204,
      204,  245,  204,  215,  204,  204, 1642,  215,  215,  204,
      204,  204,  215,  209,  209,  209,  209,  204,  209,  209,
      215, 2000, 1803,  209,  209,  209, 1682, 1803,  209, 1682,

     1073,  209, 1955, 1073,  201,  201, 2472,  202,  202,  205,
      205,  205,  205, 1073,  205,  205, 1955, 1159, 1073,  205,
      205,  205,  215, 1159,  215, 1635, 1073,  205,  210,  210,
      210,  210, 1159,  210,  210,  205, 1958,  205,  210,  210,
      210, 2478, 1207,  210,  211, 1207,  210,  212,  211,  211,
     1958,  212,  212,  211, 1533,  211,  212, 1533,  212, 1533,
     1405,  211,  221, 1405,  212, 1159,  221,  221, 1635, 2211,
     2211,  221,  221,  221,  270,  270,  270,  270, 1405,  221,
     1795, 2481,  205,  206,  206,  206,  206, 1317,  206,  206,
     1317,  270, 1795,  206,  206,  206, 1795, 1635,  270, 1207,

     1207,  206,  213,  213,  213,  213, 2399,  213,  213,  206,
     2504,  206,  213,  213,  213, 1678, 1604,  213, 1678, 1604,
      213,  214,  214,  214,  214, 1338,  214,  214, 1338, 1338,
     2399,  214,  214,  214, 1678, 1785,  214,  222, 1785,  214,
     1604,  222,  222, 1338, 1317, 1317,  222,  222,  222,  599,
      599,  599,  599,  270,  222, 2505,  206,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  216, 2330,  217, 2330,  216,  216,  217,  217, 1999,
      216, 1999,  217,  383,  383,  383,  383,  218,  216,  219,
      217,  218,  218,  219,  219, 1722,  218, 1627,  219, 1389,
     1627,  383, 1389, 1389,  218, 1318,  219,  220, 1318,  224,
     1627,  220,  220,  224,  224, 2529,  220, 1389,  224, 2530,
      216, 2330,  216,  217,  220, 2544,  224, 1999,  274,  274,

      274,  274,  274, 1704,  224,  274,  224,  218,  225,  219,
     1722, 1472,  225,  225, 1472, 1472, 2545,  225,  226,  226,
      225,  226,  274,  226,  226,  225, 2546,  220,  226, 1472,
      227,  226, 1318, 1318,  227,  227,  226,  225, 1722,  227,
      296,  296,  296,  296, 2031,  228, 1704,  227,  226,  228,
      228,  296, 1687, 2031,  228, 1687,  229, 2547,  225,  227,
      229,  229,  228, 1693,  296,  229, 1693,  230, 2548,  226,
     1687,  230,  230,  229,  228, 1704,  230,  231, 2549,  274,
      227,  231,  231,  232,  230,  229,  231,  232,  232, 1693,
     2550, 2032,  232,  243,  231,  228,  230,  243,  243,  296,

      232, 2087,  243,  244,  243, 2032,  229,  244,  244, 1796,
      243, 1796,  244, 1688,  244, 2087, 1688,  230,  246, 1796,
      244,  247,  246,  246, 2103,  247,  247,  246,  231, 2456,
      247, 1688,  248, 2551,  232,  246,  248,  248,  247, 2083,
     2552,  248, 2083, 2147, 2456,  231, 2554, 2555, 2147,  248,
     2103,  232,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      237, 2556,  238, 1720,  237,  237,  238,  238, 2558,  237,
      237,  238,  238, 1720, 2380,  249,  249,  237,  249,  238,
      249,  249, 2380, 1681, 2562,  249, 1681, 1720,  249,  278,
      278,  278,  278,  249,  385,  385,  385,  385, 2104, 1720,
      278,  249, 1681, 2115,  278,  249,  278,  394,  394,  394,
      394, 2479, 2115,  278,  278,  278, 2479, 2563,  385,  645,
      645,  645,  645, 2564, 2104,  394,  249,  237, 2567,  238,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  241,  241, 2400,  241, 2053,  241,
      241, 2053, 2568, 2575,  241,  242,  242, 2576,  242, 2577,
      242,  242,  241, 2579, 2580,  242,  503,  503,  503,  503,

     2400,  241, 2053,  242,  250,  250, 2581,  250,  503,  250,
      250, 2582,  242, 1715,  250,  251, 1715,  250, 2583,  251,
      251,  251,  250, 2584,  251, 2585, 1715,  251, 2586, 2589,
      250,  241,  251, 2591,  250,  359,  359,  359,  359, 2123,
      251, 2210,  242, 1723,  251, 2123, 1723,  241, 1662,  241,
     2210, 1662,  359,  241, 2123,  250, 1723, 1662,  242,  359,
      242, 1662, 2308, 2593,  242,  251,  251,  252,  252, 2402,
      252, 2308,  252,  252,  252, 2594, 1744,  252, 2402, 1744,
      252,  275,  275,  275,  275,  252,  359, 2123,  275,  351,
      351,  351,  351,  252, 1744, 2460,  351,  252,  275,  285,

      285,  285,  285,  285, 2460, 2596,  285,  386,  386,  386,
      386, 2597, 2599,  392,  392,  392,  392, 2600,  252,  252,
      392, 1917,  392,  285, 1917, 2601,  392,  399,  399,  399,
      399,  386,  404,  404,  404,  404, 2587,  392, 2587, 1917,
     2602,  409,  409,  409,  409,  399,  434,  434,  434,  434,
     1664, 2101,  351, 1664, 2101, 2603,  404, 2590,  404, 1664,
     2590, 2604,  275, 1664, 2101,  409,  392,  409,  351, 2605,
      434,  646,  646,  646,  646,  713,  713,  713,  713, 2606,
      285,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  409,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352, 2608,  352,  352,  352,  353,  353,  353,  353, 2609,
     2610, 2611,  353,  389,  389,  389,  389,  389, 2612, 2614,
      389,  405,  405,  405,  405,  408,  408,  408,  408, 1757,
      410,  410,  410,  410, 2615, 1757, 2616,  389,  411,  411,

      411,  411, 2617, 2183, 1757,  405, 2183,  405, 2183,  408,
     2102,  408, 2618, 2102,  410, 2619,  410,  412,  412,  412,
      412, 2620,  411, 2102,  411, 2621, 2622, 2623,  353,  435,
      435,  435,  435, 2294, 2624,  405, 2294, 2363, 2294,  408,
     2363,  412, 2363,  412,  353,  384,  384,  384,  384, 1757,
     2625,  384, 2626,  435,  389,  410, 2627,  411,  410, 2628,
     2631,  411,  413,  413,  413,  413, 2331, 2633, 2331,  384,
      658,  658,  658,  658,  412,  384, 2635, 2636, 2637,  440,
      440,  440,  440, 2638,  412,  440,  413,  658,  413,  384,
     2405, 2639,  412, 2641,  412,  384, 2405,  440, 2629,  384,

      384, 2629,  384,  384,  384, 2405, 2642, 2643,  384,  384,
      384,  384,  384, 2644,  384, 2331,  384,  384,  384,  384,
      384,  414,  414,  414,  414,  415,  415,  415,  415,  416,
      416,  416,  416,  413,  417,  417,  417,  417, 2640,  418,
      418,  418,  418, 2381, 2645,  414, 2381,  414, 2646,  415,
     2381,  415, 2381,  416, 1035,  416, 2381, 1035,  417, 2647,
      417, 2648, 2640,  418, 2654,  418, 2655,  419,  419,  419,
      419,  441,  441,  441,  441,  420,  420,  420,  420, 1677,
      414, 1035, 1677,  416,  421,  421,  421,  421, 2588,  441,
     2588,  419,  415,  419, 2657, 2660, 2661,  417,  418,  420,

     2662,  420,  422,  422,  422,  422, 1677,  418,  421, 2663,
      421, 1035, 2665,  418,  423,  423,  423,  423,  424,  424,
      424,  424,  419, 2666, 2667, 2668,  422, 2588,  422, 1035,
     2664,  425,  425,  425,  425, 2669, 1677, 2671,  423, 2664,
      423, 2673,  424,  421,  424, 2630,  420, 2676, 2630,  420,
      439,  439,  439,  439, 1677,  425, 2630,  425, 2677,  437,
      437,  437,  437,  437, 2678,  422,  437, 2679, 2680,  442,
      442,  442,  442,  423,  439,  422,  439,  446,  446,  446,
      446, 2681, 2682,  437, 2683,  424,  425,  442, 2681, 2684,
      424, 2685,  423, 2686,  425,  446, 2687, 2688, 2689,  425,

      457,  457,  457,  457,  530,  530,  530,  530,  531,  531,
      531,  531,  532,  532,  532,  532, 2690, 2691,  457, 2692,
     2693,  530, 2694, 2695, 2696,  531, 2699, 2698,  530, 2700,
     2701, 2702,  531, 2705, 2707, 2708,  532, 2729, 2730, 2752,
      437,  483,  483,  483,  483,  533,  533,  533,  533,  535,
      535,  535,  535,  535, 2753, 2768,  535,  537,  537,  537,
      537, 2769, 2771,  531,  548,  548,  548,  548,  483,  533,
     2772, 2773, 2775,  535,  555,  555,  555,  555, 2776, 2778,
     2784,  537,  548,  637,  637,  637,  637,  638,  638,  638,
      638, 2785,  555, 2789, 2790, 2791,  483, 2698,  483,  660,

      660,  660,  660,  661,  661,  661,  661, 2794,  483,  483,
     2795, 2796,  483,  483,  483, 2797,  483,  662,  662,  662,
      662,  694,  694,  694,  694,  699,  699,  699,  699, 2799,
      535,  701,  701,  701,  701,  725,  725,  725,  725,  694,
      637, 2801, 2803,  699,  638,  727,  727,  727,  727,  701,
      660, 2804,  725,  762,  762,  762,  762, 2805,  661,  763,
      763,  763,  763,  769,  769,  769,  769, 1828, 2807,  727,
     1828,  762,  662,  772,  772,  772,  772,  763, 2800, 2808,
     2800,  769,  779,  779,  779,  779, 2809, 2806, 2810,  779,
     2806,  772,  780,  780,  780,  780, 2811, 1828, 2812,  780,

      781,  781,  781,  781, 2813, 2814, 2815,  781,  782,  782,
      782,  782, 2816,  785,  785,  785,  785, 2817, 1828, 2800,
      785,  782,  785, 2818, 2819, 2820,  785,  786,  786,  786,
      786, 2821, 2825, 2827,  786, 1248,  786, 2828, 1248, 1248,
      786,  787,  787,  787,  787, 2829, 2822, 2830,  787, 2822,
      787, 2831, 2832, 1248,  787,  788,  788,  788,  788, 2834,
     2802, 2835,  788, 2802,  788, 1248, 2836, 2802,  788,  790,
      790,  790,  790,  792,  792,  792,  792,  794,  794,  794,
      794,  805,  805,  805,  805, 2837, 1248,  790, 2838, 2839,
     2840,  792,  805,  807,  807,  807,  807,  808,  808,  808,

      808,  809,  809,  809,  809,  805, 2843, 2847,  809,  805,
     2852,  812,  812,  812,  812,  812, 2853,  807,  812, 2854,
     2855,  808,  816,  816,  816,  816, 2856,  794,  822,  822,
      822,  822, 2857, 2858, 2859,  812,  825,  825,  825,  825,
      822,  828,  828,  828,  828, 2860,  816,  825,  829,  829,
      829,  829,  834,  834,  834,  834,  914,  914,  914,  914,
     2861,  825,  915,  915,  915,  915,  940,  940,  940,  940,
      834, 2862,  943,  943,  943,  943, 2864,  940,  944,  944,
      944,  944,  950,  950,  950,  950,  825,  943, 2866, 2868,
     2869,  940,  812,  944,  978,  978,  978,  978, 2871, 2823,

      985,  985, 2823,  985, 2873,  985, 2874,  978,  985,  985,
     2823, 2876,  978, 2877, 2879, 2880,  940, 2881,  985, 2882,
      985, 1000, 1000, 1000, 1000, 2883, 2885, 2888, 1000, 1001,
     1001, 1001, 1001, 2889, 2892, 2891, 1001, 1008, 1008, 1008,
     1008, 1010, 1010, 1010, 1010,  940, 2893, 2894, 1010, 1008,
     2891, 2896, 1008, 1011, 1011, 1011, 1011, 2911, 2912, 2916,
     1011, 1013, 1013, 1013, 1013, 1022, 1022, 1022, 1022, 2917,
     2921, 1000, 1013, 1023, 1023, 1023, 1023, 1071, 2943, 1001,
     1024, 1024, 1024, 1024, 2944, 2945, 2953, 1024, 2954, 1022,
     2959, 1027, 1027, 1027, 1027, 1027, 2960, 1023, 1027, 1033,

     1033, 1033, 1033, 1710, 1071, 1071, 1710, 1071, 2964, 1071,
     2965, 2966, 1071, 1071, 2971, 1027, 1710, 1829, 2972, 1072,
     1829, 1710, 1071, 1033, 1071, 1072, 1072, 2975, 1072, 1710,
     1072, 2976, 2977, 1072, 1072, 1087, 1087, 1087, 1087, 1094,
     1094, 1094, 1094, 1072, 2978, 1072, 2979, 1829, 1087, 1100,
     1100, 1100, 1100, 1087, 2980, 2981, 2982, 1094, 1101, 1101,
     1101, 1101, 1102, 1102, 1102, 1102, 1100, 2984, 1829, 1102,
     2987, 2989, 1027, 1100, 2985, 1101, 2983, 2985, 2983, 1102,
     2991, 2985, 1101, 1105, 1105, 1105, 1105, 2992, 2993, 2994,
     1105, 1106, 1106, 1106, 1106, 2995, 2996, 2997, 1106, 1107,

     1107, 1107, 1107, 1108, 1108, 1108, 1108, 2998, 2999, 1830,
     1107, 2983, 1830, 3000, 1107, 1109, 1109, 1109, 1109, 3001,
     2988, 3004, 1109, 2988, 1107, 1107, 3005, 1108, 1100, 1111,
     1111, 1111, 1111, 3006, 1112, 1112, 1112, 1112, 3007, 1830,
     1111, 1112, 2990, 1102, 1111, 2990, 1111, 1114, 1114, 1114,
     1114, 1112, 3008, 1111, 1111, 1111, 1113, 1113, 1113, 1113,
     1830, 3009, 3010, 1113, 1114, 1115, 1115, 1115, 1115, 3012,
     3014, 3015, 1115, 1113, 1116, 1116, 1116, 1116, 1116, 3016,
     3017, 1116, 1117, 1117, 1117, 1117, 1124, 1124, 1124, 1124,
     3018, 3021, 3025, 1124, 3026, 3027, 3028, 1117, 1116, 1117,

     3029, 1120, 1120, 1120, 1120, 3030, 1117, 1117, 1117, 3032,
     3033, 3034, 1120, 3035, 3037, 1112, 1120, 3038, 1120, 3039,
     3041, 1125, 1125, 1125, 1125, 1120, 1120, 1120, 1125, 3043,
     3044, 1126, 1126, 1126, 1126, 3051, 3054, 1113, 1127, 1127,
     1127, 1127, 1126, 3057, 3058, 3063, 1126, 1128, 1128, 1128,
     1128, 1131, 1131, 1131, 1131, 1116, 1126, 1126, 1132, 1132,
     1132, 1132, 1127, 1134, 1134, 1134, 1134, 3064, 3066, 3067,
     1134, 1128, 3082, 3053, 3086, 1131, 1135, 1135, 1135, 1135,
     3087, 3091, 1132, 1135, 1136, 1136, 1136, 1136, 3053, 1137,
     1137, 1137, 1137, 3092, 3093, 1136, 1137, 1139, 1139, 1139,

     1139, 1140, 1140, 1140, 1140, 3090, 3095, 3115, 1139, 1143,
     1143, 1143, 1143, 1143, 3090, 3116, 1143, 1127, 3122, 3123,
     3127, 1139, 3128, 1145, 1145, 1145, 1145, 1147, 1147, 1147,
     1147, 3129, 3133, 1143, 1145, 3136, 3137, 3138, 1147, 1148,
     1148, 1148, 1148, 1149, 1149, 1149, 1149, 1145, 3142, 3143,
     1148, 1147, 3145, 3147, 1149, 1165, 1165, 1165, 1165, 1173,
     1173, 1173, 1173, 1148, 3150, 3151, 1173, 1149, 1174, 1174,
     1174, 1174, 3152, 3153, 3154, 1174, 3155, 3156, 3157, 1165,
     1175, 1175, 1175, 1175, 3160, 3158, 3159, 1175, 3158, 3159,
     1143, 1176, 1176, 1176, 1176, 3161, 3158, 3162, 1149, 1177,

     1177, 1177, 1177, 1181, 1181, 1181, 1181, 3164, 1176, 3148,
     1181, 1148, 3148, 3165, 3166, 1176, 1177, 1182, 1182, 1182,
     1182, 3167, 1173, 1177, 3168, 1185, 1185, 1185, 1185, 3148,
     3148, 1174, 1185, 3173, 1182, 3174, 3175, 3177, 1173, 3178,
     3180, 1182, 1200, 1200, 1200, 1200, 3181, 1174, 1228, 1228,
     1228, 1228, 3182, 3185, 3186, 1228, 3189, 3194, 3197, 1175,
     1246, 1246, 1246, 1246, 3198, 1177, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1181, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 3199, 1179, 1179, 1179,
     1183, 1183, 1183, 1183, 1184, 1184, 1184, 1184, 1186, 1186,
     1186, 1186, 1188, 1188, 1188, 1188, 3201, 1183, 3202, 3203,
     3208, 1184, 3221, 3222, 1183, 3226, 3227, 3228, 1184, 1190,
     1190, 1190, 1190, 3229, 3246, 3250, 1188, 3252, 1201, 1201,
     1201, 1201, 1203, 1203, 1203, 1203, 1190, 1206, 1206, 1206,

     1206, 3249, 3253, 1190, 3249, 1184, 1201, 3255, 3264, 3268,
     1203, 1229, 1229, 1229, 1229, 3269, 1183, 3273, 1229, 3274,
     3275, 1206, 1230, 1230, 1230, 1230, 1234, 1234, 1234, 1234,
     1190, 3276, 1231, 3270, 3270, 1231, 3270, 1186, 1205, 1205,
     1205, 1205, 3277, 1321, 1205, 3278, 1321, 1321, 1230, 3282,
     1234, 1231, 1231, 1231, 1231, 1231, 1235, 1235, 1235, 1235,
     3283, 1321, 1205, 1235, 1323, 1323, 1323, 1323, 1205, 1256,
     1256, 1256, 1256, 1321, 1237, 1237, 1237, 1237, 3281, 1323,
     1256, 3281, 1205, 3284, 3271, 3271, 1256, 3271, 1205, 1231,
     1231, 3285, 1205, 1205, 1321, 1205, 1205, 1205, 1237, 3286,

     1237, 1205, 1205, 1205, 1205, 1205, 3287, 1205, 3292, 1205,
     1205, 1205, 1205, 1205, 1241, 1241, 1241, 1241, 3293, 3296,
     3299, 1241, 3279, 1241, 3301, 3279, 3309, 1241, 1242, 1242,
     1242, 1242, 3310, 3279, 3311, 1242, 1522, 1242, 1241, 1522,
     1522, 1242, 1243, 1243, 1243, 1243, 1245, 1245, 1245, 1245,
     3314, 1243, 1242, 1243, 1522, 1243, 3315, 3328, 1245, 1245,
     1247, 3332, 1832, 1247, 1247, 1832, 1522, 1241, 1833, 3333,
     1245, 1833, 1245, 1247, 3334, 1251, 1251, 1251, 1251, 1251,
     1832, 1242, 1251, 1257, 1257, 1257, 1257, 1522, 3335, 3342,
     1247, 3343, 1832, 3358, 1257, 1243, 3359, 3360, 1833, 1251,

     1257, 1258, 1258, 1258, 1258, 1259, 1259, 1259, 1259, 3361,
     3364, 1247, 1258, 1832, 3365, 3371, 1259, 3365, 1258, 1833,
     3372, 3373, 1259, 1260, 1260, 1260, 1260, 1261, 1261, 1261,
     1261, 3374, 3366, 3280, 1260, 3366, 3280, 3375, 1261, 3378,
     1260, 3379, 3380, 3376, 1261, 3280, 3376, 3381, 1257, 1262,
     1262, 1262, 1262, 3382, 3386, 3376, 1251, 1263, 1263, 1263,
     1263, 1265, 1265, 1265, 1265, 3392, 3393, 1258, 1258, 1267,
     1267, 1267, 1267, 1262, 1259, 1262, 1268, 1268, 1268, 1268,
     3398, 1263, 3399, 1263, 3403, 1265, 1261, 1265, 1269, 1269,
     1269, 1269, 3367, 3367, 1260, 3367, 3404, 1260, 3369, 3369,

     1268, 3369, 1268, 1265, 1265, 3405, 3406, 1265, 1270, 1270,
     1270, 1270, 1269, 3412, 1269, 1271, 1271, 1271, 1271, 3413,
     1272, 1272, 1272, 1272, 1273, 1273, 1273, 1273, 1267, 3414,
     3416, 3417, 1270, 3434, 1270, 1274, 1274, 1274, 1274, 1271,
     3435, 1271, 3436, 3439, 1272, 1268, 1272, 3440, 1273, 3441,
     1273, 1275, 1275, 1275, 1275, 1276, 1276, 1276, 1276, 1274,
     1269, 1274, 3442, 1270, 1277, 1277, 1277, 1277, 1278, 1278,
     1278, 1278, 1271, 3443, 3444, 1275, 3448, 1275, 3451, 1276,
     1272, 1276, 1271, 1279, 1279, 1279, 1279, 3452, 1277, 3453,
     1277, 3456, 1278, 3457, 1278, 3458, 1273, 1274, 1280, 1280,

     1280, 1280, 1281, 1281, 1281, 1281, 3463, 1279, 3464, 1279,
     1282, 1282, 1282, 1282, 1276, 1283, 1283, 1283, 1283, 3465,
     3437, 1277, 1280, 3437, 1280, 1275, 1281, 3437, 1281, 3480,
     3485, 1278, 3486, 1277, 1282, 3438, 1282, 1277, 3438, 1283,
     3489, 1283, 3438, 1284, 1284, 1284, 1284, 3490, 3491, 3493,
     1279, 1285, 1285, 1285, 1285, 1280, 1286, 1286, 1286, 1286,
     1281, 1280, 3494, 1280, 3495, 3481, 1282, 1284, 3481, 1284,
     3500, 1280, 3481, 3501, 3510, 1285, 2010, 1285, 2013, 2010,
     1286, 2013, 1286, 1287, 1287, 1287, 1287, 3515, 1283, 1288,
     1288, 1288, 1288, 1289, 1289, 1289, 1289, 1290, 1290, 1290,

     1290, 1284, 1291, 1291, 1291, 1291, 2010, 1287, 2013, 1287,
     3516, 3483, 3519, 1288, 3483, 1288, 3520, 1289, 3483, 1289,
     3522, 1290, 1286, 1290, 1285, 3523, 1291, 2010, 1291, 2013,
     1292, 1292, 1292, 1292, 3527, 1293, 1293, 1293, 1293, 3530,
     1294, 1294, 1294, 1294, 3531, 1288, 1287, 1304, 1304, 1304,
     1304, 1287, 3535, 1289, 1292, 3539, 1292, 1291, 1290, 1293,
     3543, 1293, 3562, 1289, 1294, 3563, 1294, 1295, 1295, 1295,
     1295, 1304, 3566, 1291, 1296, 1296, 1296, 1296, 2387, 2385,
     2384, 1297, 1297, 1297, 1297, 1298, 1298, 1298, 1298, 3757,
     2383, 1295, 2382, 1295, 3768, 2377, 1292, 3757, 1296, 2376,

     1296, 3769, 3768, 1294, 1293, 1297, 2375, 1297, 3769, 1298,
     3770, 1298, 1306, 1306, 1306, 1306, 3769, 3773, 3770, 1306,
     1307, 1307, 1307, 1307, 2374, 3773, 2373, 1307, 2371, 2370,
     1295, 1308, 1308, 1308, 1308, 1309, 1309, 1309, 1309, 1296,
     2369, 3775, 1309, 1311, 1311, 1311, 1311, 2366, 1902, 3775,
     1298, 1902, 1297, 1313, 1313, 1313, 1313, 1308, 1312, 1312,
     1312, 1312, 1312, 1834, 2365, 1312, 1834, 1311, 2360, 1311,
     1314, 1314, 1314, 1314, 1902, 2357, 1834, 1313, 1902, 1313,
     3777, 2354, 1312, 1316, 1316, 1316, 1316, 1320, 3777, 1316,
     1320, 1320, 2351, 1834, 1314, 2347, 1314, 2344, 2343, 1902,

     1320, 1316, 1324, 1324, 1324, 1324, 1325, 1325, 1325, 1325,
     1327, 1327, 1327, 1327, 1834, 2337, 2336, 1320, 1339, 1339,
     1339, 1339, 1340, 1340, 1340, 1340, 2335, 2334, 3780, 1327,
     2332, 2328, 1351, 1351, 1351, 1351, 3780, 1339, 1320, 1312,
     1326, 1326, 1326, 1326, 1351, 1352, 1352, 1352, 1352, 1355,
     1355, 1355, 1355, 2327, 3795, 1355, 1352, 1356, 1356, 1356,
     1356, 1359, 3795, 2203, 1359, 2325, 2203, 1326, 2324, 2322,
     2319, 1352, 1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362,
     1359, 1359, 1359, 1359, 1359, 1365, 1365, 1365, 1365, 1369,
     1369, 1369, 1369, 2203, 2318, 1326, 1369, 1326, 2314, 1367,

     1367, 1367, 1367, 1368, 1368, 1368, 1368, 1326, 1326, 2312,
     3774, 1326, 1326, 1326, 2203, 1326, 1367, 3774, 3797, 2311,
     1368, 2310, 2309, 1367, 2307, 3774, 3797, 1368, 1370, 1370,
     1370, 1370, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373,
     1375, 1375, 1375, 1375, 3776, 1370, 3802, 1375, 2306, 1372,
     3778, 3776, 1370, 2303, 3802, 2298, 1372, 3778, 1365, 3776,
     1373, 1376, 1376, 1376, 1376, 3778, 3814, 3817, 1376, 1378,
     1378, 1378, 1378, 2295, 3814, 3817, 1378, 1380, 1380, 1380,
     1380, 1381, 1381, 1381, 1381, 1381, 3782, 3787, 1381, 1382,
     1382, 1382, 1382, 2292, 2291, 2288, 1385, 3796, 1372, 1385,

     2287, 1380, 3782, 3787, 3796, 1381, 1387, 1387, 1387, 1387,
     3782, 3787, 3796, 1382, 2286, 1385, 1385, 1385, 1385, 1385,
     1391, 1391, 1391, 1391, 1399, 1399, 1399, 1399, 1423, 1423,
     1423, 1423, 1434, 1434, 1434, 1434, 2285, 2207, 1391, 2283,
     2207, 2282, 1399, 1438, 1438, 1438, 1438, 1448, 1448, 1448,
     1448, 1449, 1449, 1449, 1449, 2281, 1450, 1450, 1450, 1450,
     2279, 2278, 1381, 1450, 1448, 2277, 2276, 2207, 1449, 1450,
     1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452, 1453, 1453,
     1453, 1453, 1454, 1454, 1454, 1454, 3819, 1451, 2207, 1434,
     1455, 1455, 1455, 1455, 3819, 2274, 2273, 1455, 1456, 1456,

     1456, 1456, 1468, 1468, 1468, 1468, 1480, 1480, 1480, 1480,
     1485, 1485, 1485, 1485, 2270, 3798, 3815, 1468, 1486, 1486,
     1486, 1486, 3798, 3815, 3821, 1452, 2269, 2214, 2213, 1453,
     3798, 3815, 3821, 1454, 1485, 1486, 1488, 1488, 1488, 1488,
     1489, 1489, 1489, 1489, 1519, 1519, 1519, 1519, 1521, 2206,
     2200, 1521, 1521, 1456, 2197, 1527, 1527, 1527, 1527, 2188,
     2185, 1521, 1527, 3823, 1489, 1528, 1528, 1528, 1528, 3826,
     2184, 3823, 1528, 1529, 1529, 1529, 1529, 3826, 1521, 1530,
     1530, 1530, 1530, 2182, 2181, 1480, 1529, 1532, 1532, 1532,
     1532, 3824, 1530, 2180, 1535, 1535, 1535, 1535, 3824, 1521,

     1532, 1535, 3788, 1535, 3828, 2179, 3824, 1535, 1536, 1536,
     1536, 1536, 3828, 3829, 2178, 1536, 2177, 1536, 3788, 3831,
     3829, 1536, 1537, 1537, 1537, 1537, 3788, 3831, 3829, 1537,
     2176, 1537, 2175, 2174, 2173, 1537, 1538, 1538, 1538, 1538,
     1539, 1539, 1539, 1539, 1540, 1540, 1540, 1540, 1542, 1542,
     1542, 1542, 2171, 1543, 1543, 1543, 1543, 2170, 3832, 1542,
     1543, 1545, 1545, 1545, 1545, 3832, 1543, 1547, 1547, 1547,
     1547, 3834, 1542, 3832, 1547, 1548, 1548, 1548, 1548, 3834,
     3837, 3839, 1548, 2169, 3840, 1545, 1538, 2168, 3837, 3839,
     1539, 3840, 3841, 3843, 1540, 1550, 1550, 1550, 1550, 3840,

     3841, 3843, 1550, 1552, 1552, 1552, 1552, 1553, 1553, 1553,
     1553, 1553, 2167, 2166, 1553, 1554, 1554, 1554, 1554, 2165,
     1555, 1555, 1555, 1555, 2164, 2163, 2162, 1552, 2161, 3856,
     3858, 1553, 1555, 1556, 1556, 1556, 1556, 3856, 3858, 1554,
     1557, 1557, 1557, 1557, 1556, 1564, 1564, 1564, 1564, 2160,
     2159, 1557, 1566, 1566, 1566, 1566, 1567, 1567, 1567, 1567,
     1587, 1587, 1587, 1587, 2158, 1557, 1592, 1592, 1592, 1592,
     1595, 1595, 1595, 1595, 1567, 1598, 1598, 1598, 1598, 1599,
     3842, 3870, 1599, 1602, 1602, 1602, 1602, 3842, 1553, 3870,
     1557, 1608, 1608, 1608, 1608, 3842, 2157, 2156, 1599, 1599,

     1599, 1599, 1599, 1610, 1610, 1610, 1610, 1614, 1614, 1614,
     1614, 2155, 3844, 3879, 1610, 1615, 1615, 1615, 1615, 3844,
     2154, 3879, 1614, 1616, 1616, 1616, 1616, 3844, 1610, 1628,
     1628, 1628, 1628, 1629, 1629, 1629, 1629, 1644, 1644, 1644,
     1644, 3883, 1628, 3897, 1644, 1645, 1645, 1645, 1645, 3883,
     2153, 3897, 1645, 1610, 1646, 1646, 1646, 1646, 1648, 1648,
     1648, 1648, 1649, 1649, 1649, 1649, 1646, 3906, 3928, 1646,
     1648, 2152, 2151, 1648, 1649, 3906, 3928, 1649, 1650, 1650,
     1650, 1650, 1610, 1654, 1654, 1654, 1654, 1644, 1652, 1652,
     1652, 1652, 3910, 2150, 3857, 1645, 1657, 1657, 1657, 1657,

     1652, 3857, 3933, 1652, 1655, 1655, 1655, 1655, 3910, 3857,
     3933, 1655, 1656, 1656, 1656, 1656, 3910, 2149, 2148, 1656,
     1658, 1658, 1658, 1658, 1659, 1659, 1659, 1659, 2146, 2145,
     2144, 1658, 2141, 2140, 2137, 1659, 1661, 1661, 1661, 1661,
     1667, 1667, 1667, 1667, 2136, 3859, 3859, 1661, 1669, 1669,
     1669, 1669, 3859, 2135, 3872, 1669, 1670, 1670, 1670, 1670,
     3859, 3872, 3935, 1670, 1667, 1672, 1672, 1672, 1672, 3872,
     3935, 2134, 1672, 1674, 1674, 1674, 1674, 1675, 1675, 1675,
     1675, 1675, 2133, 3911, 1675, 1676, 1676, 1676, 1676, 1724,
     1724, 1724, 1724, 1725, 1725, 1725, 1725, 1674, 2131, 3911,

     3940, 1675, 1724, 1729, 1729, 1729, 1729, 3911, 3940, 1676,
     1730, 1730, 1730, 1730, 1855, 1855, 1855, 1855, 1729, 3908,
     2127, 1730, 2122, 2121, 2113, 1730, 3908, 2105, 1729, 1729,
     1731, 1731, 1731, 1731, 3908, 1730, 1730, 1734, 1734, 1734,
     1734, 1731, 2100, 2099, 1734, 1731, 1732, 1732, 1732, 1732,
     1733, 1733, 1733, 1733, 1731, 1731, 1731, 3953, 1675, 1735,
     1735, 1735, 1735, 1732, 3920, 3953, 1735, 1733, 1737, 1737,
     1737, 1737, 1737, 1855, 3913, 1737, 1738, 1738, 1738, 1738,
     3920, 3913, 1739, 1739, 1739, 1739, 2098, 1738, 3920, 3913,
     3994, 1738, 1737, 1739, 1740, 1740, 1740, 1740, 3994, 2097,

     2096, 1738, 1738, 2095, 2093, 1740, 1741, 1741, 1741, 1741,
     2092, 1747, 1747, 1747, 1747, 1747, 2209, 1741, 1747, 2209,
     1749, 1749, 1749, 1749, 4028, 4032, 1750, 1750, 1750, 1750,
     1741, 1749, 4028, 4032, 2089, 1747, 2086, 1750, 1758, 1758,
     1758, 1758, 1758, 2085, 1749, 1758, 2209, 2084, 2080, 1737,
     1750, 1759, 1759, 1759, 1759, 1760, 1760, 1760, 1760, 2079,
     2078, 3921, 1758, 1761, 1761, 1761, 1761, 2209, 1759, 3914,
     1761, 3915, 1760, 2072, 2070, 1759, 3914, 3921, 3915, 1760,
     1762, 1762, 1762, 1762, 3914, 3921, 3915, 1762, 2069, 2068,
     2067, 1750, 1747, 1749, 1763, 1763, 1763, 1763, 1766, 1766,

     1766, 1766, 1775, 2066, 2065, 1766, 1781, 1781, 1781, 1781,
     2063, 1775, 1775, 1775, 1775, 2062, 2061, 2060, 1763, 1758,
     1813, 1813, 1813, 1813, 1760, 1780, 1780, 1780, 1780, 2058,
     1781, 1780, 1782, 1782, 1782, 1782, 1782, 3934, 3922, 1782,
     1814, 1814, 1814, 1814, 3934, 3922, 1813, 3922, 2056, 1780,
     2055, 1815, 3934, 3922, 1815, 1780, 1782, 1821, 1821, 1821,
     1821, 3942, 2054, 2050, 1821, 2048, 1814, 2046, 3942, 1780,
     1815, 1815, 1815, 1815, 1815, 1780, 3942, 2044, 3943, 1780,
     1780, 1821, 1780, 1780, 1780, 3943, 2042, 2040, 1780, 1780,
     1780, 1780, 1780, 3943, 1780, 3965, 1780, 1780, 1780, 1780,

     1780, 1819, 1819, 1819, 1819, 1920, 1920, 1920, 1920, 2038,
     1819, 3965, 1819, 1782, 1819, 1820, 1820, 1820, 1820, 3965,
     2036, 2035, 1820, 2033, 1820, 2029, 2027, 4036, 1820, 1822,
     1822, 1822, 1822, 1823, 1823, 1823, 1823, 2017, 2016, 1820,
     2015, 1822, 1822, 4036, 1823, 1824, 1824, 1824, 1824, 2012,
     2008, 4036, 1824, 1822, 1819, 2006, 2005, 1824, 1825, 1825,
     1825, 1825, 1837, 1837, 1837, 1837, 1837, 2004, 1820, 1837,
     1825, 1825, 1840, 1840, 1840, 1840, 1843, 1843, 1843, 1843,
     4052, 2003, 1825, 1840, 1825, 2002, 1837, 1843, 4052, 1844,
     1844, 1844, 1844, 1843, 1845, 1845, 1845, 1845, 2001, 1998,

     1844, 1846, 1846, 1846, 1846, 1845, 1844, 1923, 1923, 1923,
     1923, 1845, 1846, 1847, 1847, 1847, 1847, 1997, 1846, 1996,
     1848, 1848, 1848, 1848, 1847, 1849, 1849, 1849, 1849, 1995,
     1847, 1848, 1852, 1852, 1852, 1852, 1849, 1848, 1850, 1850,
     1850, 1850, 1849, 1837, 1844, 1853, 1853, 1853, 1853, 1850,
     1994, 1854, 1854, 1854, 1854, 1850, 1852, 1993, 1852, 1899,
     1899, 1899, 1899, 1845, 1852, 1938, 1938, 1938, 1938, 1853,
     4053, 1853, 3952, 1992, 1846, 1854, 4060, 1854, 4053, 3952,
     1991, 1849, 1990, 1848, 4060, 1899, 1847, 3952, 1848, 1854,
     1853, 1857, 1857, 1857, 1857, 1858, 1858, 1858, 1858, 1859,

     1859, 1859, 1859, 1989, 1860, 1860, 1860, 1860, 1850, 1861,
     1861, 1861, 1861, 1988, 4093, 1857, 4122, 1857, 4147, 1858,
     1985, 1858, 4093, 1859, 4122, 1859, 4147, 1984, 1860, 1983,
     1860, 1979, 1978, 1861, 1966, 1861, 1862, 1862, 1862, 1862,
     1863, 1863, 1863, 1863, 1965, 1964, 1864, 1864, 1864, 1864,
     1865, 1865, 1865, 1865, 1866, 1866, 1866, 1866, 1963, 4163,
     1862, 1962, 1862, 1961, 1863, 1857, 1863, 4163, 1858, 1860,
     1864, 1859, 1864, 1960, 1865, 1959, 1865, 1956, 1866, 1952,
     1866, 1861, 1867, 1867, 1867, 1867, 1868, 1868, 1868, 1868,
     1950, 1869, 1869, 1869, 1869, 1928, 1928, 1928, 1928, 1862,

     1870, 1870, 1870, 1870, 1943, 4168, 1867, 1942, 1867, 1863,
     1868, 1936, 1868, 4168, 1864, 1869, 1865, 1869, 1934, 1928,
     1932, 1866, 1929, 1927, 1870, 1926, 1870, 1925, 1871, 1871,
     1871, 1871, 1872, 1872, 1872, 1872, 1873, 1873, 1873, 1873,
     1924, 1867, 1874, 1874, 1874, 1874, 1940, 1940, 1940, 1940,
     1869, 1868, 1871, 4183, 1871, 4218, 1872, 1922, 1872, 1870,
     1873, 4183, 1873, 4218, 1921, 1919, 1874, 1914, 1874, 1875,
     1875, 1875, 1875, 1913, 1876, 1876, 1876, 1876, 1877, 1877,
     1877, 1877, 1878, 1878, 1878, 1878, 1912, 1871, 1879, 1879,
     1879, 1879, 3962, 1875, 1911, 1875, 3970, 1872, 1876, 3962,

     1876, 1910, 1877, 3970, 1877, 1874, 1878, 3962, 1878, 1873,
     1903, 3970, 1879, 1903, 1879, 1880, 1880, 1880, 1880, 1881,
     1881, 1881, 1881, 3973, 1882, 1882, 1882, 1882, 1875, 1909,
     3973, 1876, 1883, 1883, 1883, 1883, 1903, 1908, 3973, 1880,
     1903, 1880, 1907, 1881, 1878, 1881, 1906, 1898, 1882, 1877,
     1882, 1884, 1884, 1884, 1884, 1897, 1883, 1856, 1883, 1842,
     1839, 1903, 1879, 1885, 1885, 1885, 1885, 1838, 1827, 3975,
     1880, 1886, 1886, 1886, 1886, 1884, 3975, 1884, 1881, 1826,
     1887, 1887, 1887, 1887, 3975, 1817, 1816, 1885, 1812, 1885,
     1811, 1888, 1888, 1888, 1888, 1886, 1810, 1886, 1809, 1882,

     1808, 1883, 1806, 1805, 1887, 1883, 1887, 1889, 1889, 1889,
     1889, 1890, 1890, 1890, 1890, 1888, 1884, 1888, 1891, 1891,
     1891, 1891, 1892, 1892, 1892, 1892, 1893, 1893, 1893, 1893,
     1804, 1889, 1802, 1889, 1801, 1890, 3981, 1890, 1975, 1975,
     1975, 1975, 1891, 3981, 1891, 1886, 1892, 1887, 1892, 1800,
     1893, 3981, 1893, 1900, 1900, 1900, 1900, 1799, 1894, 1894,
     1894, 1894, 1798, 1797, 1888, 1895, 1895, 1895, 1895, 1794,
     1896, 1896, 1896, 1896, 1793, 1792, 1790, 1891, 1789, 1900,
     1890, 1889, 1894, 1904, 1894, 1788, 1904, 4075, 1787, 1895,
     1892, 1895, 1905, 1893, 1896, 1905, 1896, 1901, 1901, 1901,

     1901, 1901, 1786, 4075, 1901, 1905, 1784, 1774, 1772, 1904,
     1771, 4075, 1770, 1904, 1972, 1972, 1972, 1972, 1905, 1769,
     1768, 1901, 1905, 1767, 1765, 1896, 1930, 1930, 1930, 1930,
     1756, 1972, 1894, 1751, 1904, 1937, 1933, 1930, 1895, 1933,
     1748, 1746, 1728, 1905, 1937, 1937, 1937, 1937, 1946, 1946,
     1946, 1946, 1930, 1721, 1712, 1933, 1933, 1933, 1933, 1933,
     1944, 1944, 1944, 1944, 1711, 1946, 1709, 1944, 1945, 1945,
     1945, 1945, 1946, 1708, 1707, 1945, 1706, 1705, 1901, 1947,
     1947, 1947, 1947, 1949, 1949, 1949, 1949, 1949, 1953, 1703,
     1949, 1981, 1981, 1981, 1981, 1702, 1947, 1953, 1953, 1953,

     1953, 1701, 1700, 1947, 1694, 3982, 1981, 1949, 1969, 1969,
     1969, 1969, 3982, 1691, 1690, 1969, 1970, 1970, 1970, 1970,
     3982, 1969, 1689, 1970, 1973, 1973, 1973, 1973, 1686, 1970,
     1685, 1973, 1974, 1974, 1974, 1974, 2009, 1684, 1947, 1974,
     1982, 1982, 1982, 1982, 3983, 2009, 2009, 2009, 2009, 2011,
     2014, 3983, 2011, 2014, 2018, 2018, 2018, 2018, 4098, 3983,
     1683, 2018, 1680, 1679, 1949, 1668, 1666, 2018, 1665, 1653,
     2019, 2019, 2019, 2019, 4098, 2011, 2014, 2019, 1647, 2011,
     2014, 1643, 4098, 2019, 2020, 2020, 2020, 2020, 2021, 2021,
     2021, 2021, 2024, 2024, 2024, 2024, 2024, 2020, 2030, 2024,

     2011, 2014, 2025, 2025, 2025, 2025, 1641, 2030, 2030, 2030,
     2030, 2039, 2021, 2025, 2052, 2043, 2024, 2052, 1640, 2047,
     2039, 2039, 2039, 2039, 2043, 2043, 2043, 2043, 2047, 2047,
     2047, 2047, 2051, 2052, 2052, 2052, 2052, 2052, 2059, 1639,
     1638, 2051, 2051, 2051, 2051, 1637, 1636, 2059, 2059, 2059,
     2059, 2073, 2073, 2073, 2073, 2074, 2074, 2074, 2074, 2075,
     2075, 2075, 2075, 2073, 1634, 1633, 2073, 2076, 2076, 2076,
     2076, 1626, 1625, 2024, 2077, 2077, 2077, 2077, 2082, 2082,
     2082, 2082, 2082, 1607, 1605, 2082, 2108, 2108, 2108, 2108,
     4108, 1597, 2109, 2109, 2109, 2109, 1594, 2111, 2111, 2111,

     2111, 2108, 2082, 2109, 1591, 1586, 4108, 2109, 2111, 1576,
     2108, 2108, 2108, 3993, 4108, 1575, 2109, 2109, 2109, 1574,
     3993, 2111, 2125, 2125, 2125, 2125, 4211, 4212, 3993, 2125,
     2128, 2128, 2128, 2128, 2130, 2130, 2130, 2130, 2132, 2132,
     2132, 2132, 4211, 4212, 1565, 2132, 2190, 2190, 2190, 2190,
     4211, 4212, 1561, 2190, 2128, 1546, 1544, 1541, 2130, 2082,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,

     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2117, 2117, 2117, 2117, 2118, 2118,
     2118, 2118, 1518, 1513, 1512, 2117, 1510, 1505, 1504, 2118,
     2124, 2124, 2124, 2124, 2124, 1500, 1498, 2124, 2117, 1497,
     1496, 1495, 2118, 2126, 2126, 2126, 2126, 2126, 1487, 1465,
     2126, 2139, 1464, 1463, 2124, 2129, 2129, 2129, 2129, 1462,
     2139, 2139, 2139, 2139, 1461, 1460, 1457, 2126, 2143, 2143,

     2143, 2143, 2129, 2193, 2193, 2193, 2193, 2118, 1446, 2129,
     2186, 2186, 2186, 2186, 2193, 2117, 1444, 2186, 1443, 2186,
     1442, 4000, 2143, 2186, 2187, 2187, 2187, 2187, 4000, 1436,
     1435, 2187, 4014, 2187, 2186, 1433, 4000, 2187, 1432, 4014,
     1413, 2124, 2189, 2189, 2189, 2189, 1409, 4014, 2187, 1407,
     2129, 1406, 4001, 4001, 2126, 2142, 2142, 2142, 2142, 4001,
     1397, 2142, 1386, 2186, 1374, 1371, 2189, 4001, 2189, 2191,
     2191, 2191, 2191, 1366, 1360, 1350, 2191, 2187, 1349, 2142,
     2192, 2192, 2192, 2192, 1348, 2142, 2195, 2195, 2195, 2195,
     1347, 1346, 2192, 2195, 2275, 2275, 2275, 2275, 2195, 2142,

     2216, 2216, 2216, 2216, 2192, 2142, 2192, 1345, 4031, 2142,
     2142, 2216, 2142, 2142, 2142, 4031, 1344, 2216, 2142, 2142,
     2142, 2142, 2142, 4031, 2142, 1343, 2142, 2142, 2142, 2142,
     2142, 2196, 2196, 2196, 2196, 2198, 1342, 1335, 2196, 1333,
     2198, 1332, 1331, 2196, 1330, 1329, 1328, 2198, 2198, 2198,
     2198, 2198, 2199, 2199, 2199, 2199, 1305, 1303, 1302, 2199,
     1266, 2199, 1264, 1253, 1252, 2199, 2201, 2201, 2201, 2201,
     2217, 2217, 2217, 2217, 1244, 1233, 2199, 1232, 2201, 4029,
     4029, 2217, 2218, 2218, 2218, 2218, 4029, 2217, 1226, 1225,
     2201, 1223, 1221, 2218, 4029, 2219, 2219, 2219, 2219, 2218,

     2220, 2220, 2220, 2220, 1219, 2199, 2219, 2221, 2221, 2221,
     2221, 2220, 2219, 2284, 2284, 2284, 2284, 2220, 2221, 2222,
     2222, 2222, 2222, 1218, 2221, 1217, 2223, 2223, 2223, 2223,
     2222, 1215, 2225, 2225, 2225, 2225, 2222, 2223, 2224, 2224,
     2224, 2224, 2217, 2223, 1213, 1212, 1211, 2218, 1210, 2224,
     2227, 2227, 2227, 2227, 2219, 2224, 2225, 1208, 2225, 2226,
     2226, 2226, 2226, 2220, 2228, 2228, 2228, 2228, 1199, 1198,
     1197, 2225, 1194, 1193, 2227, 1192, 2227, 1191, 2229, 2229,
     2229, 2229, 2221, 2226, 1189, 2226, 1166, 2227, 2228, 1160,
     2228, 2223, 2222, 2230, 2230, 2230, 2230, 2231, 2231, 2231,

     2231, 2226, 2229, 4043, 2229, 2232, 2232, 2232, 2232, 1158,
     4043, 1156, 2224, 2233, 2233, 2233, 2233, 2230, 4043, 2230,
     2228, 2231, 1155, 2231, 2234, 2234, 2234, 2234, 1144, 2232,
     1133, 2232, 2236, 2236, 2236, 2236, 1129, 2233, 1103, 2233,
     2238, 2238, 2238, 2238, 2244, 2244, 2244, 2244, 2234, 2229,
     2234, 1099, 2231, 1084, 1082, 1060, 2236, 1059, 2236, 2237,
     2237, 2237, 2237, 1058, 2238, 2230, 2238, 4061, 2244, 4061,
     2244, 2289, 2289, 2289, 2289, 1056, 4061, 1043, 2232, 1042,
     2233, 1041, 1032, 2237, 4061, 2237, 1020, 2234, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,

     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 1009, 2238,
      998, 2236, 2244, 2235,  974, 2235, 2235, 2235, 2235, 2235,
     2239, 2239, 2239, 2239, 2240, 2240, 2240, 2240, 2242, 2242,
     2242, 2242, 2237, 2241, 2241, 2241, 2241,  930, 4054, 2235,
     2235, 2235, 2235, 4054, 2239, 4054, 2239,  924, 2240,  923,
     2240,  922, 2242, 4054, 2242,  899,  891, 2241,  883, 2241,
     2243, 2243, 2243, 2243, 2245, 2245, 2245, 2245, 2235, 2235,
     2235, 2235, 2246, 2246, 2246, 2246,  875, 2247, 2247, 2247,
     2247,  866, 4074, 2239, 2243,  856, 2243,  850, 2245, 4074,
     2245, 2248, 2248, 2248, 2248, 2240, 2246, 4074, 2246, 2242,

     2241, 2247,  845, 2247, 2249, 2249, 2249, 2249,  832, 2250,
     2250, 2250, 2250,  826,  815, 2248,  804, 2248, 2252, 2252,
     2252, 2252,  776, 2251, 2251, 2251, 2251,  775, 2249,  774,
     2249, 2245,  773, 2250, 2243, 2250, 2253, 2253, 2253, 2253,
      770,  766, 2252, 2246, 2252, 2247, 2248, 2251,  756, 2251,
      755, 2254, 2254, 2254, 2254,  754, 2255, 2255, 2255, 2255,
     2253,  753, 2253, 2256, 2256, 2256, 2256,  742, 2257, 2257,
     2257, 2257, 2249,  741, 2250, 2254,  740, 2254,  739, 2251,
     2255,  738, 2255, 2258, 2258, 2258, 2258, 2256,  737, 2256,
     2252, 2253, 2257,  706, 2257, 2259, 2259, 2259, 2259, 2280,

     2280, 2280, 2280, 2260, 2260, 2260, 2260, 2258,  681, 2258,
     2254, 2261, 2261, 2261, 2261, 2255,  675,  673,  672, 2259,
      650, 2259,  643, 2280,  628, 2257, 2256, 2260,  627, 2260,
     2262, 2262, 2262, 2262,  584, 2261,  572, 2261, 4062,  561,
     2257, 2263, 2263, 2263, 2263, 4062, 2258, 4062,  545,  543,
     2259,  536,  522, 4062, 2262,  520, 2262, 2264, 2264, 2264,
     2264, 2265, 2265, 2265, 2265, 2263, 2260, 2263, 2261,  506,
     2266, 2266, 2266, 2266, 2267, 2267, 2267, 2267,  497,  495,
      494, 2264,  493, 2264,  492, 2265, 4080, 2265, 2268, 2268,
     2268, 2268,  491, 4080, 2266, 2262, 2266,  490, 2267, 2263,

     2267, 4080, 2293, 2293, 2293, 2293, 2297,  438, 2263,  406,
      402,  398, 2268, 2293, 2268, 2297, 2297, 2297, 2297,  397,
      372,  370, 2265,  360, 2264, 2300, 2300, 2300, 2300, 2266,
     2301, 2301, 2301, 2301, 2302, 2302, 2302, 2302, 2316, 2316,
     2316, 2316, 2300, 2317, 2317, 2317, 2317, 2301, 2267, 2300,
      356, 2302,  322, 2305, 2301, 2316,  311,  293, 2302,  291,
      276, 2268, 2305, 2305, 2305, 2305, 2320, 2320, 2320, 2320,
     2339, 2340, 2340, 2340, 2340, 2341, 2341, 2341, 2341, 2339,
     2339, 2339, 2339, 2346, 2340, 2342, 2342, 2342, 2342,  253,
     4088, 2353, 2346, 2346, 2346, 2346,    0, 4088,    0, 2341,

     2353, 2353, 2353, 2353, 2356, 4088, 2302,    0, 2359, 2342,
        0,    0, 2362, 2356, 2356, 2356, 2356, 2359, 2359, 2359,
     2359, 2362, 2362, 2362, 2362, 2368, 2406, 2406, 2406, 2406,
        0,    0,    0, 2406, 2368, 2368, 2368, 2368, 2378, 2378,
        0,    0,    0, 2378,    0,    0, 2378, 2378, 2407, 2407,
     2407, 2407,    0,    0,    0, 2407, 2378,    0, 2378, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,

     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2390, 2390, 2390, 2401, 2401,    0,    0,    0, 2401,    0,
        0, 2401, 2401, 2403, 2403, 2403, 2403, 2404, 2404, 2404,
     2404, 2401,    0, 2401, 2403,    0,    0,    0, 2404, 2409,
     2409, 2409, 2409, 2412, 2412, 2412, 2412, 2403,    0,    0,
     4091, 2404, 2411, 2411, 2411, 2411, 2411, 4091,    0, 2411,
        0,    0,    0, 2409,    0, 4091,    0, 2412, 4105, 2413,

     2413, 2413, 2413,    0,    0, 4105, 2411, 4119, 2403, 2423,
     2423, 2423, 2423, 4105, 4119, 2404, 2413, 2438, 2438, 2438,
     2438,    0, 4119, 2413, 2468, 2468, 2468, 2468,    0,    0,
        0, 2468,    0, 2423,    0, 2469, 2469, 2469, 2469, 2553,
     2553, 2553, 2553,    0, 2473, 2473, 2473, 2473, 2468, 2470,
     2470, 2470, 2470,    0,    0,    0, 2473,    0, 2413, 2469,
        0,    0,    0, 2411, 2422, 2422, 2422, 2422, 2473, 2476,
     2422,    0,    0, 2470, 2476, 2470,    0, 2474, 2474, 2474,
     2474, 2476, 2476, 2476, 2476, 2476,    0,    0, 2422, 2474,
     2571, 2571, 2571, 2571, 2422,    0, 2438, 2477,    0,    0,

        0, 2474, 2477, 2474, 2557, 2557, 2557, 2557, 2422, 2477,
     2477, 2477, 2477, 2477, 2422, 2557,    0, 4125, 2422, 2422,
        0, 2422, 2422, 2422, 4125,    0,    0, 2422, 2422, 2422,
     2422, 2422, 4125, 2422,    0, 2422, 2422, 2422, 2422, 2422,
     2483, 2483, 2483, 2483, 2484, 2484, 2484, 2484, 4210,    0,
     4220, 2483, 4221,    0, 4210, 2484, 4220, 2483, 4221,    0,
        0, 2484, 2485, 2485, 2485, 2485, 2486, 2486, 2486, 2486,
     4210,    0, 4220, 2485, 4221,    0, 2557, 2486, 4210, 2485,
     4220,    0, 4221, 2486, 2487, 2487, 2487, 2487, 2488, 2488,
     2488, 2488,    0,    0,    0, 2487, 4118, 4118,    0, 2488,

        0, 2487,    0, 4118,    0, 2488, 2489, 2489, 2489, 2489,
        0, 4118, 2492, 2492, 2492, 2492, 2484, 2489,    0,    0,
        0, 2485,    0, 2489, 2490, 2490, 2490, 2490, 2491, 2491,
     2491, 2491,    0,    0,    0, 2490, 2492, 2486, 2492, 2491,
        0, 2490,    0, 2488,    0, 2491,    0, 2492, 2656, 2656,
     2656, 2656, 2487, 2493, 2493, 2493, 2493, 2494, 2494, 2494,
     2494, 2559, 2559, 2559, 2559, 2489, 2495, 2495, 2495, 2495,
        0, 4128, 2559,    0, 2489,    0, 4128, 2493, 4128, 2493,
     4135, 2494, 4135, 2494,    0,    0, 4128, 2490,    0, 4135,
     2495, 2491, 2495,    0,    0,    0, 2493, 4135, 2494, 2496,

     2496, 2496, 2496, 2497, 2497, 2497, 2497,    0, 2498, 2498,
     2498, 2498, 2499, 2499, 2499, 2499, 2500, 2500, 2500, 2500,
        0,    0,    0, 2496,    0, 2496, 4151, 2497,    0, 2497,
        0, 2495, 2498, 4151, 2498,    0, 2499,    0, 2499,    0,
     2500, 4151, 2500, 2501, 2501, 2501, 2501, 2503, 2503, 2503,
     2503,    0,    0,    0, 2496, 2506, 2506, 2506, 2506, 2507,
     2507, 2507, 2507, 2509, 2509, 2509, 2509, 2501,    0, 2501,
        0, 2503,    0, 2503,    0, 2500,    0,    0,    0, 2506,
     2498, 2506, 2497, 2507,    0, 2507,    0, 2509,    0, 2509,
        0, 2510, 2510, 2510, 2510, 2511, 2511, 2511, 2511, 2512,

     2512, 2512, 2512, 2513, 2513, 2513, 2513,    0,    0,    0,
     2501, 2514, 2514, 2514, 2514, 2510, 2507, 2510,    0, 2511,
        0, 2511,    0, 2512,    0, 2512,    0, 2513,    0, 2513,
        0, 2507,    0,    0,    0, 2514,    0, 2514,    0, 2515,
     2515, 2515, 2515, 2516, 2516, 2516, 2516, 2517, 2517, 2517,
     2517,    0, 2511, 2518, 2518, 2518, 2518, 2519, 2519, 2519,
     2519, 2513,    0, 2515, 2510, 2515, 2512, 2516,    0, 2516,
        0, 2517,    0, 2517, 2514,    0,    0, 2518,    0, 2518,
        0, 2519,    0, 2519,    0, 2520, 2520, 2520, 2520,    0,
     2521, 2521, 2521, 2521,    0,    0,    0, 2515, 2522, 2522,

     2522, 2522, 2572, 2572, 2572, 2572, 2517,    0, 4159, 2520,
     2516, 2520,    0, 2518, 2521, 4159, 2521,    0, 4182,    0,
     2518,    0, 2522, 4159, 2522, 4182, 2519, 2523, 2523, 2523,
     2523,    0,    0, 4182, 2524, 2524, 2524, 2524, 2525, 2525,
     2525, 2525, 2526, 2526, 2526, 2526,    0,    0, 2521,    0,
        0, 2523, 4196, 2523,    0,    0, 2520, 2522, 2524, 4196,
     2524,    0, 2525,    0, 2525, 2572, 2526, 4196, 2526, 2527,
     2527, 2527, 2527, 2528, 2528, 2528, 2528,    0, 2531, 2531,
     2531, 2531, 2532, 2532, 2532, 2532, 2533, 2533, 2533, 2533,
        0,    0, 2523, 2527, 4206, 2527,    0, 2528,    0, 2528,

        0, 4206, 2531, 2524, 2531,    0, 2532,    0, 2532, 4206,
     2533, 2525, 2533, 2526, 2534, 2534, 2534, 2534, 2535, 2535,
     2535, 2535, 2536, 2536, 2536, 2536, 2527,    0,    0,    0,
     2528, 2537, 2537, 2537, 2537,    0,    0,    0, 2534,    0,
     2534,    0, 2535, 2533, 2535,    0, 2536, 2532, 2536, 2531,
     2538, 2538, 2538, 2538,    0, 2537,    0, 2537, 2539, 2539,
     2539, 2539,    0,    0, 2540, 2540, 2540, 2540, 2541, 2541,
     2541, 2541,    0, 2535, 2538,    0, 2538, 2542, 2542, 2542,
     2542, 2536, 2539,    0, 2539,    0, 2537, 2534, 2540,    0,
     2540,    0, 2541, 4213, 2541, 2566, 2566, 2566, 2566,    0,

     4213, 2542,    0, 2542, 2595, 2595, 2595, 2595, 4213,    0,
        0, 2595, 2566, 2670, 2670, 2670, 2670, 2595,    0, 2566,
        0, 4215,    0, 2541, 2649, 2649, 2649, 2649, 4215, 2538,
     2650, 2650, 2650, 2650,    0, 2649, 4215, 2540,    0,    0,
     2542, 2650, 2652, 2652, 2652, 2652, 2652,    0, 2649, 2652,
     2653, 2653, 2653, 2653, 2650, 2659, 2659, 2659, 2659, 2672,
     2672, 2672, 2672,    0, 2566, 4216, 2652, 2653, 2675, 2675,
     2675, 2675, 4216,    0, 2653, 2674, 2674, 2674, 2674, 2659,
     4216, 2649, 2697, 2697, 2697, 2697, 2703, 2703, 2703, 2703,
        0,    0, 2670, 2703,    0,    0,    0, 2704, 2704, 2704,

     2704,    0,    0,    0, 2704,    0, 2704,    0,    0, 2650,
     2704, 2706, 2706, 2706, 2706,    0, 2653, 2709, 2709, 2709,
     2709, 2704, 4222, 2652, 2658, 2658, 2658, 2658, 2709, 4222,
     2658,    0, 2674,    0, 2709, 2706,    0, 4222, 2710, 2710,
     2710, 2710, 2711, 2711, 2711, 2711,    0, 2674, 2658, 2710,
     2704, 4223,    0, 2711, 2658, 2710,    0,    0, 4223, 2711,
        0, 2697, 2770, 2770, 2770, 2770, 4223,    0, 2658, 2712,
     2712, 2712, 2712,    0, 2658,    0,    0,    0, 2658, 2658,
     2712, 2658, 2658, 2658,    0,    0, 2712, 2658, 2658, 2658,
     2658, 2658,    0, 2658,    0, 2658, 2658, 2658, 2658, 2658,

        0,    0, 2711,    0, 2710, 2713, 2713, 2713, 2713, 2714,
     2714, 2714, 2714,    0,    0,    0, 2713,    0,    0,    0,
     2714,    0, 2713,    0,    0,    0, 2714, 2715, 2715, 2715,
     2715, 2716, 2716, 2716, 2716,    0, 2712,    0, 2715,    0,
        0,    0, 2716,    0, 2715,    0,    0,    0, 2716,    0,
     2717, 2717, 2717, 2717,    0,    0, 2718, 2718, 2718, 2718,
        0, 2717, 2777, 2777, 2777, 2777, 2714, 2717, 2719, 2719,
     2719, 2719,    0, 2720, 2720, 2720, 2720,    0, 2713,    0,
     2718,    0, 2718,    0, 2715,    0,    0,    0, 2716, 2718,
        0,    0, 2719,    0, 2719,    0,    0, 2720,    0, 2720,

        0,    0,    0, 2719, 2720, 2721, 2721, 2721, 2721, 2722,
     2722, 2722, 2722, 2723, 2723, 2723, 2723, 2725, 2725, 2725,
     2725, 2717, 2726, 2726, 2726, 2726,    0,    0,    0, 2721,
        0, 2721,    0, 2722,    0, 2722,    0, 2723,    0, 2723,
        0, 2725,    0, 2725,    0,    0, 2726,    0, 2726, 2727,
     2727, 2727, 2727,    0, 2728, 2728, 2728, 2728,    0,    0,
     2727, 2731, 2731, 2731, 2731,    0, 2722,    0, 2721,    0,
        0,    0, 2726, 2727,    0, 2727,    0,    0, 2728, 2726,
     2728, 2726,    0,    0,    0, 2731,    0, 2731,    0, 2725,
     2732, 2732, 2732, 2732, 2726,    0, 2726, 2733, 2733, 2733,

     2733,    0, 2734, 2734, 2734, 2734,    0, 2734, 2735, 2735,
     2735, 2735,    0,    0, 2732,    0, 2732, 2736, 2736, 2736,
     2736, 2733,    0, 2733,    0,    0, 2734, 2728, 2734,    0,
        0,    0, 2735,    0, 2735, 2737, 2737, 2737, 2737,    0,
        0, 2736,    0, 2736, 2738, 2738, 2738, 2738,    0, 2739,
     2739, 2739, 2739, 2732,    0, 2740, 2740, 2740, 2740, 2737,
     2733, 2737, 2741, 2741, 2741, 2741,    0,    0, 2738,    0,
     2738,    0,    0, 2739, 2736, 2739,    0,    0,    0, 2740,
        0, 2740, 2742, 2742, 2742, 2742, 2741,    0, 2741, 2743,
     2743, 2743, 2743,    0, 2737,    0, 2744, 2744, 2744, 2744,

     2745, 2745, 2745, 2745,    0,    0, 2742,    0, 2742, 2738,
     2740,    0,    0, 2743,    0, 2743,    0, 2741,    0,    0,
     2744,    0, 2744,    0, 2745,    0, 2745, 2746, 2746, 2746,
     2746,    0, 2747, 2747, 2747, 2747, 2748, 2748, 2748, 2748,
     2749, 2749, 2749, 2749,    0, 2750, 2750, 2750, 2750,    0,
        0, 2746,    0, 2746,    0,    0, 2747,    0, 2747,    0,
     2748,    0, 2748,    0, 2749,    0, 2749, 2743, 2744, 2750,
        0, 2750, 2751, 2751, 2751, 2751, 2754, 2754, 2754, 2754,
     2755, 2755, 2755, 2755,    0,    0, 2746, 2747, 2756, 2756,
     2756, 2756,    0,    0,    0, 2748, 2751,    0, 2751,    0,

     2754,    0, 2754,    0, 2755,    0, 2755, 2757, 2757, 2757,
     2757,    0, 2756, 2749, 2756,    0, 2751,    0, 2750, 2758,
     2758, 2758, 2758, 2759, 2759, 2759, 2759, 2760, 2760, 2760,
     2760, 2757,    0, 2757,    0, 2754, 2761, 2761, 2761, 2761,
        0,    0,    0, 2758, 2751, 2758,    0, 2759,    0, 2759,
        0, 2760, 2755, 2760, 2763, 2763, 2763, 2763,    0,    0,
     2761,    0, 2761, 2764, 2764, 2764, 2764,    0,    0,    0,
     2765, 2765, 2765, 2765, 2766, 2766, 2766, 2766, 2763,    0,
     2763,    0,    0, 2759,    0,    0, 2757, 2764,    0, 2764,
        0,    0, 2758, 2760, 2765,    0, 2765,    0, 2766,    0,

     2766, 2767, 2767, 2767, 2767, 2774, 2774, 2774, 2774,    0,
     2779, 2779, 2779, 2779,    0,    0, 2774,    0,    0,    0,
     2764, 2779,    0,    0,    0, 2767,    0, 2767, 2780, 2780,
     2780, 2780,    0,    0,    0, 2764,    0,    0,    0, 2766,
     2781, 2781, 2781, 2781, 2783, 2783, 2783, 2783, 2765,    0,
        0, 2781, 2786, 2786, 2786, 2786, 2788, 2788, 2788, 2788,
     2841, 2841, 2841, 2841,    0,    0, 2767,    0,    0, 2786,
        0, 2841, 2842, 2842, 2842, 2842, 2786, 2774, 2845, 2845,
     2845, 2845,    0, 2842, 2841, 2846, 2846, 2846, 2846, 2848,
     2848, 2848, 2848,    0,    0, 2845, 2842, 2849, 2849, 2849,

     2849,    0, 2845, 2850, 2850, 2850, 2850, 2786, 2851, 2851,
     2851, 2851, 2863, 2863, 2863, 2863, 2865, 2865, 2865, 2865,
        0, 2788, 2867, 2867, 2867, 2867, 2870, 2870, 2870, 2870,
        0,    0, 2851, 2841,    0,    0,    0, 2845, 2872, 2872,
     2872, 2872,    0, 2875, 2875, 2875, 2875, 2878, 2878, 2878,
     2878, 2842, 2884, 2884, 2884, 2884, 2886, 2886, 2886, 2886,
     2887, 2887, 2887, 2887,    0,    0, 2865, 2875, 2890, 2890,
     2890, 2890,    0, 2865,    0, 2865, 2884,    0, 2897, 2897,
     2897, 2897,    0, 2898, 2898, 2898, 2898,    0, 2865, 2897,
     2865,    0,    0,    0, 2898, 2897, 2884,    0,    0,    0,

     2898, 2899, 2899, 2899, 2899, 2900, 2900, 2900, 2900,    0,
        0,    0, 2899,    0,    0,    0, 2900,    0, 2899,    0,
        0,    0, 2900,    0, 2884, 2901, 2901, 2901, 2901, 2902,
     2902, 2902, 2902,    0,    0,    0, 2901, 2897, 2898, 2887,
     2902,    0, 2901,    0,    0,    0, 2902,    0, 2903, 2903,
     2903, 2903, 2904, 2904, 2904, 2904, 2899,    0,    0, 2903,
        0,    0,    0, 2904, 2900, 2903,    0,    0,    0, 2904,
     2905, 2905, 2905, 2905,    0, 2906, 2906, 2906, 2906, 2907,
     2907, 2907, 2907, 2908, 2908, 2908, 2908,    0, 2909, 2909,
     2909, 2909,    0,    0, 2905,    0, 2905, 2902, 2901, 2906,

        0, 2906,    0, 2907,    0, 2907,    0, 2908,    0, 2908,
        0, 2904, 2909,    0, 2909,    0,    0, 2905,    0, 2907,
     2906, 2910, 2910, 2910, 2910, 2913, 2913, 2913, 2913, 2914,
     2914, 2914, 2914,    0, 2914,    0, 2913,    0,    0, 2914,
     2915, 2915, 2915, 2915,    0, 2910,    0, 2910,    0, 2913,
        0, 2913,    0,    0,    0, 2908, 2918, 2918, 2918, 2918,
        0, 2909,    0,    0, 2915,    0, 2915, 2919, 2919, 2919,
     2919, 2920, 2920, 2920, 2920,    0, 2920,    0,    0,    0,
     2918,    0, 2918,    0, 2922, 2922, 2922, 2922,    0,    0,
        0, 2919,    0, 2919,    0, 2920,    0, 2920,    0, 2915,

        0, 2923, 2923, 2923, 2923,    0,    0,    0, 2922,    0,
     2922,    0,    0, 2925, 2925, 2925, 2925,    0, 2926, 2926,
     2926, 2926,    0,    0, 2918, 2923,    0, 2923, 2927, 2927,
     2927, 2927,    0, 2930, 2930, 2930, 2930, 2925,    0, 2925,
     2919, 2922, 2926,    0, 2926, 2958, 2958, 2958, 2958,    0,
        0,    0, 2927,    0, 2927,    0, 2922, 2930, 2922, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924,
     2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2924, 2928,
     2928, 2928, 2928,    0, 2924, 2927, 2924, 2924, 2924, 2924,
     2924, 2925, 2929, 2929, 2929, 2929, 2931, 2931, 2931, 2931,

        0,    0,    0, 2928,    0, 2928, 2932, 2932, 2932, 2932,
     2924, 2924, 2924, 2924, 2924,    0, 2929,    0, 2929,    0,
     2931,    0, 2931, 2933, 2933, 2933, 2933,    0,    0,    0,
     2932,    0, 2932, 2934, 2934, 2934, 2934,    0,    0, 2924,
     2924, 2924, 2924,    0, 2928,    0,    0, 2933,    0, 2933,
     2935, 2935, 2935, 2935,    0,    0,    0, 2934,    0, 2934,
     2936, 2936, 2936, 2936, 2937, 2937, 2937, 2937,    0, 2938,
     2938, 2938, 2938,    0, 2935,    0, 2935, 2939, 2939, 2939,
     2939,    0,    0,    0, 2936,    0, 2936,    0, 2937,    0,
     2937,    0,    0, 2938,    0, 2938, 2940, 2940, 2940, 2940,

        0, 2939,    0, 2939, 2936,    0,    0, 2935,    0, 2941,
     2941, 2941, 2941, 2942, 2942, 2942, 2942,    0,    0,    0,
     2940, 2939, 2946, 2946, 2946, 2946,    0, 2937, 2938,    0,
        0,    0, 2936, 2941,    0, 2941,    0, 2942,    0, 2942,
        0,    0, 2937,    0,    0,    0, 2946,    0, 2946, 2939,
     2947, 2947, 2947, 2947,    0, 2948, 2948, 2948, 2948, 2950,
     2950, 2950, 2950, 2941, 2951, 2951, 2951, 2951, 2952, 2952,
     2952, 2952,    0,    0, 2947,    0, 2947,    0, 2942, 2948,
        0, 2948,    0, 2950,    0, 2950,    0,    0, 2951,    0,
     2951,    0, 2952,    0, 2952, 2955, 2955, 2955, 2955, 2956,

     2956, 2956, 2956,    0, 2957, 2957, 2957, 2957,    0, 2961,
     2961, 2961, 2961, 2962, 2962, 2962, 2962,    0, 2950, 2955,
     2961, 2955,    0, 2956,    0, 2956,    0, 2952, 2957,    0,
     2957, 2963, 2963, 2963, 2963, 2967, 2967, 2967, 2967, 2969,
     2969, 2969, 2969,    0,    0,    0, 2967, 2970, 2970, 2970,
     2970, 2973, 2973, 2973, 2973, 2974, 2974, 2974, 2974, 3019,
     3019, 3019, 3019, 2957, 2955,    0,    0,    0, 2973, 3020,
     3020, 3020, 3020,    0,    0, 2973, 3019, 3022, 3022, 3022,
     3022,    0,    0, 3019, 3023, 3023, 3023, 3023, 3024, 3024,
     3024, 3024, 3031, 3031, 3031, 3031, 3036, 3036, 3036, 3036,

     3040, 3040, 3040, 3040, 3042, 3042, 3042, 3042, 2973,    0,
        0,    0, 3024,    0, 2974, 3045, 3045, 3045, 3045, 3046,
     3046, 3046, 3046,    0,    0,    0, 3019, 3047, 3047, 3047,
     3047, 3048, 3048, 3048, 3048, 3049, 3049, 3049, 3049, 3045,
     3050, 3050, 3050, 3050, 3052, 3052, 3052, 3052, 3055, 3055,
     3055, 3055,    0,    0,    0, 3048, 3056, 3056, 3056, 3056,
     3059, 3059, 3059, 3059, 3060, 3060, 3060, 3060, 3052,    0,
        0,    0, 3055, 3061, 3061, 3061, 3061, 3062, 3062, 3062,
     3062,    0,    0,    0, 3059,    0,    0,    0, 3052,    0,
        0,    0, 3055, 3065, 3065, 3065, 3065, 3068, 3068, 3068,

     3068, 3069, 3069, 3069, 3069,    0,    0,    0, 3068,    0,
        0,    0, 3069,    0, 3068,    0, 3052,    0, 3069,    0,
     3055, 3070, 3070, 3070, 3070, 3071, 3071, 3071, 3071,    0,
        0,    0, 3070,    0,    0,    0, 3071,    0, 3070,    0,
        0,    0, 3071, 3072, 3072, 3072, 3072,    0, 3073, 3073,
     3073, 3073,    0,    0, 3072,    0,    0,    0, 3069, 3073,
     3072,    0,    0,    0, 3068, 3073, 3074, 3074, 3074, 3074,
     3075, 3075, 3075, 3075,    0,    0,    0, 3074,    0,    0,
        0, 3075, 3076, 3076, 3076, 3076, 3070, 3075, 3077, 3077,
     3077, 3077, 3078, 3078, 3078, 3078, 3079, 3079, 3079, 3079,

        0,    0, 3072,    0,    0,    0, 3076,    0, 3076,    0,
        0,    0, 3077, 3073, 3077,    0, 3078,    0, 3078,    0,
     3079,    0, 3079, 3080, 3080, 3080, 3080,    0, 3075, 3081,
     3081, 3081, 3081,    0,    0, 3077,    0,    0, 3078,    0,
     3083, 3083, 3083, 3083,    0, 3083,    0, 3080,    0, 3080,
     3083,    0,    0, 3081,    0, 3081,    0,    0, 3079, 3085,
     3085, 3085, 3085,    0, 3088, 3088, 3088, 3088, 3089, 3089,
     3089, 3089, 3094, 3094, 3094, 3094, 3096, 3096, 3096, 3096,
        0,    0,    0, 3085,    0, 3085,    0,    0, 3088,    0,
     3088,    0, 3089,    0, 3089,    0, 3094,    0, 3094,    0,

     3096,    0, 3096, 3097, 3097, 3097, 3097,    0, 3098, 3098,
     3098, 3098, 3099, 3099, 3099, 3099, 3100, 3100, 3100, 3100,
        0, 3101, 3101, 3101, 3101,    0,    0, 3097,    0, 3097,
     3085, 3088, 3098,    0, 3098,    0, 3099,    0, 3099, 3102,
     3102, 3102, 3102,    0, 3096, 3101,    0, 3101, 3103, 3103,
     3103, 3103, 3104, 3104, 3104, 3104, 3105, 3105, 3105, 3105,
        0,    0,    0, 3102,    0, 3102,    0, 3098, 3106, 3106,
     3106, 3106, 3103,    0, 3103,    0, 3104,    0, 3104,    0,
     3105,    0, 3105, 3107, 3107, 3107, 3107,    0, 3108, 3108,
     3108, 3108, 3106, 3109, 3109, 3109, 3109,    0,    0,    0,

     3105, 3110, 3110, 3110, 3110,    0,    0, 3107,    0, 3107,
        0, 3104, 3108,    0, 3108,    0,    0, 3109,    0, 3109,
     3111, 3111, 3111, 3111,    0, 3110,    0, 3110, 3105, 3112,
     3112, 3112, 3112, 3113, 3113, 3113, 3113, 3107, 3114, 3114,
     3114, 3114,    0,    0, 3111,    0, 3111, 3117, 3117, 3117,
     3117,    0, 3109, 3108,    0,    0,    0, 3113,    0, 3113,
        0,    0, 3114,    0, 3114, 3118, 3118, 3118, 3118,    0,
        0, 3117,    0, 3117, 3119, 3119, 3119, 3119, 3111, 3113,
        0, 3120, 3120, 3120, 3120, 3121, 3121, 3121, 3121, 3118,
        0, 3118, 3124, 3124, 3124, 3124,    0,    0, 3119, 3125,

     3125, 3125, 3125,    0,    0, 3120, 3114, 3120,    0, 3121,
        0, 3121,    0,    0,    0, 3117, 3124,    0, 3124, 3126,
     3126, 3126, 3126, 3125,    0, 3125, 3130, 3130, 3130, 3130,
        0, 3120, 3131, 3131, 3131, 3131,    0,    0, 3120,    0,
     3120, 3132, 3132, 3132, 3132, 3134, 3134, 3134, 3134,    0,
        0, 3124,    0, 3120,    0, 3120, 3120, 3149, 3149, 3149,
     3149,    0, 3134, 3169, 3169, 3169, 3169,    0,    0, 3134,
     3170, 3170, 3170, 3170, 3171, 3171, 3171, 3171,    0,    0,
     3169,    0,    0,    0, 3126,    0,    0, 3169, 3172, 3172,
     3172, 3172, 3176, 3176, 3176, 3176, 3179, 3179, 3179, 3179,

     3183, 3183, 3183, 3183, 3134, 3184, 3184, 3184, 3184,    0,
        0,    0, 3172, 3187, 3187, 3187, 3187, 3188, 3188, 3188,
     3188, 3190, 3190, 3190, 3190, 3191, 3191, 3191, 3191, 3192,
     3192, 3192, 3192,    0,    0,    0, 3169, 3193, 3193, 3193,
     3193, 3195, 3195, 3195, 3195, 3190, 3196, 3196, 3196, 3196,
        0,    0,    0, 3192, 3200, 3200, 3200, 3200, 3204, 3204,
     3204, 3204,    0,    0,    0, 3195, 3205, 3205, 3205, 3205,
     3206, 3206, 3206, 3206, 3207, 3207, 3207, 3207, 3209, 3209,
     3209, 3209, 3204,    0,    0, 3195, 3210, 3210, 3210, 3210,
     3211, 3211, 3211, 3211,    0,    0,    0, 3210,    0,    0,

        0, 3211,    0, 3210,    0,    0,    0, 3211, 3212, 3212,
     3212, 3212,    0, 3195,    0, 3213, 3213, 3213, 3213, 3212,
     3206, 3214, 3214, 3214, 3214, 3212, 3213, 3206,    0, 3206,
        0,    0, 3214,    0, 3217, 3217, 3217, 3217, 3214,    0,
        0,    0, 3206,    0, 3206, 3206,    0,    0,    0, 3211,
     3215, 3215, 3215, 3215, 3216, 3216, 3216, 3216, 3217, 3210,
     3217, 3215,    0,    0,    0, 3216,    0, 3215,    0,    0,
        0, 3216, 3218, 3218, 3218, 3218,    0,    0,    0, 3214,
        0,    0,    0, 3217, 3219, 3219, 3219, 3219, 3220, 3220,
     3220, 3220, 3223, 3223, 3223, 3223, 3218,    0, 3218, 3224,

     3224, 3224, 3224, 3225, 3225, 3225, 3225,    0, 3219,    0,
     3219,    0, 3220,    0, 3220,    0, 3223,    0, 3223, 3231,
     3231, 3231, 3231, 3224,    0, 3224, 3232, 3232, 3232, 3232,
        0, 3218, 3233, 3233, 3233, 3233, 3234, 3234, 3234, 3234,
        0,    0,    0, 3231,    0, 3231,    0,    0, 3220,    0,
     3232,    0, 3232,    0,    0,    0, 3233,    0, 3233,    0,
     3234,    0, 3234, 3235, 3235, 3235, 3235, 3237, 3237, 3237,
     3237,    0, 3245, 3245, 3245, 3245, 3248, 3248, 3248, 3248,
        0,    0, 3225,    0,    0,    0, 3231, 3235, 3236, 3236,
     3236, 3236, 3236, 3236, 3236, 3236, 3236, 3236, 3236, 3236,

     3236, 3236, 3236, 3236, 3236, 3236, 3236, 3236, 3238, 3238,
     3238, 3238,    0, 3236, 3236, 3236, 3236, 3236, 3236, 3236,
     3239, 3239, 3239, 3239, 3240, 3240, 3240, 3240, 3256, 3256,
     3256, 3256, 3238,    0, 3238, 3241, 3241, 3241, 3241, 3236,
     3236, 3236, 3236,    0, 3239,    0, 3239,    0, 3240,    0,
     3240, 3245,    0,    0, 3238, 3242, 3242, 3242, 3242, 3241,
        0, 3241,    0, 3243, 3243, 3243, 3243,    0, 3236, 3236,
     3236, 3236,    0,    0, 3244, 3244, 3244, 3244,    0, 3242,
        0, 3242, 3247, 3247, 3247, 3247,    0, 3243, 3239, 3243,
     3251, 3251, 3251, 3251,    0,    0, 3240,    0, 3244, 3242,

     3244,    0,    0, 3243,    0,    0, 3247,    0, 3247, 3254,
     3254, 3254, 3254,    0, 3251,    0, 3251, 3257, 3257, 3257,
     3257, 3258, 3258, 3258, 3258,    0,    0, 3242, 3259, 3259,
     3259, 3259,    0, 3254,    0, 3254, 3260, 3260, 3260, 3260,
     3261, 3261, 3261, 3261,    0,    0,    0, 3244,    0, 3247,
     3262, 3262, 3262, 3262, 3263, 3263, 3263, 3263, 3272, 3272,
     3272, 3272, 3288, 3288, 3288, 3288, 3289, 3289, 3289, 3289,
        0, 3263, 3290, 3290, 3290, 3290,    0,    0, 3263, 3288,
     3291, 3291, 3291, 3291,    0,    0, 3288, 3294, 3294, 3294,
     3294, 3295, 3295, 3295, 3295, 3297, 3297, 3297, 3297, 3298,

     3298, 3298, 3298,    0, 3291, 3300, 3300, 3300, 3300, 3302,
     3302, 3302, 3302, 3303, 3303, 3303, 3303, 3304, 3304, 3304,
     3304, 3305, 3305, 3305, 3305, 3306, 3306, 3306, 3306, 3307,
     3307, 3307, 3307,    0, 3288, 3308, 3308, 3308, 3308, 3312,
     3312, 3312, 3312, 3313, 3313, 3313, 3313,    0,    0, 3306,
     3316, 3316, 3316, 3316, 3317, 3317, 3317, 3317, 3318, 3318,
     3318, 3318, 3319, 3319, 3319, 3319,    0, 3313,    0, 3318,
        0,    0,    0, 3319,    0, 3318,    0,    0,    0, 3319,
     3320, 3320, 3320, 3320,    0,    0,    0, 3313,    0,    0,
        0, 3320, 3321, 3321, 3321, 3321, 3322, 3322, 3322, 3322,

        0,    0,    0, 3321,    0,    0,    0, 3322,    0, 3321,
        0,    0,    0, 3318,    0, 3313, 3323, 3323, 3323, 3323,
     3324, 3324, 3324, 3324,    0,    0,    0, 3323, 3325, 3325,
     3325, 3325, 3326, 3326, 3326, 3326, 3327, 3327, 3327, 3327,
     3329, 3329, 3329, 3329, 3324,    0, 3324, 3330, 3330, 3330,
     3330,    0, 3325,    0, 3325,    0, 3326,    0, 3326, 3336,
     3336, 3336, 3336,    0, 3329,    0, 3329, 3337, 3337, 3337,
     3337, 3338, 3338, 3338, 3338, 3339, 3339, 3339, 3339, 3344,
     3344, 3344, 3344, 3336,    0, 3336, 3325, 3326,    0,    0,
        0, 3337,    0, 3337,    0, 3338,    0, 3338, 3345, 3345,

     3345, 3345,    0, 3344,    0, 3344, 3347, 3347, 3347, 3347,
     3349, 3349, 3349, 3349,    0, 3327, 3336, 3354, 3354, 3354,
     3354,    0, 3345,    0, 3345,    0, 3330,    0, 3338,    0,
     3347,    0, 3347,    0, 3349,    0,    0,    0, 3345, 3362,
     3362, 3362, 3362, 3338, 3341, 3341, 3341, 3341, 3341, 3341,
     3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341,
     3341, 3341, 3341, 3341, 3384, 3384, 3384, 3384,    0, 3341,
     3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341,
     3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341,
     3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341,

     3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341,
     3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341,
     3341, 3341, 3341, 3341, 3341, 3341, 3341, 3341, 3346, 3346,
     3346, 3346, 3348, 3348, 3348, 3348, 3350, 3350, 3350, 3350,
     3351, 3351, 3351, 3351, 3352, 3352, 3352, 3352, 3353, 3353,
     3353, 3353, 3346,    0, 3346,    0, 3348,    0, 3348,    0,
     3350,    0, 3350,    0, 3351,    0, 3351,    0, 3352,    0,
     3352,    0, 3353,    0, 3353,    0, 3348, 3356, 3356, 3356,
     3356,    0, 3357, 3357, 3357, 3357, 3352,    0,    0,    0,
     3350,    0, 3363, 3363, 3363, 3363,    0, 3383, 3383, 3383,

     3383, 3346,    0,    0, 3348, 3351, 3357,    0, 3357, 3363,
     3385, 3385, 3385, 3385, 3383,    0, 3363,    0,    0,    0,
     3353, 3383, 3387, 3387, 3387, 3387, 3388, 3388, 3388, 3388,
     3389, 3389, 3389, 3389, 3385, 3390, 3390, 3390, 3390, 3357,
     3391, 3391, 3391, 3391, 3394, 3394, 3394, 3394, 3395, 3395,
     3395, 3395, 3396, 3396, 3396, 3396, 3356, 3397, 3397, 3397,
     3397, 3400, 3400, 3400, 3400,    0, 3401, 3401, 3401, 3401,
     3402, 3402, 3402, 3402,    0, 3407, 3407, 3407, 3407,    0,
     3408, 3408, 3408, 3408,    0, 3400, 3407,    0,    0,    0,
     3401, 3408, 3407, 3409, 3409, 3409, 3409, 3410, 3410, 3410,

     3410,    0,    0,    0, 3409, 3411, 3411, 3411, 3411, 3396,
     3401, 3415, 3415, 3415, 3415, 3419, 3419, 3419, 3419,    0,
        0, 3410,    0, 3410, 3396, 3420, 3420, 3420, 3420, 3421,
     3421, 3421, 3421,    0,    0, 3415,    0, 3415, 3401,    0,
        0,    0, 3419, 3422, 3422, 3422, 3422,    0, 3407,    0,
        0,    0, 3420, 3421, 3410, 3421, 3423, 3423, 3423, 3423,
     3424, 3424, 3424, 3424,    0,    0,    0, 3422,    0, 3422,
     3415, 3421, 3425, 3425, 3425, 3425, 3426, 3426, 3426, 3426,
     3423,    0, 3423,    0, 3424, 3427, 3427, 3427, 3427,    0,
     3428, 3428, 3428, 3428, 3429, 3429, 3429, 3429,    0,    0,

     3426,    0, 3426, 3430, 3430, 3430, 3430,    0,    0, 3427,
        0, 3427,    0,    0, 3428, 3422, 3428,    0, 3429,    0,
     3429,    0, 3426, 3432, 3432, 3432, 3432, 3433, 3433, 3433,
     3433, 3445, 3445, 3445, 3445,    0,    0, 3428, 3446, 3446,
     3446, 3446, 3447, 3447, 3447, 3447,    0, 3432,    0, 3432,
        0,    0,    0, 3427,    0, 3445, 3449, 3449, 3449, 3449,
     3450, 3450, 3450, 3450,    0,    0, 3447, 3454, 3454, 3454,
     3454, 3455, 3455, 3455, 3455, 3459, 3459, 3459, 3459,    0,
        0,    0, 3432, 3460, 3460, 3460, 3460, 3462, 3462, 3462,
     3462, 3454,    0,    0, 3460, 3461, 3461, 3461, 3461, 3459,

     3460, 3466, 3466, 3466, 3466,    0, 3433, 3467, 3467, 3467,
     3467, 3469, 3469, 3469, 3469, 3470, 3470, 3470, 3470, 3461,
        0, 3461, 3471, 3471, 3471, 3471,    0,    0, 3466, 3472,
     3472, 3472, 3472,    0, 3467, 3469,    0, 3469,    0, 3470,
        0, 3470, 3473, 3473, 3473, 3473, 3460, 3474, 3474, 3474,
     3474,    0,    0, 3472, 3461, 3472,    0,    0, 3469, 3475,
     3475, 3475, 3475,    0,    0,    0, 3473,    0, 3473, 3472,
        0, 3474,    0, 3474, 3476, 3476, 3476, 3476, 3477, 3477,
     3477, 3477,    0, 3475,    0, 3475, 3479, 3479, 3479, 3479,
        0,    0,    0, 3474, 3487, 3487, 3487, 3487, 3476, 3488,

     3488, 3488, 3488, 3492, 3492, 3492, 3492, 3496, 3496, 3496,
     3496, 3497, 3497, 3497, 3497, 3473,    0, 3498, 3498, 3498,
     3498,    0,    0, 3488,    0,    0,    0, 3492, 3498,    0,
        0, 3496,    0,    0, 3498, 3499, 3499, 3499, 3499,    0,
     3502, 3502, 3502, 3502, 3503, 3503, 3503, 3503, 3504, 3504,
     3504, 3504, 3505, 3505, 3505, 3505, 3506, 3506, 3506, 3506,
     3507, 3507, 3507, 3507, 3502, 3479, 3502,    0, 3503,    0,
     3503,    0, 3504,    0,    0,    0, 3505,    0, 3505,    0,
     3506,    0, 3506,    0,    0, 3498, 3502, 3508, 3508, 3508,
     3508,    0,    0,    0, 3505, 3513, 3513, 3513, 3513, 3514,

     3514, 3514, 3514, 3517, 3517, 3517, 3517, 3518, 3518, 3518,
     3518,    0,    0, 3521, 3521, 3521, 3521, 3524, 3524, 3524,
     3524,    0,    0, 3514, 3521,    0,    0, 3517, 3506,    0,
     3521, 3525, 3525, 3525, 3525, 3526, 3526, 3526, 3526, 3528,
     3528, 3528, 3528, 3529, 3529, 3529, 3529, 3532, 3532, 3532,
     3532, 3533, 3533, 3533, 3533, 3525,    0, 3525,    0, 3526,
        0, 3526, 3533, 3534, 3534, 3534, 3534, 3529, 3533,    0,
        0, 3532, 3536, 3536, 3536, 3536,    0,    0, 3525,    0,
     3521, 3537, 3537, 3537, 3537, 3538, 3538, 3538, 3538, 3540,
     3540, 3540, 3540,    0,    0,    0, 3536,    0, 3536, 3541,

     3541, 3541, 3541,    0,    0, 3537,    0, 3537,    0, 3538,
     3542, 3542, 3542, 3542, 3544, 3544, 3544, 3544, 3536, 3545,
     3545, 3545, 3545, 3541, 3546, 3546, 3546, 3546, 3547, 3547,
     3547, 3547,    0,    0,    0, 3546,    0,    0, 3544,    0,
        0,    0, 3534, 3549, 3549, 3549, 3549, 3550, 3550, 3550,
     3550, 3551, 3551, 3551, 3551, 3552, 3552, 3552, 3552, 3553,
     3553, 3553, 3553, 3554, 3554, 3554, 3554, 3555, 3555, 3555,
     3555, 3557, 3557, 3557, 3557,    0,    0,    0, 3551, 3558,
     3558, 3558, 3558, 3553, 3558, 3559, 3559, 3559, 3559, 3558,
     3560, 3560, 3560, 3560, 3561, 3561, 3561, 3561, 3557, 3561,

     3564, 3564, 3564, 3564, 3561, 3565, 3565, 3565, 3565, 3567,
     3567, 3567, 3567,    0, 3560, 3568, 3568, 3568, 3568,    0,
        0,    0, 3549, 3569, 3569, 3569, 3569,    0, 3569, 3565,
        0,    0,    0, 3569, 3570, 3570, 3570, 3570,    0, 3568,
     3571, 3571, 3571, 3571, 3572, 3572, 3572, 3572, 3558,    0,
        0, 3569, 3573, 3573, 3573, 3573, 3575, 3575, 3575, 3575,
        0,    0,    0, 3561, 3571, 3576, 3576, 3576, 3576,    0,
        0,    0, 3572, 3577, 3577, 3577, 3577,    0,    0,    0,
     3573, 3578, 3578, 3578, 3578, 3579, 3579, 3579, 3579, 3576,
     3580, 3580, 3580, 3580, 3581, 3581, 3581, 3581, 3582, 3582,

     3582, 3582,    0,    0,    0, 3578, 3583, 3583, 3583, 3583,
     3584, 3584, 3584, 3584, 3580, 3585, 3585, 3585, 3585,    0,
        0,    0, 3582, 3586, 3586, 3586, 3586, 3587, 3587, 3587,
     3587,    0,    0,    0, 3584, 3588, 3588, 3588, 3588, 3589,
     3589, 3589, 3589, 3590, 3590, 3590, 3590, 3586, 3591, 3591,
     3591, 3591, 3592, 3592, 3592, 3592,    0,    0,    0, 3588,
     3593, 3593, 3593, 3593,    0,    0,    0, 3590, 3594, 3594,
     3594, 3594, 3595, 3595, 3595, 3595, 3592, 3596, 3596, 3596,
     3596, 3597, 3597, 3597, 3597, 3598, 3598, 3598, 3598,    0,
        0,    0, 3594, 3599, 3599, 3599, 3599, 3600, 3600, 3600,

     3600, 3596, 3601, 3601, 3601, 3601,    0,    0,    0, 3598,
     3602, 3602, 3602, 3602, 3603, 3603, 3603, 3603,    0,    0,
        0, 3600, 3604, 3604, 3604, 3604, 3605, 3605, 3605, 3605,
     3606, 3606, 3606, 3606, 3602, 3607, 3607, 3607, 3607, 3608,
     3608, 3608, 3608,    0,    0,    0, 3604, 3609, 3609, 3609,
     3609,    0,    0,    0, 3606, 3610, 3610, 3610, 3610, 3611,
     3611, 3611, 3611, 3608, 3612, 3612, 3612, 3612, 3613, 3613,
     3613, 3613, 3614, 3614, 3614, 3614,    0,    0,    0, 3610,
     3615, 3615, 3615, 3615, 3616, 3616, 3616, 3616, 3612, 3617,
     3617, 3617, 3617,    0,    0,    0, 3614, 3618, 3618, 3618,

     3618, 3619, 3619, 3619, 3619,    0,    0,    0, 3616, 3620,
     3620, 3620, 3620, 3621, 3621, 3621, 3621, 3622, 3622, 3622,
     3622, 3618, 3623, 3623, 3623, 3623, 3624, 3624, 3624, 3624,
        0,    0,    0, 3620, 3625, 3625, 3625, 3625,    0,    0,
        0, 3622, 3626, 3626, 3626, 3626, 3627, 3627, 3627, 3627,
     3624, 3628, 3628, 3628, 3628, 3629, 3629, 3629, 3629, 3630,
     3630, 3630, 3630,    0,    0,    0, 3626, 3631, 3631, 3631,
     3631, 3632, 3632, 3632, 3632, 3628, 3633, 3633, 3633, 3633,
        0,    0,    0, 3630, 3634, 3634, 3634, 3634, 3635, 3635,
     3635, 3635,    0,    0,    0, 3632, 3636, 3636, 3636, 3636,

     3637, 3637, 3637, 3637, 3638, 3638, 3638, 3638, 3634, 3639,
     3639, 3639, 3639, 3640, 3640, 3640, 3640,    0,    0,    0,
     3636, 3641, 3641, 3641, 3641,    0,    0,    0, 3638, 3642,
     3642, 3642, 3642, 3643, 3643, 3643, 3643, 3640, 3644, 3644,
     3644, 3644, 3645, 3645, 3645, 3645, 3646, 3646, 3646, 3646,
        0,    0,    0, 3642, 3647, 3647, 3647, 3647, 3648, 3648,
     3648, 3648, 3644, 3649, 3649, 3649, 3649,    0,    0,    0,
     3646, 3650, 3650, 3650, 3650, 3651, 3651, 3651, 3651,    0,
        0,    0, 3648, 3652, 3652, 3652, 3652, 3653, 3653, 3653,
     3653, 3654, 3654, 3654, 3654, 3650, 3655, 3655, 3655, 3655,

     3656, 3656, 3656, 3656,    0,    0,    0, 3652, 3657, 3657,
     3657, 3657,    0,    0,    0, 3654, 3658, 3658, 3658, 3658,
     3659, 3659, 3659, 3659, 3656, 3660, 3660, 3660, 3660, 3661,
     3661, 3661, 3661, 3662, 3662, 3662, 3662,    0,    0,    0,
     3658, 3663, 3663, 3663, 3663, 3664, 3664, 3664, 3664, 3660,
     3665, 3665, 3665, 3665,    0,    0,    0, 3662, 3666, 3666,
     3666, 3666, 3667, 3667, 3667, 3667,    0,    0,    0, 3664,
     3668, 3668, 3668, 3668, 3669, 3669, 3669, 3669, 3670, 3670,
     3670, 3670, 3666, 3671, 3671, 3671, 3671, 3672, 3672, 3672,
     3672,    0,    0,    0, 3668, 3673, 3673, 3673, 3673,    0,

        0,    0, 3670, 3674, 3674, 3674, 3674, 3675, 3675, 3675,
     3675, 3672, 3676, 3676, 3676, 3676, 3677, 3677, 3677, 3677,
     3678, 3678, 3678, 3678,    0,    0,    0, 3674, 3679, 3679,
     3679, 3679, 3680, 3680, 3680, 3680, 3676, 3681, 3681, 3681,
     3681,    0,    0,    0, 3678, 3682, 3682, 3682, 3682, 3683,
     3683, 3683, 3683,    0,    0,    0, 3680, 3684, 3684, 3684,
     3684, 3685, 3685, 3685, 3685, 3686, 3686, 3686, 3686, 3682,
     3687, 3687, 3687, 3687, 3688, 3688, 3688, 3688,    0,    0,
        0, 3684, 3689, 3689, 3689, 3689,    0,    0,    0, 3686,
     3690, 3690, 3690, 3690, 3691, 3691, 3691, 3691, 3688, 3692,

     3692, 3692, 3692, 3693, 3693, 3693, 3693,    0,    0,    0,
        0,    0,    0,    0, 3690,    0,    0,    0,    0,    0,
        0,    0,    0, 3692, 3695, 3695, 3695, 3695, 3695, 3695,
     3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695,
     3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695,
     3695, 3695, 3695, 3695, 3695, 3695, 3696, 3696, 3696, 3696,
     3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696,
     3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696,
     3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3697, 3697,
     3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697,

     3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697,
     3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697,
     3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698,
     3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698,
     3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698,
     3698, 3698, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699,
     3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699,
     3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699,
     3699, 3699, 3699, 3699, 3700, 3700, 3700, 3700, 3700, 3700,
     3700, 3700, 3700, 3700, 3700, 3700, 3700, 3700, 3700, 3700,

     3700, 3700, 3700, 3700, 3700, 3700, 3700, 3700, 3700, 3700,
     3700, 3700, 3700, 3700, 3700, 3700, 3701, 3701, 3701, 3701,
     3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701,
     3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701,
     3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3702, 3702,
     3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702,
     3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702,
     3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702,
     3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703,
     3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703,

     3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703, 3703,
     3703, 3703, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3704, 3704, 3704, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3706, 3706, 3706, 3706,
     3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706,
     3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706,

     3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3707, 3707,
     3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707,
     3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707,
     3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709,
     3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709,
     3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709,

     3709, 3709, 3709, 3709, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3711, 3711, 3711, 3711,
     3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711,
     3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711,
     3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3712, 3712,
     3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712,
     3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712,
     3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712,

     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714,
     3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714,
     3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714,
     3714, 3714, 3714, 3714, 3715, 3715, 3715, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3715, 3716, 3716, 3716, 3716,

     3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716,
     3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716,
     3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3717, 3717,
     3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717,
     3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717,
     3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717,
     3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718,
     3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718,
     3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718,
     3718, 3718, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719,

     3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719,
     3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719,
     3719, 3719, 3719, 3719, 3720, 3720, 3720, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3720, 3720, 3721, 3721, 3721, 3721,
     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721,
     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721,
     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3722, 3722,
     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,

     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,
     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,
     3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723,
     3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723,
     3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723,
     3723, 3723, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724,
     3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724,
     3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724,
     3724, 3724, 3724, 3724, 3725, 3725, 3725, 3725, 3725, 3725,
     3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725,

     3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725,
     3725, 3725, 3725, 3725, 3725, 3725, 3726, 3726, 3726, 3726,
     3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726,
     3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726,
     3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3727, 3727,
     3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727,
     3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727,
     3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727,
     3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728,
     3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728,

     3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728,
     3728, 3728, 3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729,
     3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729,
     3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729,
     3729, 3729, 3729, 3729, 3730, 3730, 3730, 3730, 3730, 3730,
     3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730,
     3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730,
     3730, 3730, 3730, 3730, 3730, 3730, 3731, 3731, 3731, 3731,
     3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731,
     3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731,

     3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3732, 3732,
     3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732,
     3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732,
     3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732,
     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733,
     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733,
     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733,
     3733, 3733, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734,
     3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734,
     3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734,

     3734, 3734, 3734, 3734, 3735, 3735, 3735, 3735, 3735, 3735,
     3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735,
     3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735,
     3735, 3735, 3735, 3735, 3735, 3735, 3736, 3736, 3736, 3736,
     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736,
     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736,
     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3737, 3737,
     3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737,
     3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737,
     3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737,

     3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738,
     3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738,
     3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738,
     3738, 3738, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739,
     3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739,
     3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739,
     3739, 3739, 3739, 3739, 3740, 3740, 3740, 3740, 3740, 3740,
     3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740,
     3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740,
     3740, 3740, 3740, 3740, 3740, 3740, 3741, 3741, 3741, 3741,

     3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741,
     3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741,
     3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3742, 3742,
     3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742,
     3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742,
     3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742,
     3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743,
     3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743,
     3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743,
     3743, 3743, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744,

     3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744,
     3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744,
     3744, 3744, 3744, 3744, 3745, 3745, 3745, 3745, 3745, 3745,
     3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745,
     3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745,
     3745, 3745, 3745, 3745, 3745, 3745, 3746, 3746, 3746, 3746,
     3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746,
     3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746,
     3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3747, 3747,
     3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747,

     3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747,
     3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747,
     3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748,
     3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748,
     3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748,
     3748, 3748, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
     3749, 3749, 3749, 3749, 3750, 3750, 3750, 3750, 3750, 3750,
     3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750,

     3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750,
     3750, 3750, 3750, 3750, 3750, 3750, 3751, 3751, 3751, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3752, 3752,
     3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752,
     3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752,
     3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752,
     3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753,
     3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753,

     3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753,
     3753, 3753, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754,
     3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754,
     3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754,
     3754, 3754, 3754, 3754, 3755, 3755, 3755, 3755, 3755, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3756, 3756, 3756, 3756,
     3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756,
     3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756,

     3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3758,    0,
        0,    0,    0,    0,    0,    0,    0, 3758,    0,    0,
        0,    0,    0, 3758,    0,    0,    0,    0,    0,    0,
     3758,    0,    0,    0,    0,    0,    0,    0, 3758, 3759,
     3759, 3759,    0,    0,    0, 3759,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3759,    0,    0,    0,    0,    0,    0,    0, 3759,
     3760, 3760, 3760, 3760,    0,    0, 3760,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3760,    0,    0,    0,
        0,    0, 3760,    0,    0,    0,    0,    0,    0, 3760,

     3760, 3761, 3761, 3761,    0,    0,    0, 3761,    0,    0,
        0,    0,    0,    0, 3761,    0,    0,    0,    0,    0,
        0,    0,    0, 3761,    0,    0,    0,    0,    0,    0,
     3761, 3761, 3762, 3762, 3762,    0,    0,    0,    0,    0,
        0, 3762,    0,    0, 3762, 3762,    0, 3762, 3762, 3762,
     3762,    0,    0,    0, 3762,    0,    0,    0,    0,    0,
        0,    0, 3762, 3763, 3763, 3763,    0,    0,    0, 3763,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3763,    0,    0,    0,    0,
        0,    0,    0, 3763, 3764, 3764, 3764, 3764, 3764, 3764,

     3764, 3764, 3764, 3764, 3764, 3764, 3764,    0, 3764, 3764,
     3764, 3764, 3764, 3764, 3764, 3764, 3764, 3764, 3764, 3764,
     3764, 3764,    0, 3764, 3764, 3764, 3765, 3765, 3765,    0,
        0,    0, 3765,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3765,    0,
        0,    0,    0,    0,    0,    0, 3765, 3766, 3766, 3766,
     3766,    0,    0, 3766,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3766,    0,    0,    0,    0,    0, 3766,
        0,    0,    0,    0,    0,    0, 3766, 3766, 3767, 3767,
     3767,    0,    0,    0,    0,    0,    0, 3767,    0,    0,

        0,    0,    0, 3767, 3767,    0,    0,    0,    0,    0,
     3767,    0,    0,    0,    0,    0,    0,    0, 3767, 3771,
        0,    0,    0, 3771,    0, 3771,    0,    0, 3771,    0,
        0,    0, 3771,    0,    0,    0,    0,    0,    0,    0,
     3771, 3772, 3772,    0, 3772, 3772, 3772, 3772, 3772, 3772,
     3772, 3772, 3772, 3772, 3772, 3772, 3772, 3772, 3772, 3772,
     3772, 3772, 3772, 3772, 3772, 3772, 3772, 3772, 3772, 3772,
     3772, 3772, 3772, 3779, 3779, 3779,    0,    0,    0, 3779,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3779,    0,    0,    0,    0,

     3779,    0,    0, 3779, 3781, 3781, 3781,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3781,    0, 3781,
     3781,    0,    0,    0,    0,    0, 3781,    0, 3781,    0,
        0,    0,    0,    0, 3781, 3783, 3783,    0, 3783, 3783,
     3783, 3783, 3783, 3783,    0, 3783, 3783, 3783, 3783, 3783,
     3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783,
     3783, 3783, 3783, 3783, 3783, 3783, 3783, 3784, 3784, 3784,
        0,    0,    0, 3784,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3784,
        0,    0,    0,    0,    0,    0,    0, 3784, 3785, 3785,

     3785, 3785,    0,    0, 3785,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3785,    0,    0,    0,    0,    0,
     3785,    0,    0,    0,    0,    0,    0, 3785, 3785, 3786,
     3786, 3786,    0,    0,    0, 3786, 3786,    0,    0,    0,
     3786,    0,    0,    0,    0, 3786,    0,    0,    0,    0,
        0, 3786,    0,    0,    0, 3786,    0,    0,    0, 3786,
     3789, 3789, 3789,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3789, 3789,    0, 3789,    0,
        0,    0, 3789,    0,    0,    0,    0,    0,    0,    0,
     3789, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790,

     3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790,
     3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790, 3790,
     3790, 3790, 3790, 3791, 3791,    0, 3791, 3791, 3791, 3791,
     3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791,
     3791, 3791,    0, 3791, 3791, 3791, 3791, 3791, 3791, 3791,
     3791, 3791, 3791, 3791, 3791, 3792, 3792, 3792,    0,    0,
        0, 3792,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3792,    0,    0,
        0,    0,    0,    0,    0, 3792, 3793, 3793, 3793, 3793,
        0,    0, 3793,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 3793,    0,    0,    0,    0,    0, 3793,    0,
        0,    0,    0,    0,    0, 3793, 3793, 3794, 3794, 3794,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3794, 3794,    0, 3794,    0,    0,    0, 3794,
        0,    0,    0,    0,    0,    0,    0, 3794, 3799, 3799,
        0,    0, 3799,    0,    0, 3799, 3799,    0, 3799, 3799,
     3799, 3799, 3799,    0, 3799, 3799, 3799, 3799, 3799, 3799,
        0, 3799, 3799, 3799, 3799, 3799,    0,    0, 3799, 3799,
     3800, 3800,    0, 3800, 3800, 3800, 3800, 3800, 3800, 3800,
     3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800,

     3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800,
     3800, 3800, 3801, 3801,    0, 3801, 3801, 3801, 3801, 3801,
     3801,    0, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801,
     3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801,
     3801, 3801, 3801, 3801, 3803, 3803, 3803,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3803,    0, 3803,
     3803,    0,    0,    0,    0,    0, 3803,    0,    0,    0,
        0,    0,    0,    0, 3803, 3804, 3804, 3804,    0,    0,
        0, 3804,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3804,    0,    0,

        0,    0,    0,    0,    0, 3804, 3805, 3805, 3805, 3805,
        0,    0, 3805,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3805,    0,    0,    0,    0,    0, 3805,    0,
        0,    0,    0,    0,    0, 3805, 3805, 3806, 3806, 3806,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3806, 3806,    0,    0,    0,    0,    0, 3806,
        0,    0,    0,    0,    0,    0,    0, 3806, 3807, 3807,
        0, 3807, 3807,    0,    0, 3807, 3807,    0, 3807, 3807,
     3807, 3807, 3807,    0, 3807, 3807, 3807, 3807, 3807, 3807,
        0, 3807, 3807,    0, 3807, 3807,    0,    0, 3807, 3807,

     3808, 3808,    0, 3808, 3808, 3808, 3808, 3808, 3808,    0,
     3808, 3808, 3808, 3808, 3808, 3808, 3808, 3808, 3808, 3808,
     3808, 3808, 3808, 3808, 3808, 3808, 3808, 3808, 3808, 3808,
     3808, 3808, 3809, 3809,    0, 3809, 3809, 3809, 3809, 3809,
     3809, 3809, 3809, 3809, 3809, 3809, 3809, 3809, 3809, 3809,
     3809, 3809, 3809, 3809, 3809, 3809, 3809, 3809, 3809, 3809,
     3809, 3809, 3809, 3809, 3810, 3810,    0, 3810, 3810, 3810,
     3810, 3810, 3810, 3810, 3810, 3810,    0, 3810, 3810, 3810,
     3810, 3810, 3810, 3810, 3810, 3810, 3810, 3810, 3810, 3810,
     3810, 3810, 3810, 3810, 3810, 3810, 3811, 3811, 3811, 3811,

     3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811,
     3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811,
     3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3812, 3812,
        0, 3812, 3812,    0, 3812, 3812, 3812, 3812, 3812, 3812,
     3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812,
     3812, 3812,    0, 3812,    0, 3812, 3812, 3812, 3812, 3812,
     3813, 3813,    0, 3813, 3813, 3813, 3813, 3813, 3813, 3813,
     3813, 3813, 3813, 3813, 3813, 3813, 3813, 3813, 3813, 3813,
     3813, 3813, 3813, 3813, 3813, 3813, 3813, 3813, 3813, 3813,
     3813, 3813, 3816,    0,    0,    0, 3816, 3816, 3816, 3816,

     3816, 3816, 3816, 3816,    0, 3816,    0,    0, 3816, 3816,
     3816, 3816, 3816, 3816, 3816, 3816, 3816, 3816, 3816, 3816,
     3816, 3816, 3816, 3816, 3818,    0, 3818,    0,    0,    0,
        0,    0,    0, 3818,    0, 3818,    0,    0,    0,    0,
        0, 3818, 3820, 3820, 3820,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3820,    0, 3820,    0,    0,
        0,    0,    0,    0, 3820,    0,    0,    0,    0,    0,
        0,    0, 3820, 3822, 3822, 3822,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3822,    0,
        0,    0,    0,    0,    0, 3822,    0, 3822,    0,    0,

        0,    0,    0, 3822, 3825, 3825,    0, 3825, 3825, 3825,
     3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825,
     3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825,
     3825, 3825, 3825, 3825, 3825, 3825, 3827,    0,    0,    0,
     3827,    0,    0,    0,    0,    0,    0, 3827,    0,    0,
        0,    0,    0,    0, 3827,    0,    0,    0,    0,    0,
        0,    0, 3827, 3830, 3830,    0, 3830, 3830,    0, 3830,
     3830, 3830, 3830, 3830, 3830, 3830, 3830, 3830, 3830, 3830,
     3830, 3830, 3830, 3830, 3830, 3830, 3830, 3830, 3830, 3830,
     3830, 3830, 3830, 3830, 3830, 3833, 3833, 3833, 3833, 3833,

     3833, 3833, 3833, 3833, 3833, 3833,    0, 3833, 3833, 3833,
     3833, 3833, 3833, 3833, 3833, 3833, 3833, 3833, 3833, 3833,
     3833, 3833, 3833, 3833, 3833, 3833, 3833, 3835, 3835, 3835,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3835, 3835,    0,    0,    0,    0,    0, 3835,
        0,    0,    0,    0,    0,    0,    0, 3835, 3836, 3836,
     3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836,    0,
     3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836,
     3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836,
     3838, 3838,    0, 3838,    0,    0,    0, 3838,    0,    0,

        0,    0,    0,    0,    0, 3838, 3845, 3845,    0, 3845,
     3845, 3845, 3845, 3845, 3845,    0, 3845, 3845, 3845, 3845,
     3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845,
     3845, 3845, 3845, 3845, 3845, 3845, 3845, 3845, 3846, 3846,
     3846,    0,    0,    0, 3846,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3846,    0,    0,    0,    0,    0,    0,    0, 3846, 3847,
     3847, 3847,    0,    0,    0,    0,    0,    0,    0,    0,
     3847,    0,    0,    0, 3847,    0,    0,    0,    0,    0,
        0, 3847,    0,    0,    0,    0,    0,    0,    0, 3847,

     3848, 3848, 3848,    0,    0,    0, 3848, 3848,    0,    0,
        0, 3848,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3848,    0,    0,    0,    0,    0,    0,    0,
     3848, 3849, 3849, 3849,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3849,    0,    0,    0,
        0,    0,    0, 3849, 3849,    0,    0,    0,    0,    0,
        0, 3849, 3850, 3850, 3850,    0,    0,    0, 3850,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3850,    0,    0,    0,    0,    0,
        0,    0, 3850, 3851, 3851, 3851, 3851,    0,    0, 3851,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 3851,
        0,    0,    0,    0,    0, 3851,    0,    0,    0,    0,
        0,    0, 3851, 3851, 3852, 3852, 3852,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3852,
     3852,    0,    0,    0,    0,    0, 3852,    0,    0,    0,
        0,    0,    0,    0, 3852, 3853, 3853,    0, 3853, 3853,
     3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853,
     3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853,
     3853, 3853, 3853, 3853, 3853, 3853, 3853, 3854,    0,    0,
        0, 3854,    0,    0, 3854, 3854,    0,    0,    0, 3854,

     3854, 3854,    0, 3854, 3854, 3854, 3854, 3854, 3854, 3854,
     3854, 3854, 3854, 3854, 3854, 3854, 3854, 3854, 3854, 3855,
     3855,    0, 3855, 3855, 3855, 3855, 3855, 3855,    0, 3855,
     3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855,
     3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855,
     3855, 3860, 3860,    0, 3860, 3860, 3860, 3860, 3860, 3860,
     3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860,
     3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860, 3860,
     3860, 3860, 3860, 3861, 3861,    0, 3861, 3861, 3861, 3861,
     3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861,

     3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861, 3861,
     3861, 3861, 3861, 3861, 3861, 3862, 3862,    0, 3862, 3862,
        0, 3862, 3862, 3862,    0,    0,    0, 3862, 3862, 3862,
     3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862,
     3862, 3862, 3862, 3862, 3862, 3862, 3862, 3863, 3863,    0,
     3863, 3863, 3863, 3863, 3863, 3863,    0, 3863, 3863, 3863,
     3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863,
     3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863, 3864,
     3864,    0, 3864, 3864,    0, 3864, 3864, 3864,    0, 3864,
     3864, 3864, 3864, 3864,    0, 3864, 3864, 3864, 3864, 3864,

     3864, 3864, 3864, 3864, 3864, 3864, 3864,    0,    0, 3864,
     3864, 3865, 3865,    0, 3865, 3865, 3865, 3865, 3865, 3865,
        0, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865,
     3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865,
     3865, 3865, 3865, 3866, 3866,    0, 3866, 3866,    0, 3866,
     3866, 3866,    0,    0,    0, 3866, 3866, 3866,    0, 3866,
     3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866,
     3866, 3866, 3866, 3866, 3866, 3867, 3867,    0, 3867, 3867,
     3867, 3867, 3867, 3867,    0, 3867, 3867, 3867, 3867, 3867,
     3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867,

     3867, 3867, 3867, 3867, 3867, 3867, 3867, 3868, 3868,    0,
     3868, 3868,    0, 3868, 3868, 3868,    0, 3868, 3868, 3868,
     3868, 3868,    0, 3868, 3868, 3868, 3868, 3868, 3868, 3868,
     3868, 3868, 3868, 3868, 3868,    0,    0, 3868, 3868, 3869,
     3869,    0, 3869, 3869, 3869, 3869, 3869, 3869,    0, 3869,
     3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869,
     3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869,
     3869, 3871, 3871,    0, 3871, 3871, 3871, 3871, 3871, 3871,
        0, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871,
     3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871,

     3871, 3871, 3871, 3873, 3873,    0, 3873, 3873,    0, 3873,
     3873, 3873,    0, 3873, 3873, 3873, 3873, 3873, 3873, 3873,
     3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873,    0, 3873,
     3873, 3873, 3873, 3873, 3873, 3874, 3874,    0, 3874, 3874,
     3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874,
     3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874,
     3874, 3874, 3874, 3874, 3874, 3874, 3874, 3875, 3875,    0,
     3875, 3875,    0, 3875, 3875, 3875,    0,    0,    0, 3875,
     3875, 3875,    0, 3875, 3875, 3875, 3875, 3875, 3875, 3875,
     3875, 3875, 3875, 3875, 3875, 3875, 3875, 3875, 3875, 3876,

     3876,    0, 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876,
     3876,    0, 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876,
     3876,    0, 3876, 3876,    0, 3876, 3876, 3876, 3876, 3876,
     3876, 3877, 3877,    0, 3877, 3877, 3877, 3877, 3877, 3877,
     3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877,
     3877, 3877, 3877,    0, 3877, 3877,    0, 3877, 3877, 3877,
     3877, 3877, 3877, 3878, 3878, 3878,    0,    0,    0, 3878,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3878, 3878,    0,    0,    0,
        0,    0,    0, 3878, 3880, 3880, 3880,    0,    0,    0,

        0,    0,    0,    0, 3880,    0, 3880,    0,    0, 3880,
        0,    0,    0,    0,    0,    0, 3880,    0,    0,    0,
        0,    0,    0,    0, 3880, 3881, 3881, 3881, 3881, 3881,
     3881, 3881, 3881, 3881, 3881, 3881, 3881, 3881, 3881, 3881,
     3881, 3881, 3881, 3881, 3881, 3881, 3881, 3881, 3881, 3881,
     3881, 3881, 3881, 3881, 3881, 3881, 3881, 3882, 3882, 3882,
        0,    0,    0, 3882,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3882,
        0,    0,    0,    0,    0,    0,    0, 3882, 3884, 3884,
     3884,    0,    0,    0,    0,    0,    0, 3884,    0,    0,

        0,    0,    0, 3884,    0,    0,    0,    0,    0,    0,
     3884,    0,    0,    0,    0,    0,    0,    0, 3884, 3885,
        0,    0,    0,    0,    0, 3885, 3885,    0,    0,    0,
     3885,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3885,    0,    0,    0,    0,    0,    0,    0, 3885,
     3886, 3886, 3886,    0,    0,    0, 3886,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3886,    0,    0,    0,    0,    0,    0,    0,
     3886, 3887, 3887, 3887, 3887,    0,    0, 3887,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3887,    0,    0,

        0,    0,    0, 3887,    0,    0,    0,    0,    0,    0,
     3887, 3887, 3888, 3888, 3888,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3888, 3888,    0,
        0,    0,    0,    0, 3888,    0,    0,    0,    0,    0,
        0,    0, 3888, 3889, 3889, 3889, 3889, 3889, 3889, 3889,
     3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889,
     3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889,
     3889, 3889, 3889, 3889, 3889, 3890, 3890,    0, 3890, 3890,
     3890, 3890, 3890, 3890, 3890, 3890, 3890,    0, 3890, 3890,
        0, 3890, 3890, 3890, 3890, 3890, 3890,    0, 3890, 3890,

        0, 3890, 3890, 3890, 3890, 3890, 3890, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3892,
     3892,    0, 3892, 3892, 3892, 3892,    0, 3892, 3892, 3892,
     3892,    0, 3892, 3892,    0, 3892, 3892, 3892,    0, 3892,
     3892,    0, 3892, 3892,    0,    0, 3892, 3892, 3892, 3892,
     3892, 3893,    0,    0,    0,    0,    0,    0,    0,    0,
     3893,    0,    0,    0,    0,    0, 3893,    0,    0,    0,
        0,    0,    0, 3893,    0,    0,    0,    0,    0,    0,

        0, 3893, 3894, 3894, 3894,    0,    0,    0, 3894,    0,
        0,    0,    0,    0,    0, 3894,    0,    0,    0,    0,
        0,    0,    0,    0, 3894,    0,    0,    0,    0,    0,
        0, 3894, 3894, 3895, 3895, 3895,    0,    0,    0, 3895,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3895,    0,    0,    0,    0,
        0,    0,    0, 3895, 3896, 3896, 3896,    0,    0,    0,
        0,    0,    0, 3896,    0,    0, 3896,    0,    0, 3896,
        0, 3896, 3896,    0,    0,    0, 3896,    0,    0,    0,
        0,    0,    0,    0, 3896, 3898, 3898, 3898,    0,    0,

        0,    0,    0,    0, 3898,    0,    0, 3898, 3898,    0,
     3898, 3898, 3898, 3898,    0,    0,    0, 3898,    0,    0,
        0,    0,    0,    0,    0, 3898, 3899, 3899, 3899,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3899,
        0, 3899,    0,    0,    0,    0,    0,    0, 3899,    0,
        0,    0,    0,    0,    0,    0, 3899, 3900, 3900, 3900,
        0,    0,    0, 3900,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3900,
        0,    0,    0,    0,    0,    0,    0, 3900, 3901, 3901,
     3901,    0,    0,    0, 3901,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3901,    0,    0,    0,    0,    0,    0,    0, 3901, 3902,
     3902, 3902,    0,    0,    0,    0,    0,    0, 3902,    0,
        0, 3902,    0,    0, 3902,    0, 3902, 3902,    0,    0,
        0, 3902,    0,    0,    0,    0,    0,    0,    0, 3902,
     3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903,
     3903, 3903, 3903,    0, 3903, 3903, 3903, 3903, 3903, 3903,
     3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903,    0, 3903,
     3903, 3903, 3904, 3904, 3904,    0,    0,    0, 3904,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 3904,    0,    0,    0,    0,    0,
        0,    0, 3904, 3905, 3905, 3905,    0,    0,    0,    0,
        0,    0, 3905,    0,    0,    0,    0,    0, 3905,    0,
        0,    0,    0,    0,    0, 3905,    0,    0,    0,    0,
        0,    0,    0, 3905, 3907, 3907, 3907,    0,    0,    0,
        0,    0,    0, 3907,    0,    0,    0,    0,    0, 3907,
     3907,    0,    0,    0,    0,    0, 3907,    0,    0,    0,
        0,    0,    0,    0, 3907, 3909,    0,    0,    0, 3909,
        0, 3909,    0,    0, 3909,    0,    0,    0, 3909,    0,
        0,    0,    0,    0,    0,    0, 3909, 3912, 3912,    0,

     3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912,
     3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912,
     3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3916,
     3916, 3916,    0,    0,    0, 3916,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3916,    0,    0,    0,    0, 3916,    0,    0, 3916,
     3917, 3917, 3917,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3917,    0, 3917, 3917,    0,    0,    0,
        0,    0, 3917,    0,    0,    0,    0,    0,    0,    0,
     3917, 3918, 3918, 3918,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 3918,    0, 3918, 3918,    0,    0,
        0,    0,    0, 3918,    0, 3918,    0,    0,    0,    0,
        0, 3918, 3919, 3919, 3919,    0,    0,    0, 3919,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3919,    0,    0,    0,    0,    0,
        0,    0, 3919, 3923, 3923,    0, 3923, 3923, 3923, 3923,
     3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923,
     3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923,    0, 3923,
     3923, 3923, 3923, 3923, 3923, 3924, 3924,    0, 3924, 3924,
     3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924,

     3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924,
     3924, 3924, 3924, 3924, 3924, 3924, 3924, 3925, 3925, 3925,
     3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925,
     3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925,
     3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3926,
     3926, 3926,    0,    0,    0, 3926,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3926,    0,    0,    0,    0,    0,    0,    0, 3926,
     3927, 3927, 3927,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3927,    0,    0, 3927,    0,

        0,    0, 3927,    0,    0,    0,    0,    0,    0,    0,
     3927, 3929, 3929, 3929,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3929, 3929,    0, 3929,
        0,    0,    0, 3929,    0,    0,    0,    0,    0,    0,
        0, 3929, 3930, 3930,    0, 3930, 3930, 3930, 3930, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930,
     3930, 3930, 3930, 3930, 3931, 3931, 3931,    0,    0,    0,
     3931, 3931,    0,    0,    0, 3931,    0,    0,    0,    0,
     3931,    0,    0,    0,    0,    0, 3931,    0,    0,    0,

     3931,    0,    0,    0, 3931, 3932, 3932, 3932,    0,    0,
        0,    0,    0,    0,    0, 3932, 3932,    0,    0,    0,
     3932, 3932,    0, 3932,    0,    0,    0, 3932,    0,    0,
        0,    0,    0,    0,    0, 3932, 3936, 3936, 3936,    0,
        0,    0,    0,    0,    0, 3936,    0,    0,    0, 3936,
        0, 3936,    0,    0,    0,    0,    0,    0, 3936,    0,
        0,    0,    0,    0,    0,    0, 3936, 3937, 3937,    0,
     3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937,
     3937, 3937, 3937, 3937, 3937, 3937,    0, 3937, 3937, 3937,
     3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3938,

     3938, 3938,    0,    0,    0, 3938,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3938,    0,    0,    0,    0,    0,    0,    0, 3938,
     3939, 3939, 3939,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3939,    0,    0, 3939,    0,
        0,    0, 3939,    0,    0,    0,    0,    0,    0,    0,
     3939, 3941, 3941, 3941,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3941, 3941,    0, 3941,
        0,    0,    0, 3941,    0,    0,    0,    0,    0,    0,
        0, 3941, 3944, 3944,    0,    0, 3944,    0,    0, 3944,

     3944,    0, 3944, 3944, 3944, 3944, 3944,    0, 3944, 3944,
     3944, 3944, 3944, 3944,    0, 3944, 3944, 3944, 3944, 3944,
        0,    0, 3944, 3944, 3945, 3945,    0, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3946, 3946,    0, 3946,
     3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946,
     3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946,
     3946,    0, 3946, 3946, 3946, 3946, 3946, 3946, 3947, 3947,
        0, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,

     3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,
     3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,
     3948, 3948,    0, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3949, 3949, 3949,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3949,    0, 3949, 3949,    0,
        0,    0,    0,    0, 3949,    0,    0,    0,    0,    0,
        0,    0, 3949, 3950, 3950, 3950,    0,    0,    0, 3950,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 3950,    0,    0,    0,    0,
        0,    0,    0, 3950, 3951, 3951, 3951,    0,    0,    0,
     3951,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3951,    0,    0,    0,
        0,    0,    0,    0, 3951, 3954, 3954, 3954,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3954, 3954,    0,    0,    0,    0,    0, 3954,    0,    0,
        0,    0,    0,    0,    0, 3954, 3955, 3955,    0, 3955,
     3955,    0,    0, 3955, 3955,    0, 3955, 3955, 3955, 3955,
     3955,    0, 3955, 3955, 3955, 3955, 3955, 3955,    0, 3955,

     3955,    0, 3955, 3955,    0,    0, 3955, 3955, 3956, 3956,
        0, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3956, 3956,    0, 3956, 3956, 3956, 3956, 3956, 3956,
     3957, 3957,    0, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3958, 3958,    0, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958,    0, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,

     3958, 3958, 3958, 3958, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3960, 3960,    0, 3960,
     3960,    0, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960,
     3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960,
        0, 3960,    0, 3960, 3960, 3960, 3960, 3960, 3961, 3961,
        0, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,

     3963,    0,    0,    0, 3963, 3963, 3963, 3963, 3963, 3963,
     3963, 3963,    0, 3963,    0,    0, 3963, 3963, 3963, 3963,
     3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963,
     3963, 3963, 3964,    0, 3964,    0,    0,    0,    0,    0,
        0, 3964,    0, 3964,    0,    0,    0,    0,    0, 3964,
     3966, 3966, 3966,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3966,    0, 3966,    0,    0,    0,    0,
        0,    0, 3966,    0,    0,    0,    0,    0,    0,    0,
     3966, 3967, 3967, 3967,    0,    0,    0, 3967,    0,    0,
        0,    0, 3967,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 3967,    0,    0,    0,    0,    0,    0,
        0, 3967, 3968, 3968, 3968,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3968,    0,    0,
        0,    0,    0,    0, 3968,    0, 3968,    0,    0,    0,
        0,    0, 3968, 3969, 3969, 3969,    0,    0,    0, 3969,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3969,    0,    0,    0,    0,
        0,    0,    0, 3969, 3971, 3971,    0, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,

     3971, 3971, 3971, 3971, 3971, 3971, 3972,    0,    0,    0,
     3972,    0,    0,    0,    0,    0,    0, 3972,    0,    0,
        0,    0,    0,    0, 3972,    0,    0,    0,    0,    0,
        0,    0, 3972, 3974, 3974,    0, 3974, 3974,    0, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3976, 3976, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3976,    0, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3977, 3977, 3977,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3977, 3977,    0,    0,    0,    0,    0, 3977,
        0,    0,    0,    0,    0,    0,    0, 3977, 3978, 3978,
     3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978,    0,
     3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978,
     3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978,
     3979, 3979,    0, 3979,    0,    0,    0, 3979,    0,    0,
        0,    0,    0,    0,    0, 3979, 3980,    0,    0,    0,
        0,    0,    0, 3980,    0,    0,    0, 3980, 3980,    0,
        0, 3980,    0,    0,    0,    0, 3980,    0, 3980, 3984,

     3984,    0, 3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984,
     3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984, 3984,
     3984, 3984, 3984, 3984,    0, 3984, 3984, 3984, 3984, 3984,
     3984, 3985, 3985,    0, 3985, 3985, 3985, 3985, 3985, 3985,
     3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985,
     3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985,
     3985, 3985, 3985, 3986, 3986, 3986,    0,    0,    0, 3986,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3986,    0,    0,    0,    0,
        0,    0,    0, 3986, 3987, 3987, 3987,    0,    0,    0,

        0,    0,    0,    0,    0, 3987,    0,    0,    0, 3987,
        0,    0,    0,    0,    0,    0, 3987,    0,    0,    0,
        0,    0,    0,    0, 3987, 3988, 3988, 3988,    0,    0,
        0, 3988, 3988,    0,    0,    0, 3988,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3988,    0,    0,
        0,    0,    0,    0,    0, 3988, 3989, 3989, 3989,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3989,    0,    0,    0,    0,    0,    0, 3989, 3989,
        0,    0,    0,    0,    0,    0, 3989, 3990, 3990,    0,
     3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990,

     3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990,
     3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3991,
     3991, 3991,    0,    0,    0, 3991,    0,    0,    0,    0,
     3991,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3991,    0,    0,    0,    0,    0,    0,    0, 3991,
     3992, 3992, 3992,    0,    0,    0, 3992,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3992,    0,    0,    0,    0,    0,    0,    0,
     3992, 3995, 3995, 3995,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3995, 3995,    0,    0,

        0,    0,    0, 3995,    0,    0,    0,    0,    0,    0,
        0, 3995, 3996, 3996,    0, 3996, 3996, 3996, 3996, 3996,
     3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,
     3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,
     3996, 3996, 3996, 3996, 3997,    0,    0,    0, 3997,    0,
        0, 3997, 3997,    0,    0,    0, 3997, 3997, 3997,    0,
     3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997, 3997,
     3997, 3997, 3997, 3997, 3997, 3997, 3998, 3998,    0, 3998,
     3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998,
     3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998,

     3998,    0, 3998, 3998, 3998, 3998, 3998, 3998, 3999, 3999,
        0, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     4002, 4002,    0, 4002, 4002,    0, 4002, 4002, 4002,    0,
        0,    0, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002,
     4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002, 4002,
     4002, 4002, 4003, 4003,    0, 4003, 4003, 4003, 4003, 4003,
     4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003,
     4003, 4003, 4003, 4003, 4003, 4003, 4003,    0, 4003, 4003,

     4003, 4003, 4003, 4003, 4004, 4004,    0, 4004, 4004, 4004,
     4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004,
     4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004,
     4004, 4004, 4004, 4004, 4004, 4004, 4005, 4005,    0, 4005,
     4005,    0, 4005, 4005, 4005,    0, 4005, 4005, 4005, 4005,
     4005,    0, 4005, 4005, 4005, 4005, 4005, 4005, 4005, 4005,
     4005, 4005, 4005, 4005,    0,    0, 4005, 4005, 4006, 4006,
        0, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006,
     4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006,
     4006, 4006, 4006,    0, 4006, 4006, 4006, 4006, 4006, 4006,

     4007, 4007,    0, 4007, 4007, 4007, 4007, 4007, 4007, 4007,
     4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007,
     4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007,
     4007, 4007, 4008, 4008,    0, 4008, 4008,    0, 4008, 4008,
     4008,    0,    0,    0, 4008, 4008, 4008,    0, 4008, 4008,
     4008, 4008, 4008, 4008, 4008, 4008, 4008, 4008, 4008, 4008,
     4008, 4008, 4008, 4008, 4009, 4009,    0, 4009, 4009, 4009,
     4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009,
     4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009,    0,
     4009, 4009, 4009, 4009, 4009, 4009, 4010, 4010,    0, 4010,

     4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010,
     4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010,
     4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4011, 4011,
        0, 4011, 4011,    0, 4011, 4011, 4011,    0, 4011, 4011,
     4011, 4011, 4011,    0, 4011, 4011, 4011, 4011, 4011, 4011,
     4011, 4011, 4011, 4011, 4011, 4011,    0,    0, 4011, 4011,
     4012, 4012,    0, 4012, 4012, 4012, 4012, 4012, 4012, 4012,
     4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012,
     4012, 4012, 4012, 4012, 4012,    0, 4012, 4012, 4012, 4012,
     4012, 4012, 4013, 4013,    0, 4013, 4013, 4013, 4013, 4013,

     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013,
     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013,
     4013, 4013, 4013, 4013, 4015, 4015,    0, 4015, 4015, 4015,
     4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015,
     4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015,    0,
     4015, 4015, 4015, 4015, 4015, 4015, 4016, 4016,    0, 4016,
     4016, 4016, 4016, 4016, 4016, 4016, 4016, 4016, 4016, 4016,
     4016, 4016, 4016, 4016, 4016, 4016, 4016, 4016, 4016, 4016,
     4016, 4016, 4016, 4016, 4016, 4016, 4016, 4016, 4017, 4017,
        0, 4017, 4017,    0, 4017, 4017, 4017,    0, 4017, 4017,

     4017, 4017, 4017, 4017, 4017, 4017, 4017, 4017, 4017, 4017,
     4017, 4017, 4017,    0, 4017, 4017, 4017, 4017, 4017, 4017,
     4018, 4018,    0, 4018, 4018,    0, 4018, 4018, 4018,    0,
        0,    0, 4018, 4018, 4018,    0, 4018, 4018, 4018, 4018,
     4018, 4018, 4018, 4018, 4018, 4018, 4018, 4018, 4018, 4018,
     4018, 4018, 4019, 4019,    0, 4019, 4019, 4019, 4019, 4019,
     4019, 4019, 4019, 4019,    0, 4019, 4019, 4019, 4019, 4019,
     4019, 4019, 4019, 4019,    0, 4019, 4019,    0, 4019, 4019,
     4019, 4019, 4019, 4019, 4020, 4020,    0, 4020, 4020, 4020,
     4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020,

     4020, 4020, 4020, 4020, 4020, 4020,    0, 4020, 4020,    0,
     4020, 4020, 4020, 4020, 4020, 4020, 4021, 4021, 4021,    0,
        0,    0, 4021,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4021, 4021,
        0,    0,    0,    0,    0,    0, 4021, 4022, 4022, 4022,
        0,    0,    0,    0,    0,    0,    0, 4022,    0, 4022,
        0,    0, 4022,    0,    0,    0,    0,    0,    0, 4022,
        0,    0,    0,    0,    0,    0,    0, 4022, 4023, 4023,
     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,
     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,

     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,
     4024, 4024, 4024,    0,    0,    0,    0,    0,    0,    0,
     4024,    0, 4024,    0,    0, 4024,    0,    0,    0,    0,
        0,    0, 4024,    0,    0,    0,    0,    0,    0,    0,
     4024, 4025, 4025, 4025,    0,    0,    0, 4025,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4025,    0,    0,    0,    0,    0,    0,
        0, 4025, 4026, 4026, 4026,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4026,    0,    0,
        0,    0,    0,    0, 4026,    0,    0,    0,    0,    0,

        0,    0, 4026, 4027, 4027, 4027,    0,    0,    0,    0,
        0,    0, 4027,    0,    0,    0,    0,    0, 4027,    0,
        0,    0,    0,    0,    0, 4027,    0,    0,    0,    0,
        0,    0,    0, 4027, 4030, 4030, 4030,    0,    0,    0,
     4030,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4030,    0,    0,    0,
        0,    0,    0,    0, 4030, 4033, 4033, 4033,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4033, 4033,    0,    0,    0,    0,    0, 4033,    0,    0,
        0,    0,    0,    0,    0, 4033, 4034, 4034, 4034, 4034,

     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4035, 4035,
        0, 4035, 4035, 4035, 4035, 4035, 4035, 4035, 4035, 4035,
        0, 4035, 4035,    0, 4035, 4035, 4035, 4035, 4035, 4035,
        0, 4035, 4035,    0, 4035, 4035, 4035, 4035, 4035, 4035,
     4037, 4037, 4037, 4037, 4037, 4037, 4037, 4037, 4037, 4037,
     4037, 4037, 4037, 4037, 4037,    0, 4037, 4037, 4037, 4037,
     4037, 4037, 4037, 4037, 4037, 4037, 4037, 4037, 4037, 4037,
     4037, 4037, 4038, 4038,    0, 4038, 4038, 4038, 4038,    0,

     4038, 4038, 4038, 4038,    0, 4038, 4038,    0, 4038, 4038,
     4038,    0, 4038, 4038,    0, 4038, 4038,    0,    0, 4038,
     4038, 4038, 4038, 4038, 4039, 4039, 4039,    0,    0,    0,
        0,    0,    0, 4039,    0,    0, 4039,    0,    0, 4039,
        0, 4039, 4039,    0,    0,    0, 4039,    0,    0,    0,
        0,    0,    0,    0, 4039, 4040, 4040, 4040,    0,    0,
        0,    0,    0,    0, 4040,    0,    0, 4040,    0,    0,
     4040, 4040, 4040, 4040,    0,    0,    0, 4040,    0,    0,
        0,    0,    0,    0,    0, 4040, 4041, 4041, 4041,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4041,

        0, 4041,    0,    0,    0,    0,    0,    0, 4041,    0,
        0,    0,    0,    0,    0,    0, 4041, 4042, 4042, 4042,
        0,    0,    0, 4042,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4042,
        0,    0,    0,    0,    0,    0,    0, 4042, 4044, 4044,
     4044, 4044,    0,    0, 4044,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4044,    0,    0,    0,    0,    0,
     4044,    0,    0,    0,    0,    0,    0, 4044, 4044, 4045,
     4045, 4045,    0,    0,    0,    0,    0,    0, 4045,    0,
        0, 4045,    0,    0, 4045,    0, 4045, 4045,    0,    0,

        0, 4045,    0,    0,    0,    0,    0,    0,    0, 4045,
     4046, 4046, 4046,    0,    0,    0,    0,    0,    0, 4046,
        0,    0,    0,    0,    0, 4046,    0,    0,    0,    0,
        0,    0, 4046,    0,    0,    0,    0,    0,    0,    0,
     4046, 4047, 4047, 4047,    0,    0,    0,    0,    0,    0,
     4047,    0,    0,    0,    0,    0, 4047, 4047,    0,    0,
        0,    0,    0, 4047,    0,    0,    0,    0,    0,    0,
        0, 4047, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048,    0, 4048, 4048,    0, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4049, 4049, 4049, 4049, 4049, 4049,
     4049, 4049, 4049, 4049, 4049, 4049, 4049, 4049, 4049,    0,
     4049, 4049, 4049, 4049, 4049, 4049, 4049, 4049, 4049, 4049,
     4049, 4049, 4049, 4049, 4049, 4049, 4050, 4050, 4050, 4050,
        0,    0, 4050,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4050,    0,    0,    0,    0,    0, 4050,    0,
        0,    0,    0,    0,    0, 4050, 4050, 4051, 4051, 4051,
        0,    0,    0,    0,    0,    0, 4051,    0,    0,    0,
        0,    0, 4051, 4051,    0,    0,    0,    0,    0, 4051,
        0,    0,    0,    0,    0,    0,    0, 4051, 4055,    0,

        0,    0, 4055,    0, 4055,    0,    0, 4055,    0,    0,
        0, 4055,    0,    0,    0,    0,    0,    0,    0, 4055,
     4056, 4056, 4056, 4056,    0,    0, 4056,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4056,    0,    0,    0,
        0,    0, 4056,    0,    0,    0,    0,    0,    0, 4056,
     4056, 4057, 4057, 4057,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4057,    0, 4057, 4057,    0,    0,
        0,    0,    0, 4057,    0,    0,    0,    0,    0,    0,
        0, 4057, 4058, 4058, 4058,    0,    0,    0, 4058,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 4058,    0,    0,    0,    0,    0,
        0,    0, 4058, 4059, 4059, 4059,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4059, 4059,
        0,    0,    0,    0,    0, 4059,    0,    0,    0,    0,
        0,    0,    0, 4059, 4063, 4063,    0, 4063, 4063, 4063,
     4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063,
     4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063,    0,
     4063, 4063, 4063, 4063, 4063, 4063, 4064, 4064, 4064, 4064,
        0,    0, 4064,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4064,    0,    0,    0,    0,    0, 4064,    0,

        0,    0,    0,    0,    0, 4064, 4064, 4065, 4065, 4065,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4065,    0,    0, 4065,    0,    0,    0, 4065,
        0,    0,    0,    0,    0,    0,    0, 4065, 4066, 4066,
        0, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066,
     4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066,
     4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066, 4066,
     4067, 4067, 4067,    0,    0,    0, 4067, 4067,    0,    0,
        0, 4067,    0,    0,    0,    0, 4067,    0,    0,    0,
        0,    0, 4067,    0,    0,    0, 4067,    0,    0,    0,

     4067, 4068, 4068, 4068,    0,    0,    0, 4068,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4068,    0,    0,
        0,    0,    0, 4068,    0,    0,    0,    0,    0,    0,
        0, 4068, 4069, 4069, 4069,    0,    0,    0, 4069,    0,
        0,    0, 4069,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4069,    0,    0,    0,    0,    0,
        0,    0, 4069, 4070, 4070, 4070,    0,    0,    0,    0,
        0,    0,    0, 4070, 4070,    0,    0,    0, 4070, 4070,
        0, 4070,    0,    0,    0, 4070,    0,    0,    0,    0,
        0,    0,    0, 4070, 4071,    0,    0,    0,    0,    0,

        0, 4071,    0,    0,    0, 4071, 4071,    0,    0, 4071,
        0,    0,    0,    0, 4071,    0, 4071, 4072, 4072, 4072,
     4072, 4072, 4072, 4072, 4072, 4072, 4072, 4072, 4072,    0,
     4072, 4072,    0, 4072, 4072, 4072, 4072, 4072, 4072, 4072,
     4072, 4072, 4072, 4072, 4072, 4072, 4072, 4072, 4072, 4073,
     4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073,
     4073, 4073, 4073, 4073,    0, 4073, 4073, 4073, 4073, 4073,
     4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073,
     4073, 4076, 4076, 4076,    0,    0,    0,    0,    0,    0,
     4076,    0,    0,    0, 4076,    0, 4076,    0,    0,    0,

        0,    0,    0, 4076,    0,    0,    0,    0,    0,    0,
        0, 4076, 4077, 4077, 4077,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4077, 4077,    0,
     4077,    0,    0,    0, 4077,    0,    0,    0,    0,    0,
        0,    0, 4077, 4078, 4078, 4078,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4078,    0,
        0, 4078,    0,    0,    0, 4078,    0,    0,    0,    0,
        0,    0,    0, 4078, 4079, 4079, 4079, 4079,    0,    0,
     4079,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4079,    0,    0,    0,    0,    0, 4079,    0,    0,    0,

        0,    0,    0, 4079, 4079, 4081, 4081, 4081, 4081, 4081,
     4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081,
     4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081,
     4081, 4081, 4081, 4081, 4081, 4081, 4081, 4082, 4082,    0,
     4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082,
     4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082,
     4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4083,
     4083,    0, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4083, 4083, 4083, 4083,    0, 4083, 4083, 4083, 4083, 4083,

     4083, 4084, 4084,    0, 4084, 4084, 4084, 4084, 4084, 4084,
     4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084,
     4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084,
     4084, 4084, 4084, 4085, 4085, 4085,    0,    0,    0, 4085,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4085,    0,    0,    0,    0,
        0,    0,    0, 4085, 4086, 4086, 4086,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4086,    0, 4086,
     4086,    0,    0,    0,    0,    0, 4086,    0,    0,    0,
        0,    0,    0,    0, 4086, 4087, 4087, 4087,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4087,    0,
     4087, 4087,    0,    0,    0,    0,    0, 4087,    0,    0,
        0,    0,    0,    0,    0, 4087, 4089, 4089, 4089, 4089,
        0,    0, 4089,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4089,    0,    0,    0,    0,    0, 4089,    0,
        0,    0,    0,    0,    0, 4089, 4089, 4090, 4090,    0,
     4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090,
     4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090,
     4090, 4090,    0, 4090, 4090, 4090, 4090, 4090, 4090, 4092,
        0,    0,    0, 4092, 4092, 4092, 4092, 4092, 4092, 4092,

     4092,    0, 4092,    0,    0, 4092, 4092, 4092, 4092, 4092,
     4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092,
     4092, 4094,    0, 4094,    0,    0,    0,    0,    0,    0,
     4094,    0, 4094,    0,    0,    0,    0,    0, 4094, 4095,
     4095, 4095,    0,    0,    0, 4095,    0,    0,    0,    0,
     4095,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4095,    0,    0,    0,    0,    0,    0,    0, 4095,
     4096, 4096, 4096,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4096,    0, 4096,    0,    0,    0,    0,
        0,    0, 4096,    0,    0,    0,    0,    0,    0,    0,

     4096, 4097, 4097, 4097,    0,    0,    0, 4097,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4097,    0,    0,    0,    0,    0,    0,
        0, 4097, 4099,    0,    0,    0,    0,    0,    0, 4099,
        0,    0,    0, 4099, 4099,    0,    0, 4099,    0,    0,
        0,    0, 4099,    0, 4099, 4100, 4100,    0, 4100,    0,
        0,    0, 4100,    0,    0,    0,    0,    0,    0,    0,
     4100, 4101, 4101,    0, 4101, 4101, 4101, 4101, 4101, 4101,
     4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101,
     4101, 4101, 4101, 4101, 4101, 4101,    0, 4101, 4101, 4101,

     4101, 4101, 4101, 4102, 4102,    0, 4102, 4102, 4102, 4102,
     4102, 4102, 4102, 4102, 4102, 4102, 4102, 4102, 4102, 4102,
     4102, 4102, 4102, 4102, 4102, 4102, 4102, 4102, 4102, 4102,
     4102, 4102, 4102, 4102, 4102, 4103, 4103, 4103,    0,    0,
        0, 4103,    0,    0,    0,    0, 4103,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4103,    0,    0,
        0,    0,    0,    0,    0, 4103, 4104, 4104, 4104,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4104, 4104,    0,    0,    0,    0,    0, 4104,    0,
        0,    0,    0,    0,    0,    0, 4104, 4106, 4106, 4106,

     4106,    0,    0, 4106,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4106,    0,    0,    0,    0,    0, 4106,
        0,    0,    0,    0,    0,    0, 4106, 4106, 4107, 4107,
        0, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,
     4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,
     4107, 4107, 4107,    0, 4107, 4107, 4107, 4107, 4107, 4107,
     4109, 4109,    0, 4109, 4109, 4109, 4109, 4109, 4109, 4109,
     4109, 4109, 4109, 4109, 4109, 4109, 4109, 4109, 4109, 4109,
     4109, 4109, 4109, 4109, 4109,    0, 4109, 4109, 4109, 4109,
     4109, 4109, 4110, 4110,    0, 4110, 4110, 4110, 4110, 4110,

     4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110,
     4110, 4110, 4110, 4110, 4110, 4110, 4110,    0, 4110, 4110,
     4110, 4110, 4110, 4110, 4111, 4111,    0, 4111, 4111, 4111,
     4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111,
     4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111, 4111,    0,
     4111, 4111, 4111, 4111, 4111, 4111, 4112, 4112,    0, 4112,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112,    0, 4112, 4112, 4112, 4112, 4112, 4112, 4113, 4113,
        0, 4113, 4113,    0, 4113, 4113, 4113,    0, 4113, 4113,

     4113, 4113, 4113,    0, 4113, 4113, 4113, 4113, 4113, 4113,
     4113, 4113, 4113, 4113, 4113, 4113,    0,    0, 4113, 4113,
     4114, 4114,    0, 4114, 4114, 4114, 4114, 4114, 4114, 4114,
     4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114,
     4114, 4114, 4114, 4114, 4114,    0, 4114, 4114, 4114, 4114,
     4114, 4114, 4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115,
     4115, 4115, 4115, 4115, 4115, 4115, 4115, 4115,    0, 4115,
     4115, 4115, 4115, 4115, 4115,    0, 4115, 4115, 4115, 4115,
     4115, 4115, 4115, 4115, 4116, 4116, 4116,    0,    0,    0,
        0,    0,    0,    0, 4116,    0, 4116,    0,    0, 4116,

        0,    0,    0,    0,    0,    0, 4116,    0,    0,    0,
        0,    0,    0,    0, 4116, 4117, 4117, 4117,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4117,    0,    0,    0,    0,    0,    0, 4117,    0,    0,
        0,    0,    0,    0,    0, 4117, 4120, 4120, 4120, 4120,
        0,    0, 4120,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4120,    0,    0,    0,    0,    0, 4120,    0,
        0,    0,    0,    0,    0, 4120, 4120, 4121, 4121,    0,
     4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121,    0,
     4121, 4121,    0, 4121, 4121, 4121, 4121, 4121, 4121,    0,

     4121, 4121,    0, 4121, 4121, 4121, 4121, 4121, 4121, 4123,
     4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123,
     4123, 4123, 4123, 4123,    0, 4123, 4123, 4123, 4123, 4123,
     4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123,
     4123, 4124, 4124, 4124,    0,    0,    0,    0,    0,    0,
     4124,    0,    0, 4124,    0,    0, 4124, 4124, 4124, 4124,
        0,    0,    0, 4124,    0,    0,    0,    0,    0,    0,
        0, 4124, 4126, 4126, 4126,    0,    0,    0,    0,    0,
        0, 4126,    0,    0,    0,    0,    0, 4126, 4126,    0,
        0,    0,    0,    0, 4126,    0,    0,    0,    0,    0,

        0,    0, 4126, 4127, 4127, 4127,    0,    0,    0,    0,
        0,    0, 4127,    0,    0,    0,    0,    0, 4127, 4127,
        0,    0,    0,    0,    0, 4127,    0,    0,    0,    0,
        0,    0,    0, 4127, 4129,    0,    0,    0, 4129,    0,
     4129,    0,    0, 4129,    0,    0,    0, 4129,    0,    0,
        0,    0,    0,    0,    0, 4129, 4130, 4130, 4130, 4130,
        0,    0, 4130,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4130,    0,    0,    0,    0,    0, 4130,    0,
        0,    0,    0,    0,    0, 4130, 4130, 4131, 4131, 4131,
        0,    0,    0, 4131,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 4131,
        0,    0,    0,    0,    0,    0,    0, 4131, 4132, 4132,
     4132,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4132, 4132,    0,    0,    0,    0,    0,
     4132,    0,    0,    0,    0,    0,    0,    0, 4132, 4133,
     4133, 4133,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4133,    0, 4133, 4133,    0,    0,    0,    0,
        0, 4133,    0,    0,    0,    0,    0,    0,    0, 4133,
     4134, 4134, 4134,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4134, 4134,    0,    0,    0,

        0,    0, 4134,    0,    0,    0,    0,    0,    0,    0,
     4134, 4136, 4136, 4136,    0,    0,    0, 4136,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4136,    0,    0,    0,    0,    0,    0,
        0, 4136, 4137, 4137,    0, 4137, 4137, 4137, 4137, 4137,
     4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137, 4137,
     4137, 4137, 4137, 4137, 4137, 4137, 4137,    0, 4137, 4137,
     4137, 4137, 4137, 4137, 4138, 4138, 4138,    0,    0,    0,
     4138, 4138,    0,    0,    0, 4138,    0,    0,    0,    0,
     4138,    0,    0,    0,    0,    0, 4138,    0,    0,    0,

     4138,    0,    0,    0, 4138, 4139, 4139, 4139,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4139, 4139,    0, 4139,    0,    0,    0, 4139,    0,    0,
        0,    0,    0,    0,    0, 4139, 4140, 4140, 4140,    0,
        0,    0, 4140,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4140,    0,
        0,    0,    0,    0,    0,    0, 4140, 4141, 4141, 4141,
        0,    0,    0,    0,    0,    0,    0, 4141,    0,    0,
        0,    0, 4141, 4141,    0, 4141,    0,    0,    0, 4141,
        0,    0,    0,    0,    0,    0,    0, 4141, 4142, 4142,

     4142,    0,    0,    0, 4142,    0,    0,    0, 4142,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4142,    0,    0,    0,    0,    0,    0,    0, 4142, 4143,
        0,    0,    0, 4143,    0,    0,    0,    0, 4143,    0,
        0,    0,    0,    0,    0, 4143,    0,    0,    0,    0,
        0,    0,    0, 4143, 4144,    0,    0,    0,    0,    0,
        0, 4144,    0,    0,    0, 4144, 4144,    0,    0, 4144,
        0,    0,    0,    0, 4144,    0, 4144, 4145, 4145,    0,
     4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145,
     4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145,

     4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4146,
     4146,    0, 4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146,
     4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146,
     4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146, 4146,
     4146, 4148, 4148, 4148,    0,    0,    0,    0,    0,    0,
     4148,    0,    0,    0, 4148,    0, 4148,    0,    0,    0,
        0,    0,    0, 4148,    0,    0,    0,    0,    0,    0,
        0, 4148, 4149, 4149, 4149,    0,    0,    0,    0,    0,
        0, 4149,    0,    0,    0, 4149,    0, 4149,    0,    0,
        0,    0,    0,    0, 4149,    0,    0,    0,    0,    0,

        0,    0, 4149, 4150, 4150, 4150,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4150, 4150,
        0, 4150,    0,    0,    0, 4150,    0,    0,    0,    0,
        0,    0,    0, 4150, 4152, 4152, 4152, 4152, 4152, 4152,
     4152, 4152, 4152, 4152, 4152, 4152, 4152, 4152, 4152, 4152,
     4152, 4152, 4152, 4152, 4152, 4152, 4152, 4152, 4152, 4152,
     4152, 4152, 4152, 4152, 4152, 4152, 4153, 4153,    0, 4153,
     4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153,
     4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153,
     4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153, 4154, 4154,

        0, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154,
     4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154,
     4154, 4154, 4154,    0, 4154, 4154, 4154, 4154, 4154, 4154,
     4155, 4155, 4155, 4155, 4155, 4155, 4155, 4155, 4155, 4155,
     4155, 4155, 4155, 4155, 4155, 4155,    0, 4155, 4155, 4155,
     4155, 4155, 4155,    0, 4155, 4155, 4155, 4155, 4155, 4155,
     4155, 4155, 4156, 4156, 4156,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4156,    0, 4156, 4156,    0,
        0,    0,    0,    0, 4156,    0,    0,    0,    0,    0,
        0,    0, 4156, 4157, 4157, 4157,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 4157,    0, 4157, 4157,
        0,    0,    0,    0,    0, 4157,    0,    0,    0,    0,
        0,    0,    0, 4157, 4158, 4158,    0, 4158, 4158, 4158,
     4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158,
     4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158,    0,
     4158, 4158, 4158, 4158, 4158, 4158, 4160,    0,    0,    0,
     4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160,    0, 4160,
        0,    0, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160,
     4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4161,    0,
     4161,    0,    0,    0,    0,    0,    0, 4161,    0, 4161,

        0,    0,    0,    0,    0, 4161, 4162, 4162, 4162,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4162,
        0, 4162,    0,    0,    0,    0,    0,    0, 4162,    0,
        0,    0,    0,    0,    0,    0, 4162, 4164, 4164,    0,
     4164,    0,    0,    0, 4164,    0,    0,    0,    0,    0,
        0,    0, 4164, 4165, 4165,    0, 4165, 4165, 4165, 4165,
     4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165,
     4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165,    0, 4165,
     4165, 4165, 4165, 4165, 4165, 4166, 4166, 4166,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     4166, 4166,    0,    0,    0,    0,    0, 4166,    0,    0,
        0,    0,    0,    0,    0, 4166, 4167, 4167,    0, 4167,
     4167, 4167, 4167, 4167, 4167, 4167, 4167, 4167, 4167, 4167,
     4167, 4167, 4167, 4167, 4167, 4167, 4167, 4167, 4167, 4167,
     4167,    0, 4167, 4167, 4167, 4167, 4167, 4167, 4169, 4169,
        0, 4169, 4169, 4169, 4169, 4169, 4169, 4169, 4169, 4169,
     4169, 4169, 4169, 4169, 4169, 4169, 4169, 4169, 4169, 4169,
     4169, 4169, 4169,    0, 4169, 4169, 4169, 4169, 4169, 4169,
     4170, 4170,    0, 4170, 4170, 4170, 4170, 4170, 4170, 4170,
     4170, 4170, 4170, 4170, 4170, 4170, 4170, 4170, 4170, 4170,

     4170, 4170, 4170, 4170, 4170,    0, 4170, 4170, 4170, 4170,
     4170, 4170, 4171, 4171,    0, 4171, 4171, 4171, 4171, 4171,
     4171, 4171, 4171, 4171, 4171, 4171, 4171, 4171, 4171, 4171,
     4171, 4171, 4171, 4171, 4171, 4171, 4171,    0, 4171, 4171,
     4171, 4171, 4171, 4171, 4172, 4172,    0, 4172, 4172, 4172,
     4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172,
     4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172, 4172,    0,
     4172, 4172, 4172, 4172, 4172, 4172, 4173, 4173,    0, 4173,
     4173, 4173, 4173, 4173, 4173,    0, 4173, 4173, 4173, 4173,
     4173,    0, 4173, 4173, 4173, 4173, 4173, 4173, 4173, 4173,

     4173, 4173, 4173, 4173,    0,    0, 4173, 4173, 4174, 4174,
        0, 4174, 4174, 4174, 4174, 4174, 4174, 4174, 4174, 4174,
     4174, 4174, 4174, 4174, 4174, 4174, 4174, 4174, 4174, 4174,
     4174, 4174, 4174,    0, 4174, 4174, 4174, 4174, 4174, 4174,
     4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175,
     4175, 4175, 4175, 4175, 4175, 4175,    0, 4175, 4175, 4175,
     4175, 4175, 4175,    0, 4175, 4175, 4175, 4175, 4175, 4175,
     4175, 4175, 4176,    0,    0,    0,    0,    0, 4176, 4176,
        0,    0,    0, 4176,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4176,    0,    0,    0,    0,    0,

        0,    0, 4176, 4177, 4177,    0, 4177, 4177, 4177, 4177,
     4177, 4177, 4177, 4177, 4177,    0, 4177, 4177,    0, 4177,
     4177, 4177, 4177, 4177, 4177,    0, 4177, 4177,    0, 4177,
     4177, 4177, 4177, 4177, 4177, 4178, 4178, 4178, 4178, 4178,
     4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178,
     4178,    0, 4178, 4178, 4178, 4178, 4178, 4178,    0, 4178,
     4178, 4178, 4178, 4178, 4178, 4178, 4178, 4179, 4179, 4179,
        0,    0,    0,    0,    0,    0, 4179,    0,    0,    0,
        0,    0, 4179, 4179,    0,    0,    0,    0,    0, 4179,
        0,    0,    0,    0,    0,    0,    0, 4179, 4180,    0,

        0,    0, 4180,    0, 4180,    0,    0, 4180,    0,    0,
        0, 4180,    0,    0,    0,    0,    0,    0,    0, 4180,
     4181, 4181, 4181,    0,    0,    0, 4181,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4181,    0,    0,    0,    0,    0,    0,    0,
     4181, 4184, 4184, 4184,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4184, 4184,    0,    0,
        0,    0,    0, 4184,    0,    0,    0,    0,    0,    0,
        0, 4184, 4185, 4185, 4185,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4185,    0, 4185, 4185,    0,

        0,    0,    0,    0, 4185,    0,    0,    0,    0,    0,
        0,    0, 4185, 4186, 4186, 4186,    0,    0,    0, 4186,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4186,
        0,    0,    0,    0,    0, 4186,    0,    0,    0,    0,
        0,    0,    0, 4186, 4187, 4187, 4187,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4187,
     4187,    0, 4187,    0,    0,    0, 4187,    0,    0,    0,
        0,    0,    0,    0, 4187, 4188,    0,    0,    0,    0,
        0,    0, 4188,    0,    0,    0, 4188, 4188,    0,    0,
     4188,    0,    0,    0,    0, 4188,    0, 4188, 4189, 4189,

     4189,    0,    0,    0,    0,    0,    0,    0, 4189,    0,
        0,    0,    0, 4189, 4189,    0, 4189,    0,    0,    0,
     4189,    0,    0,    0,    0,    0,    0,    0, 4189, 4190,
        0,    0,    0, 4190,    0,    0,    0,    0, 4190,    0,
        0,    0,    0,    0,    0, 4190,    0,    0,    0,    0,
        0,    0,    0, 4190, 4191, 4191,    0, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4192, 4192,    0, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192,

     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4193, 4193,
     4193,    0,    0,    0,    0,    0,    0, 4193,    0,    0,
        0, 4193,    0, 4193,    0,    0,    0,    0,    0,    0,
     4193,    0,    0,    0,    0,    0,    0,    0, 4193, 4194,
     4194, 4194,    0,    0,    0,    0,    0,    0, 4194,    0,
        0,    0, 4194,    0, 4194,    0,    0,    0,    0,    0,
        0, 4194,    0,    0,    0,    0,    0,    0,    0, 4194,
     4195, 4195, 4195,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4195, 4195,    0, 4195,    0,

        0,    0, 4195,    0,    0,    0,    0,    0,    0,    0,
     4195, 4197, 4197,    0, 4197, 4197, 4197, 4197, 4197, 4197,
     4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197,
     4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197, 4197,
     4197, 4197, 4197, 4198, 4198, 4198,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4198,    0, 4198, 4198,
        0,    0,    0,    0,    0, 4198,    0,    0,    0,    0,
        0,    0,    0, 4198, 4199, 4199, 4199,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4199,
        0,    0,    0,    0,    0,    0, 4199,    0,    0,    0,

        0,    0,    0,    0, 4199, 4200,    0,    0,    0, 4200,
     4200, 4200, 4200, 4200, 4200, 4200, 4200,    0, 4200,    0,
        0, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200,
     4200, 4200, 4200, 4200, 4200, 4200, 4200, 4201, 4201,    0,
     4201,    0,    0,    0, 4201,    0,    0,    0,    0,    0,
        0,    0, 4201, 4202, 4202, 4202,    0,    0,    0, 4202,
        0,    0,    0,    0, 4202,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4202,    0,    0,    0,    0,
        0,    0,    0, 4202, 4203, 4203,    0, 4203, 4203,    0,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,

     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4204, 4204,    0, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,    0, 4204,
     4204,    0, 4204, 4204, 4204, 4204, 4204, 4204,    0, 4204,
     4204,    0, 4204, 4204, 4204, 4204, 4204, 4204, 4205, 4205,
     4205,    0,    0,    0,    0,    0,    0, 4205,    0,    0,
        0,    0,    0, 4205, 4205,    0,    0,    0,    0,    0,
     4205,    0,    0,    0,    0,    0,    0,    0, 4205, 4207,
     4207, 4207, 4207,    0,    0, 4207,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4207,    0,    0,    0,    0,

        0, 4207,    0,    0,    0,    0,    0,    0, 4207, 4207,
     4208, 4208, 4208,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4208,    0, 4208, 4208,    0,    0,    0,
        0,    0, 4208,    0,    0,    0,    0,    0,    0,    0,
     4208, 4209, 4209, 4209,    0,    0,    0, 4209,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4209,    0,    0,    0,    0,    0,    0,
        0, 4209, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214,
     4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214,    0, 4214,
     4214, 4214, 4214, 4214, 4214,    0, 4214, 4214, 4214, 4214,

     4214, 4214, 4214, 4214, 4217, 4217, 4217, 4217, 4217, 4217,
     4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,
        0, 4217, 4217, 4217, 4217, 4217, 4217,    0, 4217, 4217,
     4217, 4217, 4217, 4217, 4217, 4217, 4219, 4219, 4219,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4219,    0,    0,    0, 4219,    0,    0, 4219,    0,
        0,    0,    0,    0,    0,    0, 4219, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,

     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694
    } ;

extern int scanYY_flex_debug;
int scanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scanYYtext;
#line 1 "scanner.l"
/*****************************************************************************
 *
 * $Id: scanner.l,v 1.80 2001/03/19 19:27:41 root Exp $
 *
 * Copyright (C) 1997-2011 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "scanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "code.h"

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 *
 *	statics
 */
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;
static int		lastContext;
static int		lastCContext;
static int              lastDocContext;
static int              lastCPPContext;
static int              lastSkipSharpContext;
static int              lastSkipRoundContext;
static int              lastStringContext;
static int              lastCurlyContext;
static int              lastRoundContext;
static int              lastSquareContext;
static int              lastInitializerContext;
static int              lastClassTemplSpecContext;
static int              lastPreLineCtrlContext;
static int              lastSkipVerbStringContext;
static int              lastCommentInArgContext;
static int              lastCSConstraint;
static Protection	protection;
static Protection	baseProt;
static int		sharpCount   = 0 ;
static int		roundCount   = 0 ;
static int		curlyCount   = 0 ;
static int		squareCount  = 0 ;
static int              padCount     = 0 ;
static QCString         slString;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		tempEntry    = 0 ;
static Entry*		firstTypedefEntry = 0 ;
static Entry*		memspecEntry = 0 ;
static int		yyLineNr     = 1 ;
static int              anonCount    = 0 ;        
static int              anonNSCount  = 0 ;        
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static bool             removeSlashes;
static Specifier 	virt;
static Specifier 	baseVirt;
static QCString         msType,msName,msArgs;
static bool             isTypedef;
static int              tmpDocType;
static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         funcPtrType;
static QCString         templateStr;
static QCString         aliasName;
static QCString         baseName;
static QCString*        specName;
static QCString         formulaText;
static QCString         formulaEnd;
static bool             useOverrideCommands = FALSE;

static SrcLangExt       language;
static bool             insideIDL   = FALSE;		//!< processing IDL code?
static bool             insideJava  = FALSE;		//!< processing Java code?
static bool             insideCS    = FALSE;		//!< processing C# code?
static bool             insideD     = FALSE;		//!< processing D code?
static bool             insidePHP   = FALSE;		//!< processing PHP code?
static bool             insideObjC  = FALSE;            //!< processing Objective C code?
static bool             insideCli   = FALSE;            //!< processing C++/CLI code?
static bool             insideJS    = FALSE;            //!< processing JavaScript code?

static bool             insideCppQuote = FALSE;
static bool             insideProtocolList = FALSE;

static int              argRoundCount;
static int              argSharpCount;
static int              currentArgumentContext;
static int              lastCopyArgStringContext;
static int              lastCopyArgContext;
static QCString         *copyArgString;
static QCString         fullArgString;

static ArgumentList     *currentArgumentList;
static char             lastCopyArgChar;

static QCString         *pCopyQuotedString;
static QCString         *pCopyRoundString;
static QCString         *pCopyCurlyString;

static QGString         *pCopyCurlyGString;
static QGString         *pCopyRoundGString;
static QGString         *pCopyQuotedGString;
static QGString         *pSkipVerbString;
static QStack<Grouping> autoGroupStack;

static bool             insideFormula;
static bool  	        insideTryBlock=FALSE;
static bool             insideCode;
static bool             needsSemi;

//static int              depthIf;
static int  	        initBracketCount;
static QCString         memberGroupRelates;
static QCString         memberGroupInside;
static QCString         xrefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;

static QCString         g_skipBlockName;
static QCString         oldStyleArgType;
static QCString         docBackup;
static QCString         briefBackup;
static bool             g_inputFromFile;

static int              docBlockContext;
static QGString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockAutoBrief;
static char             docBlockTerm;

static QCString         idlAttr;
static QCString         idlProp;

static bool             g_lexInit = FALSE;
static bool             externC;


//-----------------------------------------------------------------------------

// forward declarations
//static void handleGroupStartCommand(const char *header);
//static void handleGroupEndCommand();

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  baseName.resize(0);
  formulaText.resize(0);
  protection = Public;
  baseProt = Public;
  sharpCount = 0;
  roundCount = 0;
  curlyCount = 0;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  baseVirt = Normal;
  isTypedef = FALSE;
  autoGroupStack.clear();
  insideTryBlock = FALSE;
  autoGroupStack.setAutoDelete(TRUE);
  insideFormula = FALSE;
  insideCode=FALSE;
  insideCli=Config_getBool("CPP_CLI_SUPPORT");
  previous = 0;
}

static void initEntry()
{
  if (insideJava) 
  {
    protection = (current_root->spec & Entry::Interface) ?  Public : Package;
  }
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = language;
  //printf("*** initEntry() language=%d\n",language);
  //if (!autoGroupStack.isEmpty())
  //{
  //  //printf("Appending group %s\n",autoGroupStack.top()->groupname.data());
  //  current->groups->append(new Grouping(*autoGroupStack.top()));
  //}
  initGroupInfo(current);
  isTypedef=FALSE;
}


//-----------------------------------------------------------------------------

///// remove any automatic grouping and add new one (if given)
//static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
//{
//   /* remove auto group name from current entry and discard it */
//   Grouping *g = current->groups->first();
//   int i=0; 
//   while (g)
//   {
//     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
//     {
//       current->groups->remove(i);
//       i--;
//     }
//     g=current->groups->next();
//     i++;
//   }
//
//   /* use new group name instead? */
//   if ( newgroup )
//   {
//      current->groups->append(new Grouping(*newgroup, pri));
//   } 
//}
//
//static int newMemberGroupId()
//{
//  static int curGroupId=0;
//  return curGroupId++;
//}
//
// forward declarations
//static void startGroupInDoc();
//static void endGroup();

//-----------------------------------------------------------------------------

static void lineCount()
{
  for( const char* c = scanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}

static void addType( Entry* current )
{
    uint tl=current->type.length();
    if( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void startCommentBlock(bool);
static void handleCommentBlock(const QCString &doc,bool brief);
static void handleParametersCommentBlocks(ArgumentList *al);

//-----------------------------------------------------------------

static bool nameIsOperator(QCString &name)
{
  int i=name.find("operator");
  if (i==-1) return FALSE;
  if (i==0 && !isId(name.at(8))) return TRUE; // case operator ::X
  if (i>0 && !isId(name.at(i-1)) && !isId(name.at(i+8))) return TRUE; // case X::operator
  return FALSE; // case TEXToperatorTEXT
}

//-----------------------------------------------------------------------------

static void setContext()
{
  QCString fileName = yyFileName;
  language   = getLanguageFromFileName(fileName);
  insideIDL  = language==SrcLangExt_IDL;
  insideJava = language==SrcLangExt_Java;
  insideCS   = language==SrcLangExt_CSharp; 
  insideD    = language==SrcLangExt_D;
  insidePHP  = language==SrcLangExt_PHP;
  insideObjC = language==SrcLangExt_ObjC;
  insideJS   = language==SrcLangExt_JS;
  if ( insidePHP )
  {
    useOverrideCommands = TRUE;
  }
  //printf("setContext(%s) insideIDL=%d insideJava=%d insideCS=%d "
  //       "insideD=%d insidePHP=%d insideObjC=%d\n",
  //       yyFileName.data(),insideIDL,insideJava,insideCS,insideD,insidePHP,insideObjC
  //	);
}

//-----------------------------------------------------------------------------

static void prependScope()
{
  if (current_root->section & Entry::SCOPE_MASK)
  {
    //printf("--- prependScope %s to %s\n",current_root->name.data(),current->name.data());
    current->name.prepend(current_root->name+"::");
    if (current_root->tArgLists)
    {
      if (current->tArgLists==0)
      {
	current->tArgLists = new QList<ArgumentList>;
	current->tArgLists->setAutoDelete(TRUE);
      }
      //printf("prependScope #=%d #current=%d\n",current_root->tArgLists->count(),current->tArgLists->count());
      QListIterator<ArgumentList> talsi(*current_root->tArgLists);
      ArgumentList *srcAl=0;
      for (talsi.toLast();(srcAl=talsi.current());--talsi)
      {
        ArgumentList *dstAl = new ArgumentList;
	QListIterator<Argument> tali(*srcAl);
        Argument *a;
        for (;(a=tali.current());++tali)
        {
          dstAl->append(new Argument(*a));
        //printf("appending argument %s %s\n",a->type.data(),a->name.data());
        }	  
        current->tArgLists->insert(0,dstAl);	
      }
    }
  }
}

//-----------------------------------------------------------------------------

/*! Returns TRUE iff the current entry could be a K&R style C function */
static bool checkForKnRstyleC()
{
  if (((QCString)yyFileName).right(2).lower()!=".c") return FALSE; // must be a C file
  if (!current->argList) return FALSE; // must have arguments
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    // in K&R style argument do not have a type, but doxygen expects a type
    // so it will think the argument has no name
    if (a->type.isEmpty() || !a->name.isEmpty()) return FALSE;
  }
  return TRUE;
}

//-----------------------------------------------------------------------------

static void splitKnRArg(QCString &oldStyleArgPtr,QCString &oldStyleArgName)
{
  int si = current->args.length();
  if (oldStyleArgType.isEmpty()) // new argument
  {
    static QRegExp re("([^)]*)");
    int bi1 = current->args.findRev(re);
    int bi2 = bi1!=-1 ? current->args.findRev(re,bi1-1) : -1; 
    char c;
    if (bi1!=-1 && bi2!=-1) // found something like "int (*func)(int arg)"
    {
      int s=bi2+1;
      oldStyleArgType = current->args.left(s);
      int i=s;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
      oldStyleArgType+=current->args.mid(i);
    }
    else if (bi1!=-1) // redundant braces like in "int (*var)"
    {
      int s=bi1;
      oldStyleArgType = current->args.left(s);
      s++;
      int i=s+1;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
    }
    else // normal "int *var"
    {
      int l=si,i=l-1,j;
      char c;
      // look for start of name in "type *name"
      while (i>=0 && isId(current->args.at(i))) i--;
      j=i+1;
      // look for start of *'s
      while (i>=0 && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i--;
      i++;
      if (i!=l)
      {
	oldStyleArgType=current->args.left(i);
	oldStyleArgPtr=current->args.mid(i,j-i);
	oldStyleArgName=current->args.mid(j).stripWhiteSpace();
      }
      else
      {
	oldStyleArgName=current->args.copy().stripWhiteSpace();
      }
    }
  }
  else // continuation like *arg2 in "int *args,*arg2"
  {
    int l=si,j=0;
    char c;
    while (j<l && ((c=current->args.at(j))=='*' || isspace((uchar)c))) j++;
    if (j>0)
    {
      oldStyleArgPtr=current->args.left(j);
      oldStyleArgName=current->args.mid(j).stripWhiteSpace();
    }
    else
    {
      oldStyleArgName=current->args.copy().stripWhiteSpace();
    }
  }
  //fprintf(stderr,"type=%s ptr=%s name=%s\n",oldStyleArgType.data(),oldStyleArgPtr.data(),oldStyleArgName.data());
}

//-----------------------------------------------------------------------------

/*! Update the argument \a name with additional \a type info. For K&R style
 *  function the type is found \e after the argument list, so this routine
 *  in needed to fix up.
 */
static void addKnRArgInfo(const QCString &type,const QCString &name,
                          const QCString &brief,const QCString &docs)
{
  if (current->argList==0) return;
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (a->type==name)
    {
      a->type=type.stripWhiteSpace();
      if (a->type.left(9)=="register ") // strip keyword
      {
	a->type=a->type.mid(9);
      }
      a->name=name.stripWhiteSpace();
      if (!brief.isEmpty() && !docs.isEmpty())
      {
        a->docs=brief+"\n\n"+docs;
      }
      else if (!brief.isEmpty())
      {
        a->docs=brief;
      }
      else
      {
	a->docs=docs;
      }
    }
  }
}

//-----------------------------------------------------------------------------


void fixArgumentListForJavaScript(ArgumentList *al)
{
  if (al==0) return;
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (!a->type.isEmpty() && a->name.isEmpty())
    { // a->type is actually the (typeless) parameter name, so move it
      a->name=a->type;
      a->type.resize(0);
    }
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    if (g_inputFromFile)
    {
       c = inputFile.readBlock(buf,max_size);
       if (c==-1) yy_fatal_error("input in flex scanner failed");
    }
    else
    {
      while( c < max_size && inputString[inputPosition] )
      {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
      }
    }
    return c;
}

/* start command character */
/* language parsing states */





















































































































/** Prototype scanner states */





/** comment parsing states */



#line 9290 "<stdout>"

#define INITIAL 0
#define Define 1
#define DefineEnd 2
#define CompoundName 3
#define ClassVar 4
#define CSConstraintName 5
#define CSConstraintType 6
#define CSIndexer 7
#define ClassCategory 8
#define ClassTemplSpec 9
#define CliPropertyType 10
#define CliPropertyIndex 11
#define CliOverride 12
#define Bases 13
#define BasesProt 14
#define NextSemi 15
#define BitFields 16
#define FindMembers 17
#define FindMembersPHP 18
#define FindMemberName 19
#define FindFields 20
#define FindFieldArg 21
#define Function 22
#define FuncRound 23
#define ExcpRound 24
#define ExcpList 25
#define FuncQual 26
#define Operator 27
#define Array 28
#define ReadBody 29
#define ReadNSBody 30
#define ReadBodyIntf 31
#define Using 32
#define UsingDirective 33
#define SkipCurly 34
#define SkipCurlyCpp 35
#define SkipCurlyEndDoc 36
#define SkipString 37
#define SkipPHPString 38
#define SkipInits 39
#define SkipCPP 40
#define SkipCPPBlock 41
#define SkipComment 42
#define SkipCxxComment 43
#define SkipCurlyBlock 44
#define SkipRoundBlock 45
#define Sharp 46
#define SkipSharp 47
#define SkipRound 48
#define SkipSquare 49
#define SkipRemainder 50
#define TypedefName 51
#define TryFunctionBlock 52
#define TryFunctionBlockEnd 53
#define Comment 54
#define PackageName 55
#define JavaImport 56
#define PHPUse 57
#define PHPUseAs 58
#define CSAccessorDecl 59
#define CSGeneric 60
#define PreLineCtrl 61
#define DefinePHP 62
#define DefinePHPEnd 63
#define OldStyleArgs 64
#define SkipVerbString 65
#define ObjCMethod 66
#define ObjCReturnType 67
#define ObjCParams 68
#define ObjCParamType 69
#define ObjCProtocolList 70
#define ObjCPropAttr 71
#define ObjCSkipStatement 72
#define QtPropType 73
#define QtPropName 74
#define QtPropAttr 75
#define QtPropRead 76
#define QtPropWrite 77
#define ReadInitializer 78
#define GetCallType 79
#define CppQuote 80
#define EndCppQuote 81
#define MemberSpec 82
#define MemberSpecSkip 83
#define EndTemplate 84
#define FuncPtr 85
#define FuncPtrOperator 86
#define EndFuncPtr 87
#define ReadFuncArgType 88
#define ReadTempArgs 89
#define IDLUnionCase 90
#define NSAliasName 91
#define NSAliasArg 92
#define CopyString 93
#define CopyPHPString 94
#define CopyGString 95
#define CopyPHPGString 96
#define CopyRound 97
#define CopyCurly 98
#define GCopyRound 99
#define GCopyCurly 100
#define SkipUnionSwitch 101
#define Specialization 102
#define FuncPtrInit 103
#define FuncFunc 104
#define FuncFuncEnd 105
#define FuncFuncType 106
#define FuncFuncArray 107
#define CopyArgString 108
#define CopyArgPHPString 109
#define CopyArgRound 110
#define CopyArgSharp 111
#define CopyArgComment 112
#define CopyArgCommentLine 113
#define CopyArgVerbatim 114
#define IDLAttribute 115
#define IDLProp 116
#define IDLPropName 117
#define Prototype 118
#define PrototypePtr 119
#define PrototypeQual 120
#define PrototypeExc 121
#define PrototypeSkipLine 122
#define DocLine 123
#define DocBlock 124
#define DocCopyBlock 125

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scanYYlex_destroy (void );

int scanYYget_debug (void );

void scanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE scanYYget_extra (void );

void scanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *scanYYget_in (void );

void scanYYset_in  (FILE * in_str  );

FILE *scanYYget_out (void );

void scanYYset_out  (FILE * out_str  );

yy_size_t scanYYget_leng (void );

char *scanYYget_text (void );

int scanYYget_lineno (void );

void scanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scanYYwrap (void );
#else
extern int scanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( scanYYtext, scanYYleng, 1, scanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scanYYin))==0 && ferror(scanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scanYYlex (void);

#define YY_DECL int scanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scanYYtext and scanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( scanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(scanYYtext[scanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 717 "scanner.l"


#line 9603 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)scanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in scanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scanYYin )
			scanYYin = stdin;

		if ( ! scanYYout )
			scanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
		}

		scanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3695 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 28568 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 719 "scanner.l"
{
  					  curlyCount=0;
					  needsSemi = TRUE;
  					  BEGIN(SkipCurlyBlock); 
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 724 "scanner.l"
{
  				 	  roundCount=0;
  					  BEGIN(SkipRoundBlock);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 728 "scanner.l"
{
					  ++roundCount;
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 731 "scanner.l"
{
  					  if (roundCount )
					    --roundCount ;
					  else
					    BEGIN( NextSemi ) ;
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 737 "scanner.l"
{
  					  ++curlyCount ; 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 740 "scanner.l"
{ 
  				          if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else if (needsSemi)
					  {
					    BEGIN( NextSemi );
					  }
					  else
					  {
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 754 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=NextSemi;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 761 "scanner.l"
{ if (insidePHP) REJECT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 762 "scanner.l"
{
  					  lastStringContext=NextSemi;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 766 "scanner.l"
{ 
  					  unput(*scanYYtext);
  					  BEGIN( FindMembers ); 
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 770 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 774 "scanner.l"
{ // PHP code with unsupported extension?
                                          insidePHP = TRUE;
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 777 "scanner.l"
{ // PHP code start
                                           BEGIN( FindMembers );
					}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 780 "scanner.l"
{ // PHP code start
					  lineCount() ;
                                          BEGIN( FindMembers );
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 784 "scanner.l"
{ // Non-PHP code text, ignore
  					}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 786 "scanner.l"
{ // Non-PHP code text, ignore
  					  yyLineNr++;
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 789 "scanner.l"
{ // Non-PHP code text, ignore
				        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 791 "scanner.l"
{ // PHP code end
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    REJECT;
                                        }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 797 "scanner.l"
{ if (insidePHP)
					    BEGIN( NextSemi );
					  else
					    REJECT;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 802 "scanner.l"
{ // Mozilla XPIDL lang-specific block
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 806 "scanner.l"
{ // Mozilla XPIDL lang-specific block end
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 810 "scanner.l"
{ // IDL or Borland C++ builder property 
  					  current->mtype = mtype = Property;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 820 "scanner.l"
{ current->mtype = mtype = DCOP;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 829 "scanner.l"
{ current->mtype = mtype = Signal;
  
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 839 "scanner.l"
{
					  current->protection = protection = Public ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 849 "scanner.l"
{
					  current->protection = protection = Protected ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 859 "scanner.l"
{
					  current->protection = protection = Private ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 868 "scanner.l"
{ 
					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 877 "scanner.l"
{  // for now treat C++/CLI's internal as package...
  					  if (insideCli)
					  {
					    current->protection = protection = Package ;
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    lineCount() ;
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 893 "scanner.l"
{  
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 902 "scanner.l"
{ 
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 911 "scanner.l"
{ 
  					  if (insideCli)
					  {
					    // C++/CLI event
					    lineCount() ;
  					    current->mtype = mtype = Event;
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CliPropertyType );
					  }
					  else if (insideCS)
					  {
					    lineCount() ;
  					    current->mtype = Event;
					    current->bodyLine = yyLineNr;
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 932 "scanner.l"
{
  					   if (insideCli)
					   {
					     // C++/CLI property
					     lineCount() ;
  					     current->mtype = mtype = Property;
					     current->bodyLine = yyLineNr;
					     curlyCount=0;
					     BEGIN( CliPropertyType );
					   }
					   else
					   {
					     REJECT;
					   }
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 947 "scanner.l"
{
  					  addType( current );
  					  current->name = scanYYtext;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 951 "scanner.l"
{ // C++/CLI indexed property
  					  current->name += scanYYtext;
					  BEGIN( CliPropertyIndex );
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 955 "scanner.l"
{
					  curlyCount=0;
					  //printf("event: '%s' '%s'\n",current->type.data(),current->name.data());
  					  BEGIN( CSAccessorDecl );
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 960 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 964 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 967 "scanner.l"
{
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 969 "scanner.l"
{
  					  addType( current );
  					  current->type += scanYYtext;
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 973 "scanner.l"
{
                                          BEGIN( CliPropertyType );
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 977 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 980 "scanner.l"
{ 
                                          if (!current->type.isEmpty())
					  {
					    REJECT;
                                          }
					  else
					  { 
                                            current->mtype = mtype = Property;
                                            lineCount();
					  }
                                        }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 991 "scanner.l"
{
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1000 "scanner.l"
{
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1009 "scanner.l"
{
  					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1018 "scanner.l"
{
  					  if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
  					    lineCount();
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    current->section = Entry::FUNCTION_SEC;
					    current->protection = protection = Public ;
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					    current->virt = Virtual;
					    current->stat=scanYYtext[0]=='+';
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    BEGIN( ObjCMethod );
					  }
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1043 "scanner.l"
{ // start of method's return type
  					  BEGIN( ObjCReturnType );
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1046 "scanner.l"
{ // found method name
  					  if (current->type.isEmpty())
					  {
					    current->type = "id";
					  }
					  current->name = scanYYtext;
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1053 "scanner.l"
{ // start of parameter list
  					  current->name += ':';
  					  Argument *a = new Argument;
					  current->argList->append(a);
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1059 "scanner.l"
{ // TODO: check if nested braches are possible.
  					  current->type = scanYYtext;
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1062 "scanner.l"
{
  					  BEGIN( ObjCMethod );
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1065 "scanner.l"
{ // Keyword of parameter
					  QCString keyw = scanYYtext;
					  keyw=keyw.left(keyw.length()-1); // strip :
					  if (keyw.isEmpty())
					  {
					    current->name += " :";
					  }
					  else
					  {
					    current->name += keyw+":";
					  }
					  if (current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  Argument *a = new Argument;
  					  a->attrib=(QCString)"["+keyw+"]";
					  current->argList->append(a);
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1084 "scanner.l"
{ // name of parameter
  					  lineCount();
  					  current->argList->getLast()->name=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1088 "scanner.l"
{ // name of parameter
  					  lineCount();
					  // do we want the comma as part of the name?
  					  //current->name += ",";
  					  Argument *a = new Argument;
  					  a->attrib="[,]";
  					  a->type="...";
					  current->argList->append(a);
  					}
	YY_BREAK
/*
<ObjCParams>":"				{ 
					  current->name += ':';
					}
   */
case 56:
YY_RULE_SETUP
#line 1102 "scanner.l"
{
  					  BEGIN( ObjCParamType );
  					}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1105 "scanner.l"
{
  					  current->argList->getLast()->type=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1108 "scanner.l"
{
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1111 "scanner.l"
{ // end of method declaration
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
					  //printf("argList=%s\n",current->args.data());
  					  unput(';');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1121 "scanner.l"
{ // start of a method body
  					  lineCount();
                                          //printf("Type=%s Name=%s args=%s\n",
					  //    current->type.data(),current->name.data(),argListToString(current->argList).data()
					  //    );
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
                                          unput('{');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1134 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1137 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
  					    lineCount();
					    lastSkipRoundContext = YY_START;
					    roundCount=1;
					    BEGIN( SkipRound );
					  }
					  else if (strncmp(scanYYtext,"@property",9)==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Readable | Entry::Writable | Entry::Assign;
					    current->protection = Public ;
					    unput('(');
					    BEGIN( ObjCPropAttr );
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1158 "scanner.l"
{ 
                                          current->read = scanYYtext+7;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1161 "scanner.l"
{ 
                                          current->write = scanYYtext+7;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1164 "scanner.l"
{
					  current->spec&=~Entry::Writable;
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1167 "scanner.l"
{ // default
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1169 "scanner.l"
{ // default
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1171 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Retain;
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1175 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Copy;
  					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1179 "scanner.l"
{
					  current->spec|=Entry::NonAtomic;
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1182 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1185 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
					    // skip annotation
					  }
					  else if (strcmp(scanYYtext,"@property")==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Writable | Entry::Readable | Entry::Assign;
					    current->protection = Public ;
					  }
					  else if (strcmp(scanYYtext,"@synthesize")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else if (strcmp(scanYYtext,"@dynamic")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1209 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1212 "scanner.l"
{
  					  isTypedef=FALSE;
					  current->name = scanYYtext;
					  current->name = substitute(current->name,".","::");
					  current->name = substitute(current->name,"\\","::");
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  curlyCount=0;
					  current_root->addSubEntry(current);
                                          current_root = current ;
					  current             = new Entry ;
					  initEntry();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1230 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1233 "scanner.l"
{
  					  current->type += " initonly ";
					  if (insideCli) current->spec |= Entry::Initonly;
					  lineCount();
  					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1238 "scanner.l"
{ current->type += " static ";
  					  current->stat = TRUE;
					  lineCount();
					}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1242 "scanner.l"
{
  					  current->stat = FALSE;
					  current->explicitExternal = TRUE;
					  lineCount();
  					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1247 "scanner.l"
{ current->type += " virtual ";
					  current->virt = Virtual;
					  lineCount();
					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1251 "scanner.l"
{ 
                                          if (!insidePHP) 
					  {
					    current->type += " abstract ";
					    current->virt = Pure;
					  }
					  else
					  {
					    current->spec|=Entry::Abstract;
					  }
					  lineCount();
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1263 "scanner.l"
{ current->spec|=Entry::Inline;
                                          lineCount(); 
                                        }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1266 "scanner.l"
{ current->spec|=Entry::Mutable;
                                          lineCount(); 
                                        }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1269 "scanner.l"
{ current->spec|=Entry::Explicit;
                                          lineCount(); 
                                        }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1272 "scanner.l"
{ // Objective C 2.0 protocol required section
                                          current->spec=(current->spec & ~Entry::Optional) | Entry::Required;
                                          lineCount(); 
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1276 "scanner.l"
{  // Objective C 2.0 protocol optional section
                                          current->spec=(current->spec & ~Entry::Required) | Entry::Optional;
                                          lineCount(); 
                                        }
	YY_BREAK
/*
<FindMembers>{B}*"import"{BN}+		{ // IDL import keyword
  					  BEGIN( NextSemi );
  					}
  */
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1285 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 87:
/* rule 87 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1286 "scanner.l"
{ 
  					  isTypedef=FALSE;
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  if (insidePHP)
					  {
					    BEGIN( PackageName );
					  }
					  else
					  {
  					    BEGIN( CompoundName ); 
					  }
					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1303 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "module" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else if (insideD)
					  {
					    lineCount();
					    BEGIN(PackageName);
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1326 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "library" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1344 "scanner.l"
{ // M$/Corba IDL/Java interface
					  lineCount();
                                          if (insideIDL || insideJava || insideCS || insideD || insidePHP)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
                                            current->spec = Entry::Interface;
					    addType( current ) ;
					    current->type += " interface" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    BEGIN( CompoundName );
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
  					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1364 "scanner.l"
{ // Objective-C class implementation
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::OBJCIMPL_SEC;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " implementation" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1378 "scanner.l"
{ // Objective-C class interface, or Java attribute
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  if (!insideJava)
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " interface" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1396 "scanner.l"
{ // Objective-C protocol definition
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Protocol;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " protocol" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1411 "scanner.l"
{ // Corba IDL exception
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Exception;
					  addType( current ) ;
					  current->type += " exception" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 95:
#line 1424 "scanner.l"
case 96:
/* rule 96 can match eol */
#line 1425 "scanner.l"
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1425 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
					  addType( current ) ;
					  current->type += " class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  if (scanYYtext[0]=='@')
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  if (insidePHP && current->spec&Entry::Abstract)
					  {
					    // convert Abstract to AbstractClass
					    current->spec=(current->spec&~Entry::Abstract)|Entry::AbstractClass;
					  }
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 98:
#line 1448 "scanner.l"
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1448 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Value;
					  addType( current ) ;
					  current->type += " value class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 100:
#line 1462 "scanner.l"
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1462 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Ref;
					  addType( current ) ;
					  current->type += " ref class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 102:
#line 1476 "scanner.l"
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1476 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  addType( current ) ;
					  current->type += " interface class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1489 "scanner.l"
{
  					  if (insideIDL)
					  {
					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
					    addType( current ) ;
					    current->type += " coclass" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    lineCount() ;
					    BEGIN( CompoundName ) ;
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
					  }
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
#line 1511 "scanner.l"
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 1511 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC ;
                                          current->spec    = Entry::Struct;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 107:
#line 1527 "scanner.l"
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1527 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Value;
					  addType( current ) ;
					  current->type += " value struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 109:
#line 1541 "scanner.l"
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1541 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Ref;
					  addType( current ) ;
					  current->type += " ref struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 111:
#line 1555 "scanner.l"
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1555 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Interface;
					  addType( current ) ;
					  current->type += " interface struct";
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
#line 1569 "scanner.l"
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1569 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Union;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " union" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
#line 1585 "scanner.l"
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1585 "scanner.l"
{ // for IDL: typedef [something] enum
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::ENUM_SEC ;
					  addType( current ) ;
					  current->type += " enum" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1597 "scanner.l"
{  // A::operator()<int>(int arg)
  					  lineCount();
					  current->name += "()";
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1602 "scanner.l"
{
  					  lineCount();
    					  current->name += scanYYtext ;
					  current->name = current->name.simplifyWhiteSpace();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1608 "scanner.l"
{ // can occur when importing members
  					  unput(';');
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1612 "scanner.l"
{ 
    					  lineCount();
    					  current->name += *scanYYtext ;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1616 "scanner.l"
{ /* skip guided templ specifiers */ }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1617 "scanner.l"
{
					  current->name = current->name.simplifyWhiteSpace();
					  unput(*scanYYtext);
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1622 "scanner.l"
{  // generic is a C++/CLI extension
  					  lineCount();
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  //current->spec |= (scanYYtext[0]=='g') ? Entry::Generic : Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  fullArgString = templateStr;
					  copyArgString = &templateStr;
					  currentArgumentContext = FindMembers;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1639 "scanner.l"
{ // namespace alias
                                          lineCount(); 
  					  BEGIN( NSAliasName );
					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1643 "scanner.l"
{
  					  aliasName = scanYYtext;
					  BEGIN( NSAliasArg );
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1647 "scanner.l"
{
  					  //printf("Inserting namespace alias %s::%s->%s\n",current_root->name.data(),aliasName.data(),scanYYtext);
					  //if (current_root->name.isEmpty())
					  //{
                                          // TODO: namespace aliases are now treated as global entities
                                          // while they should be aware of the scope they are in
                                            Doxygen::namespaceAliasDict.insert(aliasName,new QCString(scanYYtext));
					  //}
					  //else
					  //{
                                          //  Doxygen::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
					  //	new QCString(current_root->name+"::"+scanYYtext));
					  //}
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1661 "scanner.l"
{
  					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1664 "scanner.l"
{
  					  lineCount();
					  aliasName=scanYYtext;
                                          //current->fileName = yyFileName; 
  					  //current->section=Entry::USINGDIR_SEC;
					  //current_root->addSubEntry(current);
					  //current = new Entry;
					  //initEntry();
					  BEGIN(PHPUseAs);
					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1674 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1677 "scanner.l"
{
                                          Doxygen::namespaceAliasDict.insert(scanYYtext,
					       new QCString(removeRedundantWhiteSpace(
						   substitute(aliasName,"\\","::"))));
					  aliasName.resize(0);
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1683 "scanner.l"
{
                                          if (!aliasName.isEmpty())
					  {
					    int i=aliasName.findRev('\\');
					    QCString an = removeRedundantWhiteSpace(
						    substitute(aliasName,"\\","::"));
					    Doxygen::namespaceAliasDict.insert(aliasName.mid(i+1),
						                        new QCString(an));
					    current->name     = an;
					    current->fileName = yyFileName; 
					    current->section=Entry::USINGDECL_SEC;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    initEntry();
					  }
					  if (*scanYYtext==',')
					  {
					    BEGIN(PHPUse);
					  }
					  else
					  {
  					    BEGIN(FindMembers);
					  }
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1707 "scanner.l"
{ // package import => add as a using directive
  					  lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope.left(scope.length()-1),".","::"));
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1718 "scanner.l"
{ // class import => add as a using declaration
                                          lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
					  current->fileName = yyFileName; 
					  if (insideD) 
					  {
					    current->section=Entry::USINGDIR_SEC;
					  }
					  else
					  {
					    //printf("import name = %s -> %s\n",scanYYtext,current->name.data());
					    current->section=Entry::USINGDECL_SEC;
					  }
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1737 "scanner.l"
{ 
					  current->startLine=yyLineNr; 
                                          lineCount(); 
                                          BEGIN(Using); 
                                        }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1742 "scanner.l"
{ lineCount(); BEGIN(UsingDirective); }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1743 "scanner.l"
{
                                          lineCount();
  					  current->name=scanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  if (insideCS) /* Hack: in C# a using declaration and 
							   directive have the same syntax, so we
							   also add it as a using directive here
							 */
					  {
					    current->name=scanYYtext;
					    current->fileName = yyFileName; 
					    current->startLine = yyLineNr;
					    current->section=Entry::USINGDIR_SEC;
					    current_root->addSubEntry(current);
					    current             = new Entry ;
					  }
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1765 "scanner.l"
{ current->name=removeRedundantWhiteSpace(scanYYtext);
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1773 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1774 "scanner.l"
{ // guided template decl
					  QCString n=scanYYtext;
					  addType( current );
					  current->name=n.left(n.length()-2);
					}
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1779 "scanner.l"
{ // Note: this could be a return type!
  					  sharpCount=0;
					  lineCount();
					  addType( current );
  					  current->name=scanYYtext;
					  current->name=current->name.stripWhiteSpace();
					  //current->scopeSpec.resize(0);
					  // currentTemplateSpec = &current->scopeSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
					}
	YY_BREAK
case 141:
/* rule 141 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1792 "scanner.l"
{
  					  sharpCount=0;
					  roundCount=0;
					  lineCount();
  					  current->name+=((QCString)scanYYtext).stripWhiteSpace();
					  //current->memberSpec.resize(0);
					  // currentTemplateSpec = &current->memberSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1804 "scanner.l"
{
  					  current->name+=scanYYtext;
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1808 "scanner.l"
{ 
  					  current->name+='<';
  					  // *currentTemplateSpec+='<'; 
					  sharpCount++; 
					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1813 "scanner.l"
{
  					  if (insideJava || insideCS || insideCli || roundCount==0)
					  {
					    unput('>');
					    unput(' ');
					    unput('>');
					  }
					  else
					  {
  					    current->name+=scanYYtext;
					  }
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1826 "scanner.l"
{
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {  
					    //printf("Found %s\n",current->name.data());
					    BEGIN(FindMembers);
					  }
					}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 1835 "scanner.l"
{ 
  					  lineCount();
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    current->bodyLine = yyLineNr;
					    current->args = "(";
					    currentArgumentContext = FuncQual;
					    fullArgString = current->args.copy();
					    copyArgString = &current->args;
					    //printf("Found %s\n",current->name.data());
					    BEGIN( ReadFuncArgType ) ;
					  }
					}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1850 "scanner.l"
{ // function pointer returning a template instance
  					  lineCount();
  					  current->name+='>';
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1855 "scanner.l"
{
  					  lineCount();
  					  current->name+='>';
  					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    BEGIN(FindMemberName);
					  }
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1864 "scanner.l"
{ current->name+=*scanYYtext;
                                          roundCount++; 
                                        }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1867 "scanner.l"
{ current->name+=*scanYYtext;
                                          if (roundCount>0) roundCount--; 
                                        }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1870 "scanner.l"
{ 
  					  current->name+=*scanYYtext;
  					  // *currentTemplateSpec+=*scanYYtext; 
					}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1874 "scanner.l"
{
					  if (insidePHP)
					  {
					    current->bodyLine = yyLineNr;
					    BEGIN( DefinePHP );
					  }
					  else
					    REJECT;
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1883 "scanner.l"
{ // Qt object macro
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1885 "scanner.l"
{ // Qt property declaration
					  current->protection = protection = Public ;
  					  current->mtype = mtype = Property;
					  current->type.resize(0);
  					  BEGIN(QtPropType);
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1891 "scanner.l"
{ // start of property arguments
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1893 "scanner.l"
{ // end of property arguments
  					  unput(';');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1897 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1900 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1903 "scanner.l"
{
  					  current->type+=scanYYtext;
                                          BEGIN(QtPropName);
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1907 "scanner.l"
{
  					  current->name=scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1911 "scanner.l"
{
  					  current->spec |= Entry::Readable;
					  BEGIN(QtPropRead);
  					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1915 "scanner.l"
{
  					  current->spec |= Entry::Writable;
					  BEGIN(QtPropWrite);
  					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1919 "scanner.l"
{ // reset method => not supported yet
  					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1921 "scanner.l"
{ // scriptable property => not supported yet
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1923 "scanner.l"
{ // designable property => not supported yet
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1925 "scanner.l"
{
  					  current->read = scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1929 "scanner.l"
{
  					  current->write = scanYYtext;
					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 1933 "scanner.l"
{
  					  current->name=scanYYtext;
				          BEGIN(FindMembers);
			 	        }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 1937 "scanner.l"
{
					  lineCount();
                                          if (insideIDL && scanYYleng==9 && strcmp(scanYYtext,"cpp_quote")==0)
					  {
					    BEGIN(CppQuote);
					  }
					  else if ((insideIDL || insideJava || insideD) && scanYYleng==6 && strcmp(scanYYtext,"import")==0)
					  {
					    if (insideIDL)
					      BEGIN(NextSemi);
					    else // insideJava or insideD
					      BEGIN(JavaImport);
					  }
					  else if (insidePHP && strcmp(scanYYtext,"use")==0)
					  {
					    BEGIN(PHPUse);
					  }
					  else if (insideJava && strcmp(scanYYtext,"package")==0)
					  {
  					    lineCount();
					    BEGIN(PackageName);
					  }
					  else if (insideIDL && strcmp(scanYYtext,"case")==0)
					  {
					    BEGIN(IDLUnionCase);
					  }
					  else if (insideTryBlock && strcmp(scanYYtext,"catch")==0)
					  {
					    insideTryBlock=FALSE;
					    BEGIN(TryFunctionBlock);
					  }
					  else if (insideJS && strcmp(scanYYtext,"var")==0)
					  { // javascript variable
					    current->type="var";
					  }
					  else if (insideJS && strcmp(scanYYtext,"function")==0)
					  { // javascript function
					    current->type="function";
					  }
					  else if (insideCS && strcmp(scanYYtext,"this")==0)
					  {
					    // C# indexer
					    addType( current ) ;
					    current->name="this";
					    BEGIN(CSIndexer);
					  }
					  else
					  {
					    if (YY_START==FindMembers)
					    {
					      addType( current ) ;
					    }
					    bool javaLike = insideJava || insideCS || insideD || insidePHP || insideJS;
					    if (javaLike && strcmp(scanYYtext,"public")==0)
					    {
					      current->protection = Public;
					    }
					    else if (javaLike && strcmp(scanYYtext,"protected")==0)
					    {
					      current->protection = Protected;
					    }
					    else if (javaLike && strcmp(scanYYtext,"private")==0)
					    {
					      current->protection = Private;
					    }
					    else if (javaLike && strcmp(scanYYtext,"static")==0)
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
			 		      current->stat = TRUE;
					    }
					    else
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
					      if (current->name.left(7)=="static ")
					      {
						current->stat = TRUE;
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(7)=="inline ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="inline";
						}
						else
						{
						  current->type+="inline ";
						}
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(6)=="const ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="const";
						}
						else
						{
						  current->type+="const ";
						}
						current->name=current->name.mid(6);
					      }
					    }
					    QCString tmp=scanYYtext;
					    if (nameIsOperator(tmp))
                                            {
					      BEGIN( Operator );
                                            }
					    else
                                            {
		 			      BEGIN(FindMembers);
                                            }
					  }
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2057 "scanner.l"
{
					  current->name+=removeRedundantWhiteSpace(scanYYtext);
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2061 "scanner.l"
{ // some number where we did not expect one
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2063 "scanner.l"
{
  					  if (insideJava || insideCS || insideD)
					  {
					    current->name+=".";
					  }
  					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2069 "scanner.l"
{
					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2072 "scanner.l"
{
  					  insideCppQuote=TRUE;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2076 "scanner.l"

	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2077 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 2078 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2079 "scanner.l"

	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 2080 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2081 "scanner.l"
{ 
					  curlyCount=0;
					  lastCurlyContext = TryFunctionBlockEnd ;
  					  BEGIN( SkipCurly );
					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2086 "scanner.l"

	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 2087 "scanner.l"
{ lineCount(); BEGIN(TryFunctionBlock); // {BN}* added to fix bug 611193
					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 2089 "scanner.l"
{ unput(*scanYYtext); // rule added to fix bug id 601138
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2092 "scanner.l"
{ unput(*scanYYtext);
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2095 "scanner.l"
{
  					  insideCppQuote=FALSE;
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2099 "scanner.l"
{ if (insidePHP)
					    REJECT;
					  lastCPPContext = YY_START;
					  BEGIN( SkipCPP ) ;
					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2104 "scanner.l"
{
  					  if (insidePHP)
					    REJECT;
  					  current->bodyLine = yyLineNr;
  					  BEGIN( Define );
  					}
	YY_BREAK
case 188:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2110 "scanner.l"
{ /* line control directive */
                                          yyLineNr = atoi(&scanYYtext[1]);
					  //printf("setting line number to %d\n",yyLineNr);
					  lastPreLineCtrlContext = YY_START;
					  if (YY_START==ReadBody || 
					      YY_START==ReadNSBody ||
					      YY_START==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
  					  BEGIN( PreLineCtrl );
  					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2122 "scanner.l"
{
				          yyFileName = stripQuotes(scanYYtext);
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
					    current->program+=scanYYtext;
					  }
  					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2131 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                        }
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 2139 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                          yyLineNr++;
  					  BEGIN( lastPreLineCtrlContext );
  					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2149 "scanner.l"

	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 2150 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 2151 "scanner.l"
{ yyLineNr++ ;
					  BEGIN( lastCPPContext) ;
					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2154 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
					  currentArgumentContext = DefineEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
/*
<DefineArg>")"				{
  					  //printf("Define with args\n");
  					  current->args += ')';
  					  BEGIN( DefineEnd );
  					}
<DefineArg>.				{
  					  current->args += *scanYYtext;
  					}
  */
case 196:
YY_RULE_SETUP
#line 2174 "scanner.l"
{
  					  //printf("Define `%s' without args\n",scanYYtext);
  					  current->bodyLine = yyLineNr;
  					  current->name = scanYYtext;
					  BEGIN(DefineEnd);
  					}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 2180 "scanner.l"
{
  					  //printf("End define: doc=%s docFile=%s docLine=%d\n",current->doc.data(),current->docFile.data(),current->docLine);
					  yyLineNr++;
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::DEFINE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2194 "scanner.l"
{
  					  //printf("End define\n");
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::ENUM_SEC;  //HACK!
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 2207 "scanner.l"

	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 2208 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2211 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
					    lastStringContext=DefineEnd;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2222 "scanner.l"

	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 2223 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1);
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
  					  lastRoundContext = DefinePHPEnd;
  					  pCopyRoundString = &current->args;
					  roundCount = 0;
  					  BEGIN( CopyRound );
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2236 "scanner.l"
{  // ^ and % are C++/CLI extensions
  					  if (insideCli)
					  {
  					    addType( current );
                                            current->name = scanYYtext ; 
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2247 "scanner.l"
{ 
  					  if (current->type.stripWhiteSpace().right(1)!=scanYYtext)
					  {
                                            current->name += scanYYtext ;  
					  }
  					  addType( current );
					}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 2254 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ';';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 2277 "scanner.l"
{
  					  lineCount();
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ',';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 2296 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = 0;
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 2320 "scanner.l"
{
  					  //handleGroupStartCommand(current->name);
                                          if (previous && previous->section==Entry::GROUPDOC_SEC)
					  {
					    // link open command to the group defined in the previous entry
					    openGroup(previous,yyFileName,yyLineNr);
					  }
					  else
					  {
					    // link open command to the current entry
					    openGroup(current,yyFileName,yyLineNr);
					  }
					  //current = tmp;
					  initEntry();
					  if (scanYYtext[1]=='/')
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='/')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlockAutoBrief = FALSE;
					      docBlock.resize(0);
					      docBlockTerm = 0;
					      startCommentBlock(TRUE);
					      BEGIN(DocLine);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipCxxComment);
					    }
					  }
					  else
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='*')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlock.resize(0);
					      docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                          ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					      docBlockTerm = 0;
					      startCommentBlock(FALSE);
					      BEGIN(DocBlock);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipComment);
					    }
					  }
  					}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 2372 "scanner.l"
{
  					  closeGroup(current,yyFileName,yyLineNr);
  					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 2375 "scanner.l"
{ // in PHP code this could also be due to "<?="
  					  current->bodyLine = yyLineNr;
					  lastInitializerContext = YY_START;
					  initBracketCount=0;
					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
/* Read initializer rules */
case 212:
YY_RULE_SETUP
#line 2382 "scanner.l"
{
  					  lastRoundContext=YY_START;
  					  pCopyRoundGString=&current->initializer;
					  roundCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyRound);
  					}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 2389 "scanner.l"
{
  					  lastCurlyContext=YY_START;
  					  pCopyCurlyGString=&current->initializer;
					  curlyCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyCurly);
  					}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 2396 "scanner.l"
{
  					  //printf(">> initializer `%s' <<\n",current->initializer.data());
  					  if (*scanYYtext==';' || lastInitializerContext==FindFields)
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else if (*scanYYtext==',' && initBracketCount==0) // for "int a=0,b=0"
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else
					  {
  					    current->initializer+=*scanYYtext; 
					  }
  					}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 2413 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
  					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
                                            lastStringContext=YY_START;
  					    current->initializer=scanYYtext; 
  					    pCopyQuotedGString=&current->initializer;
					    BEGIN(CopyGString);
					  }
					}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 2426 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 2429 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 2432 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
  					}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 2435 "scanner.l"
{
  					  initBracketCount++;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 2439 "scanner.l"
{
  					  initBracketCount--;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 2443 "scanner.l"
{	
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = &current->initializer;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    current->initializer+=scanYYtext; 
					  }
  					}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 2456 "scanner.l"
{ 
                                          if (insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {  
					    current->initializer+=scanYYtext; 
					  }
                                        } 
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 2466 "scanner.l"
{
  					  current->initializer+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 2470 "scanner.l"
{ 
  					  //printf("insideCS=%d\n",insideCS);
  					  current->initializer+=scanYYtext;
                                          if (!insideCS && !insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    // C#/ObjC verbatim string
					    lastSkipVerbStringContext=YY_START;
					    pSkipVerbString=&current->initializer;
					    BEGIN(SkipVerbString);
					  }
					}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 2485 "scanner.l"
{
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 2488 "scanner.l"
{ // quote escape
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 2491 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  BEGIN(lastSkipVerbStringContext);
					}
	YY_BREAK
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 2495 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 2499 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
  					}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 2502 "scanner.l"
{
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    current->initializer+=scanYYtext;
  					}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 2508 "scanner.l"
{ 
  					  current->initializer+=*scanYYtext; 
					}
	YY_BREAK
/* generic quoted string copy rules */
case 232:
YY_RULE_SETUP
#line 2513 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 2516 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 2520 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 2524 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 2527 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					  yyLineNr++;
  					}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 2531 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					}
	YY_BREAK
/* generic quoted growable string copy rules */
case 238:
YY_RULE_SETUP
#line 2536 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 2539 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 2543 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 2547 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 2550 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					  yyLineNr++;
  					}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 2554 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules */
case 244:
YY_RULE_SETUP
#line 2559 "scanner.l"
{
					  *pCopyRoundString+=*scanYYtext;
  					  pCopyQuotedString=pCopyRoundString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 2565 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 2569 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 2574 "scanner.l"
{
  					  yyLineNr++;
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 2578 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedString = pCopyRoundString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					  else
					  {
					    *pCopyRoundString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 2591 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 2601 "scanner.l"
{
  					  *pCopyRoundString+=scanYYtext;
  					}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 2604 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules for growable strings */
case 252:
YY_RULE_SETUP
#line 2609 "scanner.l"
{
					  *pCopyRoundGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyRoundGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 2615 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 2619 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 255:
/* rule 255 can match eol */
YY_RULE_SETUP
#line 2624 "scanner.l"
{
  					  yyLineNr++;
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 2628 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = pCopyRoundGString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    *pCopyRoundGString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 2641 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 2651 "scanner.l"
{
  					  *pCopyRoundGString+=scanYYtext;
  					}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 2654 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules */
case 260:
YY_RULE_SETUP
#line 2659 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  pCopyQuotedString=pCopyCurlyString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 2665 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedString=pCopyCurlyString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 2674 "scanner.l"
{
  					  *pCopyCurlyString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 2678 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 2683 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 2692 "scanner.l"
{
  					  *pCopyCurlyString+=scanYYtext;
  					}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 2695 "scanner.l"
{ *pCopyCurlyString+=scanYYtext; }
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 2696 "scanner.l"
{
  					  yyLineNr++;
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 2700 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules for growable strings */
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 2705 "scanner.l"
{ // start of included file marker
                                        }
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 2707 "scanner.l"
{ // end of included file marker
					  QCString line = QCString(scanYYtext);
					  int s = line.find(' ');
					  int e = line.find('"',s);
					  yyLineNr = line.mid(s,e-s).toInt();
					  if (scanYYtext[scanYYleng-1]=='\n')
					  {
					    yyLineNr++;
					  }
  					}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 2717 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyCurlyGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 2723 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedGString=pCopyCurlyGString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 2732 "scanner.l"
{
  					  *pCopyCurlyGString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 2736 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 2741 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 2750 "scanner.l"
{
  					  *pCopyCurlyGString+=scanYYtext;
  					}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 2753 "scanner.l"
{ *pCopyCurlyGString+=scanYYtext; }
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 2754 "scanner.l"
{
  					  yyLineNr++;
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2758 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
/* ---------------------- */
case 280:
YY_RULE_SETUP
#line 2765 "scanner.l"
{
  					  if (current->type.isEmpty()) // anonymous padding field, e.g. "int :7;"
					  {
					    addType(current);
					    current->name.sprintf("__pad%d__",padCount++);
					  }
  					  BEGIN(BitFields);
					  current->bitfields+=":";
  					}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 2774 "scanner.l"
{
  					  current->bitfields+=*scanYYtext;
  					}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 2777 "scanner.l"
{ 
  					  QCString oldType = current->type.copy();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine = yyLineNr;
					  }
                                          if ( insidePHP && current->type.left(3) == "var" )
                                          {
                                            current->type = current->type.mid(3);
                                          }
					  if (isTypedef && current->type.left(8)!="typedef ")
					  {
					    current->type.prepend("typedef ");
					  }
					  bool needNewCurrent=FALSE;
					  if (!current->name.isEmpty() && current->section!=Entry::ENUM_SEC)
					  {
					    current->type=current->type.simplifyWhiteSpace();
					    current->args=removeRedundantWhiteSpace(current->args);
					    current->name=current->name.stripWhiteSpace();
					    if (current->section==Entry::CLASS_SEC) // remove spec for "struct Bla bla;"
					    {
					    	current->spec = 0;
					    }
					    current->section = Entry::VARIABLE_SEC ;
					    current->fileName = yyFileName;
					    current->startLine = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    needNewCurrent=TRUE;
					  }
					  if ( *scanYYtext == ',')
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry(*current);
					      initEntry();
					    }
					    current->name.resize(0);
					    current->args.resize(0);
					    current->brief.resize(0);
					    current->doc.resize(0);
					    current->initializer.resize(0);
					    current->bitfields.resize(0);
					    int i=oldType.length(); 
					    while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
					    current->type = oldType.left(i);
					  }
					  else
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry ;
					    }
					    else if (current->groups)
					    {
					      current->groups->clear();
					    }
					    initEntry();
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 2839 "scanner.l"
{ 
  					  if (!insideCS &&  
					      (current->name.isEmpty() || 
					       current->name=="typedef"
					      )
					     ) // IDL function property
 					  {
          				    squareCount=1;
					    lastSquareContext = YY_START;
					    idlAttr.resize(0);
					    idlProp.resize(0);
					    current->mtype = mtype;
					    BEGIN( IDLAttribute );
					  }
                                          else if (insideCS &&
                                                  current->name.isEmpty())
                                          {
                                            squareCount=1;
                                            lastSquareContext = YY_START;
                                            // Skip the C# attribute
                                            // for this member
                                            current->args.resize(0);
                                            BEGIN( SkipSquare );
                                          }
					  else
					  {
  					    current->args += scanYYtext ;
					    squareCount=1;
					    BEGIN( Array ) ;
					  }
					}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 2870 "scanner.l"
{
  					  // end of IDL function attribute
					  if (--squareCount<=0)
					  {
					    lineCount();
					    if (current->mtype == Property)
					      BEGIN( IDLPropName );
					    else
					      BEGIN( lastSquareContext );
					  }
					}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 2881 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Settable;
					}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 2888 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Gettable;
					}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 2895 "scanner.l"
{
					}
	YY_BREAK
case 288:
/* rule 288 can match eol */
YY_RULE_SETUP
#line 2897 "scanner.l"
{
					  // return type (probably HRESULT) - skip it
					}
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 2900 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
  					  current->startLine = yyLineNr;
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 2906 "scanner.l"
{  // attribute of a parameter
					   idlAttr = scanYYtext;
					   idlAttr=idlAttr.stripWhiteSpace();
					}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 2910 "scanner.l"
{  // property type
					   idlProp = scanYYtext;
					}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 2913 "scanner.l"
{  // Rare: Another parameter ([propput] HRESULT Item(int index, [in] Type theRealProperty);)
					  if (!current->args)
					    current->args = "(";
					  else
					    current->args += ", ";
					  current->args += idlAttr;
					  current->args += " ";
					  current->args += idlProp;	// prop was actually type of extra parameter
					  current->args += " ";
					  current->args += scanYYtext;
					  current->args = current->args.left(current->args.length() - 1);	// strip comma
					  idlProp.resize(0);
					  idlAttr.resize(0);
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 2928 "scanner.l"
{
					  // the parameter name for the property - just skip.
					}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 2931 "scanner.l"
{
					  current->fileName   = yyFileName;
					  current->type		= idlProp;
  					  current->args       = current->args.simplifyWhiteSpace();
  					  if (current->args)
  					    current->args += ")";
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::VARIABLE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry;
					  initEntry();
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 2944 "scanner.l"
{ // spaces, *, or other stuff
  					  //idlProp+=scanYYtext;
 					}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 2947 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 2951 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( Function ) ;
					}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 2955 "scanner.l"
{ current->args += *scanYYtext ;
					  squareCount++;	
					}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 2958 "scanner.l"
{ current->args += *scanYYtext ; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 2959 "scanner.l"
{ squareCount++; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 2960 "scanner.l"
{
  					  if (--squareCount<=0)
					    BEGIN( lastSquareContext );
  					}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 2964 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 2968 "scanner.l"

	YY_BREAK
case 304:
YY_RULE_SETUP
#line 2969 "scanner.l"
{ addType( current ) ;
					  current->type += scanYYtext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 2973 "scanner.l"
{ current->type += *scanYYtext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 2977 "scanner.l"
{ current->type += *scanYYtext ;
					  sharpCount++;	
					}
	YY_BREAK
case 307:
/* rule 307 can match eol */
YY_RULE_SETUP
#line 2980 "scanner.l"
{
  					  lineCount();
					}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 2983 "scanner.l"
{ current->type += *scanYYtext ; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 2984 "scanner.l"
{
  					  current->bodyLine = yyLineNr;
  					  current->name     = scanYYtext;
					}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 2988 "scanner.l"
{
  					  // Java enum initializer
  					  unput('(');
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 2995 "scanner.l"
{
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 3000 "scanner.l"
{
  					  if (insideJava)  // last enum field in Java class
					  {
					    if (!current->name.isEmpty())
					    {
					      current->fileName   = yyFileName;
					      current->startLine  = yyLineNr;
					      current->type       = "@"; // enum marker
					      current->args       = current->args.simplifyWhiteSpace();
					      current->name       = current->name.stripWhiteSpace();
					      current->section    = Entry::VARIABLE_SEC;
					      current_root->addSubEntry(current);
					      current             = new Entry ;
					      initEntry();
					    }

					    // TODO: skip until the end of the scope
					    BEGIN( SkipRemainder );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 313:
/* rule 313 can match eol */
YY_RULE_SETUP
#line 3024 "scanner.l"
{ 
                                          yyLineNr++;
                                        }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 3027 "scanner.l"

	YY_BREAK
case 315:
YY_RULE_SETUP
#line 3028 "scanner.l"
{
					  //printf("adding `%s' `%s' `%s' to enum `%s' (mGrpId=%d)\n",
					  //     current->type.data(), current->name.data(),
					  //     current->args.data(), current_root->name.data(),current->mGrpId);
  					  if (!current->name.isEmpty())
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
					    current->type       = "@"; // enum marker
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    // add to the scope of the enum
					    current_root->addSubEntry(current);
					    if (!insideCS && !insideJava) // for C# and Java 1.5+ enum values always have to be explicitly qualified
					    {
					      current             = new Entry(*current);
					      // add to the scope surrounding the enum (copy!)
					      current_root->parent()->addSubEntry(current);
					    }
					    current             = new Entry ;
					    initEntry();
					  }
					  else // probably a redundant , 
					  {
				     	    current->reset();
					  }
  					}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 3056 "scanner.l"
{ // attribute list in IDL
					  squareCount=1;
					  lastSquareContext = YY_START;
					  BEGIN(SkipSquare);
  					}
	YY_BREAK
/*
<FindFieldArg>","			{ unput(*scanYYtext); BEGIN(FindFields); }
  */
case 317:
YY_RULE_SETUP
#line 3064 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 3065 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 3066 "scanner.l"
{ if (!insidePHP) 
					    REJECT;
					  // append PHP comment.
					  current->program += scanYYtext ;
					}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 3071 "scanner.l"
{ current->program += scanYYtext ; 
                                          pSkipVerbString = &current->program;
                                          lastSkipVerbStringContext=YY_START;
                                          BEGIN( SkipVerbString );
					}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 3076 "scanner.l"
{ current->program += scanYYtext ; 
                                          pCopyQuotedGString = &current->program;
                                          lastStringContext=YY_START;
                                          BEGIN( CopyGString );
					}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 3081 "scanner.l"
{ current->program += scanYYtext ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 3085 "scanner.l"
{ current->program += scanYYtext ;
					  ++yyLineNr ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 3090 "scanner.l"
{
  					  if (!insidePHP)
					  {
					    current->program += scanYYtext;
					  }
					  else
					  { // begin of single quoted string
					    current->program += scanYYtext;
                                            pCopyQuotedGString = &current->program;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
  					}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 3103 "scanner.l"
{ 
                                              if (insidePHP) 
					      {
						REJECT; // for PHP code single quotes 
					                // are used for strings of arbitrary length
					      }
					      else
					      {
                                                current->program += scanYYtext; 
					      }
                                            }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 3114 "scanner.l"
{ current->program += scanYYtext ;
					  ++curlyCount ;
					}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 3117 "scanner.l"
{
					  current->program += scanYYtext ;
					  --curlyCount ;
  					}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 3121 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    //printf("cn=`%s' rn=`%s'\n",cn.data(),rn.data());
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    if (isTypedef && cn.isEmpty())
					    {
					      //printf("Typedef Name\n");
					      BEGIN( TypedefName );
					    }
					    else
					    {
					      if (current->section == Entry::ENUM_SEC)
					      {
					        current->program+=','; // add field terminator
					      }
					      // add compound definition to the tree
					      current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
  					      current->type = current->type.simplifyWhiteSpace();
  					      current->name = current->name.stripWhiteSpace();
					      //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
					      if (insideObjC && 
						  ((current->spec&Entry::Interface) || (current->spec==Entry::Category))
						 ) // method definition follows
					      {
				                BEGIN( ReadBodyIntf ) ;
					      }
					      else
					      {
					        current_root->addSubEntry( current ) ;
					        memspecEntry = current;
						current = new Entry(*current);
						if (current->section==Entry::NAMESPACE_SEC || 
						    (current->spec==Entry::Interface) ||
						    insideJava || insidePHP || insideCS || insideD || insideJS
						   )
						{ // namespaces and interfaces and java classes ends with a closing bracket without semicolon
						  current->reset();
						  initEntry();
						  memspecEntry = 0;
						  BEGIN( FindMembers ) ;
						}
						else
						{
						  if (!isTypedef)
						  {
						    // enabled the next two lines for bug 623424
						    current->doc.resize(0);
						    current->brief.resize(0);
						  }
						  BEGIN( MemberSpec ) ;
						}
					      }
					    }
					  }
					}
	YY_BREAK
case 329:
/* rule 329 can match eol */
YY_RULE_SETUP
#line 3189 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
					  lineCount();
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    isTypedef = TRUE;
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    BEGIN( TypedefName );
					  }
					}
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 3209 "scanner.l"
{ // late "const" or "volatile" keyword
					  lineCount();
  					  current->type.prepend(scanYYtext);
  					}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 3213 "scanner.l"
{
  					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=","; // add field terminator
					  }
  				          current->name=scanYYtext;
					  prependScope();
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
					  current_root->addSubEntry( current ) ;
					  if (!firstTypedefEntry)
					  {
					    firstTypedefEntry = current;
					  }
					  current = new Entry;
					  initEntry();
					  isTypedef=TRUE; // to undo reset by initEntry()
  					  BEGIN(MemberSpecSkip); 
  					}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 3233 "scanner.l"
{ /* typedef of anonymous type */
					  current->name.sprintf("@%d",anonCount++);
					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=','; // add field terminator
					  }
					  // add compound definition to the tree
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  current_root->addSubEntry( current ) ;
					  memspecEntry = current;
					  current = new Entry(*current);
					  initEntry();
					  unput(';');
					  BEGIN( MemberSpec ) ;
  					}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 3249 "scanner.l"
{ // the [] part could be improved.
  					  lineCount();
  					  int i=0,l=scanYYleng,j;
					  while (i<l && (!isId(scanYYtext[i]))) i++;
					  msName = QCString(scanYYtext).right(l-i).stripWhiteSpace();
					  j=msName.find("[");
					  if (j!=-1) 
					  {
					    msArgs=msName.right(msName.length()-j);
					    msName=msName.left(j);
					  }
					  msType=QCString(scanYYtext).left(i);

					  // handle *pName in: typedef { ... } name, *pName;
					  if (firstTypedefEntry) 
					  {
					    if (firstTypedefEntry->spec&Entry::Struct)
					    {
					      msType.prepend("struct "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->spec&Entry::Union)
					    {
					      msType.prepend("union "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->section==Entry::ENUM_SEC)
					    {
					      msType.prepend("enum "+firstTypedefEntry->name);
					    }
					    else
					    {
					      msType.prepend(firstTypedefEntry->name);
					    }
					  }
					}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 3283 "scanner.l"
{ // function with struct return type
  					  addType(current);
  					  current->name = msName;
					  current->spec = 0;
  					  unput('(');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 3290 "scanner.l"
{
                                          //printf("current->name=`%s' msName=`%s'\n",current->name.data(),msName.data());
  					  if (msName.isEmpty() && !current->name.isEmpty())
					  { 
					    // see if the compound does not have a name or is inside another
					    // anonymous compound. If so we insert a 
					    // special `anonymous' variable.
					    //Entry *p=current_root;
					    Entry *p=current;
					    while (p)
					    {
					      // only look for class scopes, not namespace scopes
					      if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
					      {
						//printf("Trying scope `%s'\n",p->name.data());
						int i=p->name.findRev("::");
						int pi = (i==-1) ? 0 : i+2;
						if (p->name.at(pi)=='@')
						{
						  // anonymous compound inside -> insert dummy variable name
						  //printf("Adding anonymous variable for scope %s\n",p->name.data());
						  msName.sprintf("@%d",anonCount++); 
						  break;
						}
					      }
					      //p=p->parent;
					      if (p==current) p=current_root; else p=p->parent();
					    }
					  }
					  //printf("msName=%s current->name=%s\n",msName.data(),current->name.data());
					  if (!msName.isEmpty() 
					      /*&& msName!=current->name*/) // skip typedef T {} T;, removed due to bug608493
					  {
					    static bool typedefHidesStruct = Config_getBool("TYPEDEF_HIDES_STRUCT");
					    // case 1: typedef struct _S { ... } S_t; 
					    // -> omit typedef and use S_t as the struct name
					    if (typedefHidesStruct && 
						isTypedef && 
						((current->spec&(Entry::Struct|Entry::Union)) ||
						 current->section==Entry::ENUM_SEC )&&
						msType.stripWhiteSpace().isEmpty() && 
						memspecEntry)
					    {
					      memspecEntry->name=msName;
					    }
					    else // case 2: create a typedef field
					    {
					      Entry *varEntry=new Entry;
					      varEntry->lang = language;
					      varEntry->protection = current->protection ;
					      varEntry->mtype = current->mtype;
					      varEntry->virt = current->virt;
					      varEntry->stat = current->stat;
					      varEntry->section = Entry::VARIABLE_SEC;
					      varEntry->name = msName.stripWhiteSpace();
					      varEntry->type = current->type.simplifyWhiteSpace()+" ";
					      varEntry->args = msArgs; 
					      if (isTypedef)
					      {
						varEntry->type.prepend("typedef ");
						//  //printf("current->name = %s %s\n",current->name.data(),msName.data());
					      }
					      if (typedefHidesStruct &&
						  isTypedef &&
						  (current->spec&(Entry::Struct|Entry::Union)) &&
						  memspecEntry
						 ) // case 1: use S_t as type for pS_t in "typedef struct _S {} S_t, *pS_t;"
					      {
						varEntry->type+=memspecEntry->name+msType;
					      }
					      else // case 2: use _S as type for for pS_t
					      {
						varEntry->type+=current->name+msType;
					      }
					      varEntry->fileName = yyFileName;
					      varEntry->startLine = yyLineNr;
					      varEntry->doc = current->doc.copy();
					      varEntry->brief = current->brief.copy();
					      varEntry->mGrpId = current->mGrpId;

					      // deep copy group list
					      QListIterator<Grouping> gli(*current->groups);
					      Grouping *g;
					      for (;(g=gli.current());++gli)
					      {
						varEntry->groups->append(new Grouping(*g));
					      }
					      if (current->sli) // copy special list items
					      {
						QListIterator<ListItemInfo> li(*current->sli);
						ListItemInfo *lii;
						for (li.toFirst();(lii=li.current());++li)
						{
						  varEntry->addSpecialListItem(lii->type,lii->itemId);
						}
					      }

					      //printf("Add: type=`%s',name=`%s',args=`%s' brief=%s doc=%s\n",
					      //      varEntry->type.data(),varEntry->name.data(),
					      //      varEntry->args.data(),varEntry->brief.data(),varEntry->doc.data());
					      current_root->addSubEntry(varEntry);
					    }
					  }
					  if (*scanYYtext==';') // end of a struct/class ...
					  {
					    if (msName.isEmpty() && memspecEntry && (current->section&Entry::COMPOUND_MASK))
					    { // case where a class/struct has a doc block after it
					      if (!current->doc.isEmpty())
					      {
					        memspecEntry->doc += current->doc;
					      }
					      if (!current->brief.isEmpty())
					      {
					        memspecEntry->brief += current->brief;
					      }
				  	    }
					    msType.resize(0);
					    msName.resize(0);
					    msArgs.resize(0);
					    isTypedef=FALSE;
					    firstTypedefEntry=0;
					    memspecEntry=0;
					    current->reset();
					    initEntry();
					    BEGIN( FindMembers );
					  }
					  else
					  {
					    current->doc.resize(0);
					    current->brief.resize(0);
					  }
  					}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 3422 "scanner.l"
{ 
  					  lastInitializerContext=YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					  /* BEGIN(MemberSpecSkip); */
					}
	YY_BREAK
/*
<MemberSpecSkip>"{"			{
  					  curlyCount=0;
					  lastCurlyContext = MemberSpecSkip;
					  previous = current;
  					  BEGIN(SkipCurly);
  					}
  */
case 337:
YY_RULE_SETUP
#line 3436 "scanner.l"
{ BEGIN(MemberSpec); }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 3437 "scanner.l"
{ unput(';'); BEGIN(MemberSpec); }
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 3438 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 340:
/* rule 340 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3441 "scanner.l"
{ // end of Objective C block
					  current_root->addSubEntry( current ) ;
  					  current=new Entry;
					  initEntry();
					  insideObjC=FALSE;
					  BEGIN( FindMembers ); 
  					}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 3448 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 342:
/* rule 342 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 3451 "scanner.l"
case 343:
/* rule 343 can match eol */
YY_RULE_SETUP
#line 3451 "scanner.l"
{   /* typedef void (A::*ptr_t)(args...) or int (*func(int))[], the ^ is for Obj-C blocks */
  					  if (insidePHP) // reference parameter
					  {
					    REJECT
					  }
					  else
					  {
					    current->bodyLine = yyLineNr;
					    lineCount();
					    addType(current);
					    funcPtrType=scanYYtext;
					    roundCount=0;
					    //current->type += scanYYtext;
					    BEGIN( FuncPtr );
					  }
  					}
	YY_BREAK
case 344:
/* rule 344 can match eol */
YY_RULE_SETUP
#line 3467 "scanner.l"
{
  					  current->name = scanYYtext;
					  if (nameIsOperator(current->name))
					  {
					    BEGIN( FuncPtrOperator );
					  }
					  else
					  {
					    if (current->name=="const" || current->name=="volatile")
					    {
					      funcPtrType += current->name;
					    }
					    else
					    {
					      BEGIN( EndFuncPtr );
					    }
					  }
  					}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 3485 "scanner.l"
{
  					  //printf("error: FuncPtr `%c' unexpected at line %d of %s\n",*scanYYtext,yyLineNr,yyFileName);
  					}
	YY_BREAK
case 346:
/* rule 346 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3488 "scanner.l"
{
  					  current->name += scanYYtext;
					  current->name = current->name.simplifyWhiteSpace();
					  lineCount();
  					}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 3493 "scanner.l"
{
                                          yyLineNr++;
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 3497 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( EndFuncPtr );
                                        }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 3501 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 350:
/* rule 350 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3504 "scanner.l"
{ // a variable with extra braces
 					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 351:
/* rule 351 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3509 "scanner.l"
{ // a function pointer
  					  lineCount();
					  current->type+=funcPtrType+")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 352:
/* rule 352 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3514 "scanner.l"
{ // an array of variables
  					  lineCount();
					  current->type+=funcPtrType.data();
					  current->args += ")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 3520 "scanner.l"
{ // a function returning a function or 
                                          // a function returning a pointer to an array
  					  current->args += *scanYYtext ;
					  //roundCount=0;
					  //BEGIN( FuncFunc );
					  current->bodyLine = yyLineNr;
					  currentArgumentContext = FuncFuncEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 3531 "scanner.l"
{
  					  funcPtrType+=scanYYtext;
  					}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 3534 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 3537 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  ++roundCount;
					}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 3541 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  if ( roundCount )
					    --roundCount;
					  else
					  {
					    BEGIN(FuncFuncEnd);
					  }
  					}
	YY_BREAK
case 358:
/* rule 358 can match eol */
YY_RULE_SETUP
#line 3550 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType+")(";
					  BEGIN(FuncFuncType);
  					}
	YY_BREAK
case 359:
/* rule 359 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3555 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(Function);
  					}
	YY_BREAK
case 360:
/* rule 360 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3560 "scanner.l"
{ // function returning a pointer to an array
                                          lineCount();
					  current->type+=funcPtrType;
					  current->args+=")";
					  BEGIN(FuncFuncArray);
  					}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 3566 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 3569 "scanner.l"
{
  					  current->type += *scanYYtext;
					  roundCount++;
  					}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 3573 "scanner.l"
{
  					  current->type += *scanYYtext;
  					  if (roundCount)
					    --roundCount;
					  else
					    BEGIN(Function);
					}
	YY_BREAK
case 364:
/* rule 364 can match eol */
YY_RULE_SETUP
#line 3580 "scanner.l"
{ lineCount() ; current->type += ", " ; }
	YY_BREAK
case 365:
/* rule 365 can match eol */
YY_RULE_SETUP
#line 3581 "scanner.l"
{ lineCount() ; current->type += ' ' ; }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 3582 "scanner.l"
{
  					  current->type += *scanYYtext;
  					}
	YY_BREAK
case 367:
/* rule 367 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3585 "scanner.l"
{ // for catching typedef void (__stdcall *f)() like definitions
                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1) 
					    // the bodyLine check is to prevent this guard to be true more than once
					  {
  					    current->bodyLine = yyLineNr;
					    BEGIN( GetCallType );
					  }
					  else if (!current->name.isEmpty()) // normal function
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments!\n");
					  }
					}
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 3603 "scanner.l"
{
  					  lineCount();
  					  addType(current);
					  funcPtrType="(";
					  funcPtrType+=scanYYtext;
					  roundCount=0;
					  BEGIN( FuncPtr );
  					}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 3611 "scanner.l"
{ 
                                          if (!current->name.isEmpty())
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments current->argList->count()=%d\n",current->argList->count());
					  }
					}
	YY_BREAK
/*
<FindMembers>"("{BN}*("void"{BN}*)?")"	{
  					  lineCount();
  					  current->args = "()"; 
  					  BEGIN( FuncQual );
  					}
  */
/*- Function argument reading rules ---------------------------------------*/
case 370:
YY_RULE_SETUP
#line 3633 "scanner.l"
{ *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 3636 "scanner.l"
{ *copyArgString+=scanYYtext; 
					  fullArgString+=scanYYtext;
					}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 3639 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 3643 "scanner.l"
{
  					  *copyArgString+=" ";
  					  fullArgString+=" ";
  					  lineCount();
  					}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 3648 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  lastCopyArgStringContext = YY_START;
  					  BEGIN( CopyArgString );
  					}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 3654 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
  					  argRoundCount=0; 
					  lastCopyArgContext = YY_START;
					  BEGIN( CopyArgRound ); 
  					}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 3661 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  stringToArgumentList(fullArgString,current->argList);
					  if (insideJS)
					  {
					    fixArgumentListForJavaScript(current->argList);
					  }
                                          handleParametersCommentBlocks(current->argList);

					  /* remember the current documentation block, since
					     we could overwrite it with the documentation of
					     a function argument, which we then have to correct later
					     on
					   */
					  docBackup = current->doc;
					  briefBackup = current->brief;

					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
/* a special comment */
case 377:
YY_RULE_SETUP
#line 3682 "scanner.l"
{ 
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>=0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else // not a define
					  {
					    // for functions we interpret a comment
					    // as documentation for the argument
					    fullArgString+=scanYYtext;
					    lastCopyArgChar=0;
					    lastCommentInArgContext=YY_START;
					    if (scanYYtext[1]=='/')
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
/* a non-special comment */
case 378:
YY_RULE_SETUP
#line 3709 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 3710 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipComment );
  					}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 3714 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
	YY_BREAK
/*
<ReadFuncArgType,ReadTempArgs>"'#"	{ if (insidePHP)
                                            REJECT;
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					}
<ReadFuncArgType,ReadTempArgs>"#"	{
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
  */
/* `)' followed by a special comment */
case 381:
/* rule 381 can match eol */
YY_RULE_SETUP
#line 3732 "scanner.l"
{
  					  lineCount();
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    *copyArgString+=*scanYYtext;
					    fullArgString+=*scanYYtext;
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else
					  {
					    // for functions we interpret a comment
					    // as documentation for the last argument
					    lastCopyArgChar=*scanYYtext;
					    QCString text=&scanYYtext[1];
					    text=text.stripWhiteSpace();
					    lastCommentInArgContext=YY_START;
					    fullArgString+=text;
					    if (text.find("//")!=-1)
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
case 382:
/* rule 382 can match eol */
YY_RULE_SETUP
#line 3763 "scanner.l"

	YY_BREAK
case 383:
YY_RULE_SETUP
#line 3764 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 3765 "scanner.l"
{ fullArgString+=scanYYtext; 
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar); 
                                          BEGIN( lastCommentInArgContext ); 
					}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 3770 "scanner.l"
{ fullArgString+=scanYYtext;
  					  yyLineNr++;
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar);
					  BEGIN( lastCommentInArgContext );
  					}
	YY_BREAK
case 386:
/* rule 386 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3776 "scanner.l"
{ // verbatim command (which could contain nested comments!)
				          docBlockName=&scanYYtext[1];
  					  fullArgString+=scanYYtext;
					  BEGIN(CopyArgVerbatim);
  					}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 3781 "scanner.l"
{
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='[')
					  {
				            docBlockName.at(1)='}';
					  }
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  fullArgString+=scanYYtext;
  					  BEGIN(CopyArgVerbatim);
                                        }
	YY_BREAK
case 388:
/* rule 388 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3794 "scanner.l"
{ // end of verbatim block
  					  fullArgString+=scanYYtext;
				          if (scanYYtext[1]=='f') // end of formula
				          {
				            BEGIN(CopyArgCommentLine);
				          }
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(CopyArgCommentLine);
					  }
  					}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 3805 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 3806 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 391:
/* rule 391 can match eol */
YY_RULE_SETUP
#line 3807 "scanner.l"
{ fullArgString+=*scanYYtext; yyLineNr++; }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 3808 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 3809 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Ignoring %cbrief command inside argument documentation",*scanYYtext
					     );
                                          fullArgString+=' ';
                                        }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 3815 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  argSharpCount=1;
					  BEGIN( CopyArgSharp );
					}
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 3821 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  //printf("end template list %s\n",copyArgString->data());
					  stringToArgumentList(fullArgString,currentArgumentList);
					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 3828 "scanner.l"
{
  					  argRoundCount++;
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 3833 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  if (argRoundCount>0) 
					    argRoundCount--;
					  else 
					    BEGIN( lastCopyArgContext );
  					}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 3841 "scanner.l"
{
  					  argSharpCount++;
					  //printf("argSharpCount++=%d  copy\n",argSharpCount);
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 3847 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  argSharpCount--;
					  if (argSharpCount>0)
					  {
					    //printf("argSharpCount--=%d copy\n",argSharpCount);
					  }
					  else
					  {
					    BEGIN( ReadTempArgs );
					    //printf("end of argSharpCount\n");
					  }
  					}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 3861 "scanner.l"
{
  					  *copyArgString+=scanYYtext;
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 3865 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 3870 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 3875 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
  					    *copyArgString+=scanYYtext; 
  					    fullArgString+=scanYYtext; 
					  }
					}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 3886 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					  if (insidePHP)
					  {
					    lastCopyArgStringContext=YY_START;
					    BEGIN(CopyArgPHPString);
					  }
  					}
	YY_BREAK
case 405:
/* rule 405 can match eol */
YY_RULE_SETUP
#line 3895 "scanner.l"
{ 
  					  yyLineNr++; 
					  *copyArgString+=*scanYYtext; 
					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 3900 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext; 
  					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
/*------------------------------------------------------------------------*/
case 407:
YY_RULE_SETUP
#line 3910 "scanner.l"
{ current->args += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 3913 "scanner.l"
{ current->args += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
/*
<FuncQual>"#"				{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}
  */
case 409:
YY_RULE_SETUP
#line 3926 "scanner.l"
{
                                          if ( strcmp(scanYYtext,";")==0 && 
					       insidePHP && 
					       !containsWord(current->type,"function") )
                                          {
                                            current->reset();
                                            initEntry();
                                            BEGIN( FindMembers );
                                          }
                                          else
                                          {
                                            unput(*scanYYtext); BEGIN( Function );
                                          }
                                        }
	YY_BREAK
case 410:
/* rule 410 can match eol */
YY_RULE_SETUP
#line 3940 "scanner.l"
{ // pure virtual member function
                                          lineCount() ; 
                                          current->virt = Pure;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 411:
/* rule 411 can match eol */
YY_RULE_SETUP
#line 3945 "scanner.l"
{ // overridden virtual member function
                                          lineCount() ; 
                                          current->spec |= Entry::Override;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 412:
/* rule 412 can match eol */
YY_RULE_SETUP
#line 3950 "scanner.l"
{ // sealed member function
                                          lineCount() ; 
                                          current->spec |= Entry::Sealed;
                                          current->args += " sealed "; 
                                        }
	YY_BREAK
case 413:
/* rule 413 can match eol */
YY_RULE_SETUP
#line 3955 "scanner.l"
{ // new member function
                                          lineCount() ; 
                                          current->spec |= Entry::New;
                                          current->args += " new "; 
                                        }
	YY_BREAK
case 414:
/* rule 414 can match eol */
YY_RULE_SETUP
#line 3960 "scanner.l"
{ // const member function
  					  lineCount() ; 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 415:
/* rule 415 can match eol */
YY_RULE_SETUP
#line 3965 "scanner.l"
{ // volatile member function
  					  lineCount() ; 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 416:
/* rule 416 can match eol */
YY_RULE_SETUP
#line 3970 "scanner.l"
{ // pure virtual member function
  					  lineCount() ; 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 417:
/* rule 417 can match eol */
YY_RULE_SETUP
#line 3976 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ", " ; 
					}
	YY_BREAK
case 418:
/* rule 418 can match eol */
YY_RULE_SETUP
#line 3980 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ' ' ; 
					}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 3984 "scanner.l"
{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}	
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 3989 "scanner.l"
{ 
                                          if (insideCli && 
					      (current_root->section&Entry::COMPOUND_MASK) 
					     )
					  {
					    BEGIN(CliOverride);
					  }
					  else
					  {
                                            // typically an initialized function pointer
  					    lastInitializerContext=YY_START;
					    initBracketCount=0;
  					    BEGIN(ReadInitializer);
					  }
  					}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 4004 "scanner.l"
{
  					}
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 4006 "scanner.l"
{ 
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 423:
/* rule 423 can match eol */
YY_RULE_SETUP
#line 4010 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 4013 "scanner.l"
{
  					}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 4015 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 4019 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					  pCopyQuotedString=&current->args;
					  lastStringContext=FuncPtrInit;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 4025 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  if (insidePHP)
					  {
					    pCopyQuotedString=&current->args;
					    lastStringContext=FuncPtrInit;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 4034 "scanner.l"
{
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 4044 "scanner.l"
{
                                          current->args += scanYYtext; 
					}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 4047 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					}
	YY_BREAK
case 431:
/* rule 431 can match eol */
YY_RULE_SETUP
#line 4050 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  yyLineNr++;
  					}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 4054 "scanner.l"
{ // typically a K&R style C function
                                          if (insideCS && strcmp(scanYYtext,"where")==0)
					  { 
					    // type contraint for a method
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (checkForKnRstyleC())
					  {
					    //fprintf(stderr,"===> got a K&R style function\n");
                                            current->args = scanYYtext; 
					    oldStyleArgType.resize(0);
					    BEGIN(OldStyleArgs);
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 4076 "scanner.l"
{
  					  QCString oldStyleArgPtr;
  					  QCString oldStyleArgName;
					  splitKnRArg(oldStyleArgPtr,oldStyleArgName);
					  QCString doc,brief;
					  if (current->doc!=docBackup)
					  {
                                            doc=current->doc.copy();
					    current->doc=docBackup;
					  }
					  if (current->brief!=briefBackup)
					  {
                                            brief=current->brief.copy();
					    current->brief=briefBackup;
					  }
					  addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
					                oldStyleArgName,brief,doc);
					  current->args.resize(0);
					  if (*scanYYtext==';') oldStyleArgType.resize(0);
  					}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 4096 "scanner.l"
{ current->args += scanYYtext; }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 4097 "scanner.l"
{
  					  current->args = argListToString(current->argList);
  					  unput('{');
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 4102 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 4103 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 438:
/* rule 438 can match eol */
#line 4105 "scanner.l"
case 439:
/* rule 439 can match eol */
YY_RULE_SETUP
#line 4105 "scanner.l"
{ /* try-function-block */ 
					  insideTryBlock=TRUE;
					  lineCount();
  					  if (scanYYtext[scanYYleng-1]==':')
					  {
					    unput(':');
					    BEGIN( Function );
					  }
					}
	YY_BREAK
case 440:
/* rule 440 can match eol */
YY_RULE_SETUP
#line 4114 "scanner.l"
{ // C++ style throw clause
  					  current->exception = " throw (" ;
					  roundCount=0;
					  lineCount() ;
					  BEGIN( ExcpRound ) ;
					}
	YY_BREAK
case 441:
/* rule 441 can match eol */
YY_RULE_SETUP
#line 4120 "scanner.l"
{
  					  current->exception = " raises (" ;
					  lineCount() ;
					  roundCount=0;
					  BEGIN( ExcpRound ) ;
  					}
	YY_BREAK
case 442:
/* rule 442 can match eol */
YY_RULE_SETUP
#line 4126 "scanner.l"
{ // Java style throw clause
  					  current->exception = " throws " ;
					  lineCount() ;
					  BEGIN( ExcpList );
  					}
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 4131 "scanner.l"
{ current->exception += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 4134 "scanner.l"
{ current->exception += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 4140 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 4143 "scanner.l"
{
  					  unput('{'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 4146 "scanner.l"
{
  					  unput(';'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 448:
/* rule 448 can match eol */
YY_RULE_SETUP
#line 4149 "scanner.l"
{
  					  current->exception += ' ';
					  yyLineNr++;
  					}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 4153 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 4156 "scanner.l"
{ current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = scanYYtext ;
					  roundCount=0;
					  BEGIN( FuncRound ) ;
					}
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 4162 "scanner.l"
{
  					  if (!insidePHP) BEGIN(SkipInits);
  					}
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 4165 "scanner.l"
{ 
					  current->name=current->name.simplifyWhiteSpace();
  					  current->type=current->type.simplifyWhiteSpace();
					  current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
					  current->fileName = yyFileName;
					  current->startLine = yyLineNr;
					  static QRegExp re("([^)]*[*&][^)]*)"); // (...*...)
					  if (*scanYYtext!=';' || (current_root->section&Entry::COMPOUND_MASK) )
					  {
					    int tempArg=current->name.find('<');
					    QCString tempName;
					    if (tempArg==-1) tempName=current->name; else tempName=current->name.left(tempArg);
					    if (!current->type.isEmpty() &&
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      //printf("Scanner.l: found in class variable: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    else	      
					    {
					      //printf("Scanner.l: found in class function: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      current->section = Entry::FUNCTION_SEC ;
			                      current->proto = *scanYYtext==';';
					    }
					  }
					  else // a global function prototype or function variable
					  {
					    //printf("Scanner.l: prototype? type=`%s' name=`%s' args=`%s'\n",current->type.data(),current->name.data(),current->args.data());
					    if (!current->type.isEmpty() && 
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      //printf("Scanner.l: found function variable!\n");
					      current->section = Entry::VARIABLE_SEC;
					    }
					    else
					    {
					      //printf("Scanner.l: found prototype\n");
					      current->section = Entry::FUNCTION_SEC;
					      current->proto = TRUE;
					    }
					  }
					  //printf("Adding entry `%s'\n",current->name.data());
					  if ( insidePHP)
					  {
					    if (findAndRemoveWord(current->type,"final"))
					    {
					      current->spec |= Entry::Final;
					    }
					    if (findAndRemoveWord(current->type,"abstract"))
					    {
					      current->spec |= Entry::Abstract;
					    }
					  }
					  if ( insidePHP && !containsWord(current->type,"function"))
					  {
					    initEntry();
					    if ( *scanYYtext == '{' )
					    {
					      lastCurlyContext = FindMembers;
					      curlyCount=0;
					      BEGIN( SkipCurly );
					    }
					    else
					    {
					      BEGIN( FindMembers );
					    }
					  }
					  else
					  {
					    if ( insidePHP)
					    {
					      findAndRemoveWord(current->type,"function");
					    }
					    previous = current;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    initEntry();
					    // Objective C 2.0: Required/Optional section
					    if (previous->spec & (Entry::Optional | Entry::Required))
					    {
					      current->spec |= previous->spec & (Entry::Optional|Entry::Required);
					    }
					    lastCurlyContext = FindMembers;
					    if ( *scanYYtext == ',' )
					    {
					      current->type = previous->type.data();
					    }
					    if ( *scanYYtext == '{' )
					    {
					      if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
					      {
						previous->spec |= Entry::Inline;
					      }
					      //addToBody(scanYYtext);
					      curlyCount=0;
					      BEGIN( SkipCurly ) ;
					    }
					    else
					    {
					      if (previous->section!=Entry::VARIABLE_SEC)
						previous->bodyLine=-1; // a function/member declaration
					      BEGIN( FindMembers ) ;
					    }
					  }
                                        }
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 4279 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  				          //lastCurlyContext = FindMembers;
					  //curlyCount=0;
  					  //BEGIN( SkipCurly ) ; 
  					  unput('{');
					  BEGIN( Function );
					}
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 4287 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  ++curlyCount ; 
					}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 4291 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else
					  {
#if 0
					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
						!current->doc.isEmpty())
					    {
					      // copy documentation found inside the body
					      // to the previous item
					      if (previous->inbodyLine==-1)
					      {
					        previous->inbodyLine = current->docLine;
					        previous->inbodyFile = current->docFile;
					      }
					      //printf("*** inbodyDocs+=%s\n",current->doc.data());
					      previous->inbodyDocs += current->doc;
					      current->doc.resize(0);
					    }
#endif
					    if (current->sli && previous) // copy special list items
					    {
					      QListIterator<ListItemInfo> li(*current->sli);
					      ListItemInfo *lii;
					      for (li.toFirst();(lii=li.current());++li)
					      {
						previous->addSpecialListItem(lii->type,lii->itemId);
					      }
					      delete current->sli;
					      current->sli = 0;
					    }
					    if (previous) previous->endBodyLine=yyLineNr;
					    BEGIN( lastCurlyContext ) ;
					  }
					}
	YY_BREAK
case 456:
/* rule 456 can match eol */
YY_RULE_SETUP
#line 4330 "scanner.l"
{ 
					  lineCount();
  					  if ( curlyCount )
					  {
					    //addToBody(scanYYtext);
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine=yyLineNr;

					    tempEntry = current; // temporarily switch to the previous entry
					    current = previous;

					    docBlockContext   = SkipCurlyEndDoc;
					    docBlockInBody    = FALSE;
					    docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                        ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					    docBlock.resize(0);
					    docBlockTerm = '}';
					    if (scanYYtext[scanYYleng-3]=='/')
					    {
					      startCommentBlock(TRUE);
					      BEGIN( DocLine );
					    }
					    else
					    {
					      startCommentBlock(FALSE);
					      BEGIN( DocBlock );
					    }
					  }
					}
	YY_BREAK
case 457:
/* rule 457 can match eol */
YY_RULE_SETUP
#line 4362 "scanner.l"
{ // desc is followed by another one
					  docBlockContext   = SkipCurlyEndDoc;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = '}';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 4380 "scanner.l"
{
  				          //addToBody("}");
					  current = tempEntry;
  					  BEGIN( lastCurlyContext );
  					}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 4385 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  lastStringContext=SkipCurly;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 4390 "scanner.l"
{ 
  				          if (insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  BEGIN( SkipCurlyCpp );
					}
	YY_BREAK
case 461:
/* rule 461 can match eol */
YY_RULE_SETUP
#line 4396 "scanner.l"
{
  					  yyLineNr++;
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 4400 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 463:
/* rule 463 can match eol */
YY_RULE_SETUP
#line 4403 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
  					  lastCurlyContext = FindMembers;
  					  BEGIN( SkipCurly ); 
					}
	YY_BREAK
case 464:
/* rule 464 can match eol */
YY_RULE_SETUP
#line 4409 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
					}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 4413 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipComment);
  					}
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 4418 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 4423 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 4427 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Found ';' while parsing initializer list! "
					      "(doxygen could be confused by a macro call without semicolon)"
					     );
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 4434 "scanner.l"
{
  				          if (!insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 4441 "scanner.l"
{
  				          if (!insideCS) REJECT;
					  // C# verbatim string
					  lastSkipVerbStringContext=YY_START;
					  pSkipVerbString=&current->initializer;
					  BEGIN(SkipVerbString);
  					}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 4448 "scanner.l"
{
                                          if (insidePHP) REJECT;
                                        }
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 4451 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
					}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 4458 "scanner.l"
{ }
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 4459 "scanner.l"
{ }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 4460 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 4463 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 4466 "scanner.l"
{ }
	YY_BREAK
case 478:
/* rule 478 can match eol */
YY_RULE_SETUP
#line 4467 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 4470 "scanner.l"
{ }
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 4471 "scanner.l"
{ // for "class : public base {} var;" construct, see bug 608359
  					  unput(':');
					  BEGIN(ClassVar);
  					}
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 4475 "scanner.l"
{ 
					  current->section = Entry::EMPTY_SEC ;
					  current->type.resize(0) ;
					  current->name.resize(0) ;
					  current->args.resize(0) ;
					  current->argList->clear();
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 482:
/* rule 482 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4483 "scanner.l"
{
  					  sharpCount = 0;
  					  current->name = scanYYtext ;
					  if (current->spec & Entry::Protocol)
					  {
					    current->name+="-p";
					  }
					  lineCount();
					  lastClassTemplSpecContext = ClassVar;
					  if (insideObjC) // protocol list
					  {
					    BEGIN( ObjCProtocolList );
					  }
					  else if (insideCS) // C# generic class
					  {
					    current->name+="-g"; 
					    BEGIN( CSGeneric );
					  }
					  else // C++ template specialization
					  {
					    roundCount=0;
					    BEGIN( ClassTemplSpec );
					  }
					}
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 4507 "scanner.l"
{
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  // check bug 612858 before enabling the next line
					  //current->spec |= Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  //current->name += "<";
					  fullArgString = templateStr;
					  //copyArgString = &current->name;
					  copyArgString = &templateStr;
					  currentArgumentContext = ClassVar;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 4526 "scanner.l"
{
  					  insideProtocolList=TRUE;
  					  BEGIN( Bases );
  					}
	YY_BREAK
case 485:
/* rule 485 can match eol */
YY_RULE_SETUP
#line 4530 "scanner.l"
{
					  current->name += scanYYtext;
					  lineCount();
  					  if (--sharpCount<=0)
					  {
					    current->name = removeRedundantWhiteSpace(current->name);
					    if (current->spec & Entry::Protocol)
					    { // Objective-C protocol
					      unput('{'); // fake start of body
					      BEGIN( ClassVar );
					    }
					    else
					    {
					      BEGIN( lastClassTemplSpecContext );
					    }
					  }
					}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 4547 "scanner.l"
{
  					  current->name += scanYYtext;
  					  sharpCount++;
  					}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 4551 "scanner.l"
{
  					  current->name += scanYYtext;
					}
	YY_BREAK
case 488:
/* rule 488 can match eol */
YY_RULE_SETUP
#line 4554 "scanner.l"
{ // forward declaration
    					  unput(';');
					  current->reset();
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 489:
/* rule 489 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4563 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 490:
/* rule 490 can match eol */
YY_RULE_SETUP
#line 4572 "scanner.l"
{  // multiple forward declarations on one line
                                           // e.g. @protocol A,B;
					  current->reset();
  					}
	YY_BREAK
case 491:
/* rule 491 can match eol */
YY_RULE_SETUP
#line 4576 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  if ((current->spec & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 492:
/* rule 492 can match eol */
YY_RULE_SETUP
#line 4590 "scanner.l"
{ // C# style scope
					  current->name = substitute(scanYYtext,".","::");
					  lineCount();
					  BEGIN( ClassVar );
                                        }
	YY_BREAK
case 493:
/* rule 493 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4595 "scanner.l"
{
  					  if (insideIDL && strncmp(scanYYtext,"switch",6)==0 && !isId(scanYYtext[6]))
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
  					    BEGIN( FindMembers );
					  }
  					}
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 4611 "scanner.l"
{
 					  if (isTypedef)
					  {
					    // multiple types in one typedef
					    unput(',');
					    current->type.prepend("typedef ");
					    BEGIN(FindMembers);
					  }
					  else
					  { 
  					    // Multiple class forward declaration
					  }
  					}
	YY_BREAK
case 495:
/* rule 495 can match eol */
YY_RULE_SETUP
#line 4624 "scanner.l"
{
  					  if (insideCli)
					  {
					    if (scanYYtext[0]=='s') // sealed
					      current->spec |= Entry::SealedClass;
					    else // abstract
					      current->spec |= Entry::AbstractClass;
					    BEGIN( ClassVar ); 
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 4638 "scanner.l"
{
  					  if (insideIDL && strcmp(scanYYtext,"switch")==0)
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else if ((insideJava || insidePHP || insideJS) && (strcmp(scanYYtext,"implements")==0 || strcmp(scanYYtext,"extends")==0))
					  {
  					    current->type.resize(0);
					    baseProt=Public;
                                            baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					  else if (insideCS && strcmp(scanYYtext,"where")==0) // C# type contraint
					  {
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"abstract"))
					  {
					    current->spec|=Entry::Abstract;
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"sealed"))
					  {
					    current->spec|=Entry::Sealed;
					  }
					  else
					  {
					    if (current->section == Entry::ENUM_SEC)
					    { // found "enum a b" -> variable
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    current->type += ' ' ;
					    current->type += current->name ;
					    current->name = scanYYtext ;
					    
					    if (nameIsOperator(current->name))
					    {
				              BEGIN( Operator );
					    }
					  }
  					}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 4685 "scanner.l"
{
    					  if (insideObjC && *scanYYtext=='(') // class category
					  {
					    current->name+='(';
                                            if (current->section!=Entry::OBJCIMPL_SEC)
                                            {
					      current->spec|=Entry::Category;
                                            }
					    BEGIN( ClassCategory );
					  }
					  else
					  {
                                            // probably a function anyway
                                            unput(*scanYYtext);
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 4702 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 4703 "scanner.l"
{ // special comment
                                          fullArgString.resize(0);
					  lastCopyArgChar='#'; // end marker
					  lastCommentInArgContext=YY_START;
					  if (scanYYtext[1]=='/')
					    BEGIN( CopyArgCommentLine );
					  else
					    BEGIN( CopyArgComment );
					}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 4712 "scanner.l"
{ // artificially inserted token to signal end of comment block
                                          current->typeConstr->last()->docs = fullArgString;
  					}
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 4715 "scanner.l"
{ // end of type constraint reached
                                          // parse documentation of the constraints
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput('{');
					  BEGIN( lastCSConstraint );
					}
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 4721 "scanner.l"
{
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput(';');
					  BEGIN( lastCSConstraint );
  					}
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 4726 "scanner.l"
{
                                          BEGIN( CSConstraintType );
                                        }
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 4729 "scanner.l"
{
                                          // parameter name
                                          current->typeConstr->last()->name=scanYYtext;
                                        }
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 4733 "scanner.l"
{ // another constraint for a different param
					  current->typeConstr->append(new Argument);
                                          BEGIN( CSConstraintName );
  					}
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 4737 "scanner.l"
{
                                          if (current->typeConstr->last()->type.isEmpty())
                                              // first type constraint for this parameter
                                          {
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                          else // new type constraint for same parameter
                                          {
                                            QCString name = current->typeConstr->last()->name;
                                            current->typeConstr->append(new Argument);
                                            current->typeConstr->last()->name=name;
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                        }
	YY_BREAK
case 507:
/* rule 507 can match eol */
YY_RULE_SETUP
#line 4751 "scanner.l"
{
					  yyLineNr++;
					}
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 4754 "scanner.l"
{
					}
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 4756 "scanner.l"
{
					  current->name+=scanYYtext;
					}
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 4759 "scanner.l"
{
					  current->name+=')';
					  if ((current->section & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  else // category has no variables so push back an empty body
					  {
					    unput('}');
					    unput('{');
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 4773 "scanner.l"
{ 
					  if (current->section == Entry::VARIABLE_SEC) // enum a b:2, see bug 313527
					  {
  					    BEGIN(BitFields);
					    current->bitfields+=":";
					  }
					  else
					  {
					    current->type.resize(0);
					    if ((current->spec & Entry::Interface) || 
						(current->spec & Entry::Struct)    || 
						(current->spec & Entry::Ref)       || 
						(current->spec & Entry::Value)     || 
						insidePHP || insideCS || insideD || insideObjC
					       )
					      baseProt=Public;
					    else
					      baseProt=Private;
					    baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					}
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 4796 "scanner.l"
{
    					  unput(*scanYYtext);
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  if ((scanYYtext[0]=='*' || scanYYtext[0]=='&') && 
					      current->section == Entry::ENUM_SEC)
					  { // found "enum a *b" -> variable
					    current->section = Entry::VARIABLE_SEC ;
					  }
					  BEGIN( FindMembers );
    					}
	YY_BREAK
case 513:
/* rule 513 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4809 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 514:
/* rule 514 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 4825 "scanner.l"
case 515:
/* rule 515 can match eol */
#line 4826 "scanner.l"
case 516:
/* rule 516 can match eol */
#line 4827 "scanner.l"
case 517:
/* rule 517 can match eol */
YY_RULE_SETUP
#line 4827 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 4842 "scanner.l"
{ 
                                          current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
					  if (current->name.isEmpty() && !isTypedef) // anonymous compound
					  {
					    if (current->section==Entry::NAMESPACE_SEC) // allow reopening of anonymous namespaces
					    {
					      if (Config_getBool("EXTRACT_ANON_NSPACES")) // use visible name
					      {
					        current->name="anonymous_namespace{"+stripPath(current->fileName)+"}";
					      }
					      else // use invisible name
					      {
					        current->name.sprintf("@%d",anonNSCount);
					      }
					    }
					    else
					    {
					      current->name.sprintf("@%d",anonCount++);
					    }
					  }
					  curlyCount=0;
					  if (current_root && // not a nested struct inside an @interface section
					      !(current_root->spec & Entry::Interface) &&
					      ((current->spec & (Entry::Interface | Entry::Protocol | Entry::Category) ||
					        current->section==Entry::OBJCIMPL_SEC)
					      ) &&
					      insideObjC
					     )
					  { // ObjC body that ends with @end
					    BEGIN( ReadBodyIntf );
					  }
					  else if (current->section==Entry::NAMESPACE_SEC)
					  { // namespace body
					    BEGIN( ReadNSBody );
					  }
					  else
					  { // class body
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 519:
/* rule 519 can match eol */
YY_RULE_SETUP
#line 4884 "scanner.l"
{ lineCount(); baseVirt = Virtual; }
	YY_BREAK
case 520:
/* rule 520 can match eol */
YY_RULE_SETUP
#line 4885 "scanner.l"
{ lineCount(); baseProt = Public; }
	YY_BREAK
case 521:
/* rule 521 can match eol */
YY_RULE_SETUP
#line 4886 "scanner.l"
{ lineCount(); baseProt = Protected; }
	YY_BREAK
case 522:
/* rule 522 can match eol */
YY_RULE_SETUP
#line 4887 "scanner.l"
{ lineCount(); baseProt = Private; }
	YY_BREAK
case 523:
/* rule 523 can match eol */
YY_RULE_SETUP
#line 4888 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 4889 "scanner.l"
{ unput(*scanYYtext); BEGIN(Bases); }
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 4890 "scanner.l"
{ // PHP namespace token, not sure if interspacing is allowed but it gives problems (see bug 640847)
                                          if (!insidePHP)
					  {
					    REJECT;
					  }
					  else // PHP base class of the form \Ns\Cl or Ns\Cl
					  {
  					    lineCount();
					    QCString bn=scanYYtext;
					    bn = substitute(bn,"\\","::");
					    baseName += bn;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
                                        }
	YY_BREAK
case 526:
/* rule 526 can match eol */
YY_RULE_SETUP
#line 4905 "scanner.l"
{ 
  					  lineCount();
                                          QCString baseScope = scanYYtext;
                                          if (insideCS && baseScope.stripWhiteSpace()=="where")
					  { 
					    // type contraint for a class
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else
					  {
  					    baseName+=scanYYtext;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
					}
	YY_BREAK
case 527:
/* rule 527 can match eol */
YY_RULE_SETUP
#line 4924 "scanner.l"
{ // Java style class
    					  QCString name = substitute(scanYYtext,".","::");
					  baseName += name;
					  current->args += ' ';
					  current->args += name;
    					}
	YY_BREAK
case 528:
/* rule 528 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4930 "scanner.l"
{
                                          if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    yyLineNr++;
					    unput('{');
					  }
					}
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 4941 "scanner.l"
{ // empty ObjC interface
  					  unput('d'); // insert fake body: {}@end
  					  unput('n'); 
  					  unput('e'); 
  					  unput('@'); 
  					  unput('}'); 
  					  unput('{');
					}
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 4949 "scanner.l"
{ current->name += *scanYYtext;
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  specName = &current->name;
					  BEGIN ( Specialization );
					}
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 4956 "scanner.l"
{ 
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  if (insideObjC) // start of protocol list
					  {
					    unput(',');
					  }
					  else // template specialization
					  {
					    //if (insideCS) // generic
					    //{
					    //  baseName+="-g";
					    //}
                                            templateStr = scanYYtext;
					    specName = &templateStr;
					    BEGIN ( Specialization );
					  }
					}
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 4975 "scanner.l"
{ *specName += *scanYYtext;
  					  if (roundCount==0) sharpCount++;
  					}
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 4978 "scanner.l"
{
  					  *specName += *scanYYtext;
  					  if (roundCount==0 && --sharpCount<=0)
					  {
					    if (1 /*!insideCS*/) 
					    {
					      baseName+=*specName;
					    }
					    else
					    {
					      if (current->tArgLists==0)
					      {
						current->tArgLists = new QList<ArgumentList>;
						current->tArgLists->setAutoDelete(TRUE);
					      }
					      ArgumentList *al = new ArgumentList;
					      current->tArgLists->append(al);
					      stringToArgumentList(*specName,al);
					    }
					    BEGIN(lastSkipSharpContext);
					  }
  					}
	YY_BREAK
case 534:
/* rule 534 can match eol */
YY_RULE_SETUP
#line 5000 "scanner.l"
{ lineCount(); *specName +=' '; }
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 5001 "scanner.l"
{ *specName += scanYYtext; }
	YY_BREAK
case 536:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5002 "scanner.l"
{ // M$ C++ extension to allow >> to close a template...
  					  unput('>');
  					  unput(' ');
  					  unput('>');
                                        }
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 5007 "scanner.l"
{
                                          if (insideCS) // for C# >> ends a nested template
					  {
					    REJECT;
					  }
					  else // for C++ >> is a bitshift 
					       // operator and > > would end 
					       // a nested template.
					       // We require the bitshift to be enclosed in braces.
					       // See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html
					  {
					    if (roundCount>0)
					    {
                                              *specName += scanYYtext; 
					    }
					    else
					    {
  					      unput('>');
  					      unput(' ');
  					      unput('>');
					    }
					  }
                                        }
	YY_BREAK
case 538:
/* rule 538 can match eol */
YY_RULE_SETUP
#line 5030 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 5031 "scanner.l"
{ *specName += *scanYYtext; roundCount++; }
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 5032 "scanner.l"
{ *specName += *scanYYtext; roundCount--; }
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 5033 "scanner.l"
{
  					  *specName += *scanYYtext;
  					}
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 5036 "scanner.l"
{ ++sharpCount; }
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 5037 "scanner.l"
{ if (--sharpCount<=0)
					    BEGIN ( lastSkipSharpContext );
					}
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 5040 "scanner.l"
{ ++roundCount; }
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 5041 "scanner.l"
{ if (--roundCount<=0)
					    BEGIN ( lastSkipRoundContext );
					}
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 5044 "scanner.l"
{
  					  lastStringContext=SkipRound;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 547:
/* rule 547 can match eol */
YY_RULE_SETUP
#line 5048 "scanner.l"
{ lineCount();
                                          if (insideProtocolList)
					  {
					    baseName+="-p";
					  }
					  else
					  {
                                            current->args += ',' ; 
					  }
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
					  {
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  }
					  if ((current->spec & Entry::Interface) || 
					      insideJava || insidePHP || insideCS || 
					      insideD || insideObjC)
					  {
					    baseProt=Public;
					  }
					  else
					  {
					    baseProt=Private;
					  }
					  baseVirt=Normal;
					  baseName.resize(0);
                                          if (*scanYYtext=='>')
					  { // end of a ObjC protocol list
  					    insideProtocolList=FALSE;
					    if (scanYYleng==1)
					    {
					      unput('{'); // dummy start body
					    }
					    else
					    {
					      yyless(1);
					    }
					  }
					  else
					  {
					    if (*scanYYtext==',' && insideObjC) // Begin of protocol list
					    {
  					      insideProtocolList=TRUE;
					    }
					    BEGIN(BasesProt);
					  }
					}
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 5097 "scanner.l"
{ current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  curlyCount=0;
					  if (insideObjC)
					  {
					    BEGIN( ReadBodyIntf );
					  }
					  else
					  {
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 5114 "scanner.l"
{
  					  roundCount++;
  					}
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 5117 "scanner.l"
{
  					  if (--roundCount==0)
					  {
					    BEGIN(ClassVar);
					  }
  					}
	YY_BREAK
case 551:
/* rule 551 can match eol */
YY_RULE_SETUP
#line 5123 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 5124 "scanner.l"

	YY_BREAK
case 553:
/* rule 553 can match eol */
YY_RULE_SETUP
#line 5125 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 5128 "scanner.l"
{ current->program += scanYYtext ; } 
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 5129 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 5130 "scanner.l"
{
                                          insideCode=TRUE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 5134 "scanner.l"
{
                                          insideCode=FALSE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 5138 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 5139 "scanner.l"
{ current->program += scanYYtext ;
					  if (!insideCode) BEGIN( lastContext ) ;
					}
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 5142 "scanner.l"
{ current->program += *scanYYtext ; }
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 5144 "scanner.l"
{ 
  					  //printf("Start doc block at %d\n",yyLineNr);
					  removeSlashes=(scanYYtext[1]=='/');
					  tmpDocType=-1;
					  if (!current->doc.isEmpty())
					  {
					    current->doc+="\n\n";
					  }
					  else
					  {
					    current->docLine = yyLineNr;
					    current->docFile = yyFileName;
					  }

					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("QT_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
					}
	YY_BREAK
case 562:
/* rule 562 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5175 "scanner.l"
{
  					  removeSlashes=(scanYYtext[1]=='/');
					  lastDocContext = YY_START;

					  //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  current->docLine = yyLineNr;
					  current->docFile = yyFileName;
					  docBlockContext = YY_START;
					  docBlockInBody  = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
  					}
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 5198 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 564:
/* rule 564 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5212 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 565:
/* rule 565 can match eol */
YY_RULE_SETUP
#line 5226 "scanner.l"
{
					  lineCount();
					  externC=TRUE;
					}
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 5230 "scanner.l"
{
                                          if (externC) 
					  {
					    externC=FALSE;
					  }
                                          else if (insideCS &&    
					      !current->name.isEmpty() && 
					      !current->type.isEmpty())
					  {
					    if (containsWord(current->type,"event")) // event
					    {
  					      current->mtype = mtype = Event;
					    }
					    else // property
					    {				
  					      current->mtype = mtype = Property;
					    }
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CSAccessorDecl );
					  }
					  else
					  {
					    if ((insideJava || insideCS || insideD) &&
						current->name.isEmpty()
					       )
					    {
					      // static Java initializer
					      needsSemi = FALSE;
					      if (current->stat)
					      {
						current->name="[static initializer]";
						current->type.resize(0);
					      }
					      else
					      {
						current->name="[instance initializer]";
					      }
                                              unput(*scanYYtext); 
					      BEGIN( Function );
					    }
					    else
					    {
					      needsSemi = TRUE;
					      current->type.resize(0);
					      current->name.resize(0);
					      current->args.resize(0);
					      current->argList->clear();
					      curlyCount=0;
					      BEGIN( SkipCurlyBlock );
					    }
					  }
  					}
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 5283 "scanner.l"
{ curlyCount++; }
	YY_BREAK
case 568:
YY_RULE_SETUP
#line 5284 "scanner.l"
{ 
                                          if (curlyCount) 
                                          {
                                            curlyCount--; 
					  }
					  else
					  {
  					    mtype = Method;
                                            unput(';');
					    BEGIN(FindMembers);
					  }
                                        }
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 5296 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Settable;  }
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 5297 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Gettable;  }
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 5298 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Addable;   }
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 5299 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Removable; }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 5300 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Raisable;  }
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 5301 "scanner.l"
{}
	YY_BREAK
case 575:
/* rule 575 can match eol */
YY_RULE_SETUP
#line 5302 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
/**********************************************************************************/
/******************** Documentation block related rules ***************************/
/**********************************************************************************/
/* ---- Single line comments ------ */
case 576:
/* rule 576 can match eol */
YY_RULE_SETUP
#line 5312 "scanner.l"
{ // continuation of multiline C++-style comment
				           docBlock+=scanYYtext;
          		                   docBlock.resize(docBlock.length() - 3);
					   yyLineNr++;
                                        }
	YY_BREAK
case 577:
/* rule 577 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5317 "scanner.l"
{ // whole line
  					  docBlock+=scanYYtext;
					  handleCommentBlock(docBlock.data(),current->brief.isEmpty());
					  BEGIN( docBlockContext );
  					}
	YY_BREAK
/* ---- Comments blocks ------ */
case 578:
YY_RULE_SETUP
#line 5325 "scanner.l"
{ // end of comment block
  				          handleCommentBlock(docBlock.data(),FALSE);
					  BEGIN(docBlockContext);
  					}
	YY_BREAK
case 579:
/* rule 579 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5329 "scanner.l"
{ // start of a comment line
  					}
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 5331 "scanner.l"
{ // strip embedded C++ comments if at the start of a line
  					}
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 5333 "scanner.l"
{ // slashes in the middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 5336 "scanner.l"
{ // start of a new comment in the 
                                          // middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 583:
/* rule 583 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5340 "scanner.l"
{ // escaped command
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 5343 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  BEGIN(DocCopyBlock);
                                        }
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 5352 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName="<pre>";
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 586:
/* rule 586 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5357 "scanner.l"
{ // verbatim command (which could contain nested comments!)
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 5362 "scanner.l"
{
  					  if (insideCS)
					  {
					    docBlock+=scanYYtext;
					    docBlockName="<code>";
					    BEGIN(DocCopyBlock);
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 5374 "scanner.l"
{ // any character that isn't special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 589:
/* rule 589 can match eol */
YY_RULE_SETUP
#line 5377 "scanner.l"
{ // newline
  					  yyLineNr++;
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 5381 "scanner.l"
{ // command block
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 591:
YY_RULE_SETUP
#line 5387 "scanner.l"
{ // end of a <pre> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<pre>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 592:
YY_RULE_SETUP
#line 5394 "scanner.l"
{ // end of a <code> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<code>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 593:
YY_RULE_SETUP
#line 5401 "scanner.l"
{
  					  docBlock+=scanYYtext;
					  BEGIN(DocBlock);
  					}
	YY_BREAK
case 594:
/* rule 594 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5405 "scanner.l"
{ // end of verbatim block
  					  docBlock+=scanYYtext;
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 595:
/* rule 595 can match eol */
YY_RULE_SETUP
#line 5412 "scanner.l"
{ // start of a comment line
  					  if (docBlockName=="verbatim")
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 596:
YY_RULE_SETUP
#line 5418 "scanner.l"
{ // any character that is not special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 597:
YY_RULE_SETUP
#line 5421 "scanner.l"
{
  					  docBlock+=scanYYtext;
					}
	YY_BREAK
case 598:
/* rule 598 can match eol */
YY_RULE_SETUP
#line 5424 "scanner.l"
{ // newline
  					  docBlock+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 5428 "scanner.l"
{ // any other character
  					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case YY_STATE_EOF(DocCopyBlock):
#line 5431 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: reached end of file while inside a %s block!\n"
					      "The command that should end the block seems to be missing!\n",
					      docBlockName.data());
  					  yyterminate();
  					}
	YY_BREAK
/* ------------- Prototype parser -------------- */
case 600:
YY_RULE_SETUP
#line 5442 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 5445 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 5452 "scanner.l"
{
  					  current->type+=current->name+scanYYtext;
					  current->name.resize(0);
  					  BEGIN( PrototypePtr );
  					}
	YY_BREAK
case 603:
/* rule 603 can match eol */
YY_RULE_SETUP
#line 5457 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 5460 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 605:
YY_RULE_SETUP
#line 5467 "scanner.l"
{
  					  current->type+=')';
  					  BEGIN( Prototype );
  					}
	YY_BREAK
case 606:
YY_RULE_SETUP
#line 5471 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 5474 "scanner.l"
{
  					  BEGIN( PrototypeSkipLine);
  					}
	YY_BREAK
case 608:
YY_RULE_SETUP
#line 5477 "scanner.l"
{ 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 609:
YY_RULE_SETUP
#line 5481 "scanner.l"
{ 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 5485 "scanner.l"
{ 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 5490 "scanner.l"
{
  					  current->exception = "throw(";
					  BEGIN(PrototypeExc);
  					}
	YY_BREAK
case 612:
YY_RULE_SETUP
#line 5494 "scanner.l"
{
  					  current->exception += ')';
					  BEGIN(PrototypeQual);
  					}
	YY_BREAK
case 613:
YY_RULE_SETUP
#line 5498 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 614:
YY_RULE_SETUP
#line 5501 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 615:
YY_RULE_SETUP
#line 5504 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 5507 "scanner.l"
{
  					}
	YY_BREAK
/* ------------ Generic rules -------------- */
case 617:
/* rule 617 can match eol */
YY_RULE_SETUP
#line 5514 "scanner.l"
{  // line continuation
  					  yyLineNr++; 
  					}
	YY_BREAK
case 618:
/* rule 618 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5517 "scanner.l"
{ 
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 5520 "scanner.l"

	YY_BREAK
case 620:
/* rule 620 can match eol */
YY_RULE_SETUP
#line 5521 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 621:
YY_RULE_SETUP
#line 5522 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					}
	YY_BREAK
case 622:
YY_RULE_SETUP
#line 5528 "scanner.l"
{	
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 5534 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 5541 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 5548 "scanner.l"

	YY_BREAK
case 626:
YY_RULE_SETUP
#line 5549 "scanner.l"

	YY_BREAK
case 627:
YY_RULE_SETUP
#line 5550 "scanner.l"
{ lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 628:
YY_RULE_SETUP
#line 5553 "scanner.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 629:
YY_RULE_SETUP
#line 5554 "scanner.l"
{	
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 5558 "scanner.l"
ECHO;
	YY_BREAK
#line 17306 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(CompoundName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(CSConstraintName):
			case YY_STATE_EOF(CSConstraintType):
			case YY_STATE_EOF(CSIndexer):
			case YY_STATE_EOF(ClassCategory):
			case YY_STATE_EOF(ClassTemplSpec):
			case YY_STATE_EOF(CliPropertyType):
			case YY_STATE_EOF(CliPropertyIndex):
			case YY_STATE_EOF(CliOverride):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(BasesProt):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(BitFields):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(FindMembersPHP):
			case YY_STATE_EOF(FindMemberName):
			case YY_STATE_EOF(FindFields):
			case YY_STATE_EOF(FindFieldArg):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(FuncRound):
			case YY_STATE_EOF(ExcpRound):
			case YY_STATE_EOF(ExcpList):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(ReadBody):
			case YY_STATE_EOF(ReadNSBody):
			case YY_STATE_EOF(ReadBodyIntf):
			case YY_STATE_EOF(Using):
			case YY_STATE_EOF(UsingDirective):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipCurlyCpp):
			case YY_STATE_EOF(SkipCurlyEndDoc):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipPHPString):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipCPPBlock):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(SkipCurlyBlock):
			case YY_STATE_EOF(SkipRoundBlock):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(SkipSharp):
			case YY_STATE_EOF(SkipRound):
			case YY_STATE_EOF(SkipSquare):
			case YY_STATE_EOF(SkipRemainder):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(TryFunctionBlock):
			case YY_STATE_EOF(TryFunctionBlockEnd):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PackageName):
			case YY_STATE_EOF(JavaImport):
			case YY_STATE_EOF(PHPUse):
			case YY_STATE_EOF(PHPUseAs):
			case YY_STATE_EOF(CSAccessorDecl):
			case YY_STATE_EOF(CSGeneric):
			case YY_STATE_EOF(PreLineCtrl):
			case YY_STATE_EOF(DefinePHP):
			case YY_STATE_EOF(DefinePHPEnd):
			case YY_STATE_EOF(OldStyleArgs):
			case YY_STATE_EOF(SkipVerbString):
			case YY_STATE_EOF(ObjCMethod):
			case YY_STATE_EOF(ObjCReturnType):
			case YY_STATE_EOF(ObjCParams):
			case YY_STATE_EOF(ObjCParamType):
			case YY_STATE_EOF(ObjCProtocolList):
			case YY_STATE_EOF(ObjCPropAttr):
			case YY_STATE_EOF(ObjCSkipStatement):
			case YY_STATE_EOF(QtPropType):
			case YY_STATE_EOF(QtPropName):
			case YY_STATE_EOF(QtPropAttr):
			case YY_STATE_EOF(QtPropRead):
			case YY_STATE_EOF(QtPropWrite):
			case YY_STATE_EOF(ReadInitializer):
			case YY_STATE_EOF(GetCallType):
			case YY_STATE_EOF(CppQuote):
			case YY_STATE_EOF(EndCppQuote):
			case YY_STATE_EOF(MemberSpec):
			case YY_STATE_EOF(MemberSpecSkip):
			case YY_STATE_EOF(EndTemplate):
			case YY_STATE_EOF(FuncPtr):
			case YY_STATE_EOF(FuncPtrOperator):
			case YY_STATE_EOF(EndFuncPtr):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadTempArgs):
			case YY_STATE_EOF(IDLUnionCase):
			case YY_STATE_EOF(NSAliasName):
			case YY_STATE_EOF(NSAliasArg):
			case YY_STATE_EOF(CopyString):
			case YY_STATE_EOF(CopyPHPString):
			case YY_STATE_EOF(CopyGString):
			case YY_STATE_EOF(CopyPHPGString):
			case YY_STATE_EOF(CopyRound):
			case YY_STATE_EOF(CopyCurly):
			case YY_STATE_EOF(GCopyRound):
			case YY_STATE_EOF(GCopyCurly):
			case YY_STATE_EOF(SkipUnionSwitch):
			case YY_STATE_EOF(Specialization):
			case YY_STATE_EOF(FuncPtrInit):
			case YY_STATE_EOF(FuncFunc):
			case YY_STATE_EOF(FuncFuncEnd):
			case YY_STATE_EOF(FuncFuncType):
			case YY_STATE_EOF(FuncFuncArray):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyArgPHPString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgComment):
			case YY_STATE_EOF(CopyArgCommentLine):
			case YY_STATE_EOF(CopyArgVerbatim):
			case YY_STATE_EOF(IDLAttribute):
			case YY_STATE_EOF(IDLProp):
			case YY_STATE_EOF(IDLPropName):
			case YY_STATE_EOF(Prototype):
			case YY_STATE_EOF(PrototypePtr):
			case YY_STATE_EOF(PrototypeQual):
			case YY_STATE_EOF(PrototypeExc):
			case YY_STATE_EOF(PrototypeSkipLine):
			case YY_STATE_EOF(DocLine):
			case YY_STATE_EOF(DocBlock):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scanYYin at a new source and called
			 * scanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scanYYrestart(scanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3695 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3695 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3694);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scanYYrestart(scanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
	}

	scanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	scanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scanYYpop_buffer_state();
	 *		scanYYpush_buffer_state(new_buffer);
     */
	scanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scanYYwrap()) processing, but the only time this flag
	 * is looked at is after scanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scanYY_create_buffer()
 * 
 */
    void scanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scanYYfree((void *) b->yy_ch_buf  );

	scanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scanYYrestart() or at EOF.
 */
    static void scanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scanYY_init_buffer was _probably_
     * called from scanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scanYYensure_buffer_stack();

	/* This block is copied from scanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scanYY_switch_to_buffer. */
	scanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE scanYY_scan_string (yyconst char * yystr )
{
    
	return scanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scanYYtext[scanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = scanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scanYYget_lineno  (void)
{
        
    return scanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *scanYYget_in  (void)
{
        return scanYYin;
}

/** Get the output stream.
 * 
 */
FILE *scanYYget_out  (void)
{
        return scanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t scanYYget_leng  (void)
{
        return scanYYleng;
}

/** Get the current token.
 * 
 */

char *scanYYget_text  (void)
{
        return scanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scanYYset_lineno (int  line_number )
{
    
    scanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scanYY_switch_to_buffer
 */
void scanYYset_in (FILE *  in_str )
{
        scanYYin = in_str ;
}

void scanYYset_out (FILE *  out_str )
{
        scanYYout = out_str ;
}

int scanYYget_debug  (void)
{
        return scanYY_flex_debug;
}

void scanYYset_debug (int  bdebug )
{
        scanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scanYYin = stdin;
    scanYYout = stdout;
#else
    scanYYin = (FILE *) 0;
    scanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scanYYlex_init()
     */
    return 0;
}

/* scanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int scanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    scanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see scanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 5558 "scanner.l"



//----------------------------------------------------------------------------

static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}
  
//----------------------------------------------------------------------------

static void newEntry()
{
  current_root->addSubEntry(current);
  previous = current;
  current = new Entry ;
  initEntry();
}

static void handleCommentBlock(const QCString &doc,bool brief)
{
  static bool hideInBodyDocs = Config_getBool("HIDE_IN_BODY_DOCS");
  int position=0;
  bool needsEntry=FALSE;
  if (docBlockInBody && hideInBodyDocs) return;
  //printf("parseCommentBlock [%s] brief=%d\n",doc.data(),brief);
  int lineNr = brief ? current->briefLine : current->docLine;   // line of block start
  
  // fill in inbodyFile && inbodyLine the first time, see bug 633891
  Entry *docEntry = docBlockInBody && previous ? previous : current;
  if (docBlockInBody && docEntry && docEntry->inbodyLine==-1)
  {
    docEntry->inbodyFile = yyFileName;
    docEntry->inbodyLine = lineNr;
  }

  while (parseCommentBlock(
	g_thisParser,
	docBlockInBody && previous ? previous : current,
	doc,        // text
	yyFileName, // file
	lineNr,     // line of block start
	docBlockInBody ? FALSE : brief,               // isBrief
	docBlockInBody ? FALSE : docBlockAutoBrief,   // isJavaDocStyle
	docBlockInBody,                               // isInBody
	protection,
        position,
        needsEntry
        )
     ) 
  {
    //printf("parseCommentBlock position=%d [%s]\n",position,doc.data()+position);
    if (needsEntry) 
    {
      QCString docFile = current->docFile;
      newEntry();
      current->docFile = docFile;
      current->docLine = lineNr;
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

  if (docBlockTerm)
  {
    unput(docBlockTerm);
    docBlockTerm=0;
  }
}

static void handleParametersCommentBlocks(ArgumentList *al)
{
  //printf(">>>>>>> handleParametersCommentBlocks()\n");
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    //printf("    Param %s docs=%s\n",a->name.data(),a->docs.data());
    if (!a->docs.isEmpty())
    {
      int position=0;
      bool needsEntry;

      // save context
      QCString orgDoc   = current->doc;
      QCString orgBrief = current->brief;
      int orgDocLine    = current->docLine;
      int orgBriefLine  = current->briefLine;

      current->doc.resize(0);
      current->brief.resize(0);

      //printf("handleParametersCommentBlock [%s]\n",doc.data());
      while (parseCommentBlock(
	     g_thisParser,
	     current,
	     a->docs,            // text
	     yyFileName,         // file
	     current->docLine,   // line of block start
	     FALSE, 
	     FALSE,
	     FALSE,
	     protection,
	     position,
	     needsEntry
	    )
	  ) 
      {
	//printf("handleParametersCommentBlock position=%d [%s]\n",position,doc.data()+position);
	if (needsEntry) newEntry();
      }
      if (needsEntry)
      {
	newEntry();
      }
      a->docs = current->doc;

      // restore context
      current->doc       = orgDoc;
      current->brief     = orgBrief;
      current->docLine   = orgDocLine;
      current->briefLine = orgBriefLine;
    }
  }
}


//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  g_inputFromFile = FALSE;
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      padCount=0;
      //depthIf = 0;
      inputString = ce->program;
      inputPosition = 0;
      scanYYrestart( scanYYin ) ;
      if (ce->section==Entry::ENUM_SEC)
	BEGIN( FindFields ) ;
      else
	BEGIN( FindMembers ) ;
      current_root = ce ;
      yyFileName = ce->fileName;
      //setContext();
      yyLineNr = ce->startLine ;
      insideObjC = ce->lang==SrcLangExt_ObjC;
      //printf("---> Inner block starts at line %d objC=%d\n",yyLineNr,insideObjC);
      //current->reset();
      if (current) delete current;
      current = new Entry;
      current->lang = language;
      gstat = FALSE;
      int ni=ce->name.findRev("::"); if (ni==-1) ni=0; else ni+=2;
      // set default protection based on the compound type
      if( ce->section==Entry::CLASS_SEC ) // class
      {

        if (insidePHP || insideD || insideJS)
	{
          current->protection = protection = Public ; 
	}
	else if (insideJava)
	{
          current->protection = protection = Package ; 
	}
	else if (ce->spec&(Entry::Interface | Entry::Ref | Entry::Value | Entry::Struct | Entry::Union))
	{
	  if (ce->lang==SrcLangExt_ObjC)
	  {
	    current->protection = protection = Protected ;
	  }
	  else
	  {
	    current->protection = protection = Public ;
	  }
	}
	else 
	{
          current->protection = protection = Private ;
	}
      }
      else if (ce->section == Entry::ENUM_SEC ) // enum
      {
	current->protection = protection = ce->protection;
      }
      else if (!ce->name.isEmpty() && ce->name.at(ni)=='@') // unnamed union or namespace
      {
	if (ce->section == Entry::NAMESPACE_SEC ) // unnamed namespace
	{
          current->stat = gstat = TRUE;
	}
	current->protection = protection = ce->protection;
      }
      else // named struct, union, protocol, category
      {
	current->protection = protection = Public ;
      }
      mtype = Method;
      virt = Normal;
      //printf("name=%s current->stat=%d gstat=%d\n",ce->name.data(),current->stat,gstat);

      //memberGroupId = DOX_NOGROUP;
      //memberGroupRelates.resize(0);
      //memberGroupInside.resize(0);
      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      scanYYlex() ;
      g_lexInit=TRUE;
      //forceEndGroup();

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);
      
      delete current; current=0;
      ce->program.resize(0);


      //if (depthIf>0)
      //{
      //	warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
      //}
    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------

static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();
  //g_inputFromFile = TRUE;

  inputString = fileBuf;
  inputPosition = 0;
  g_inputFromFile = FALSE;

  //anonCount     = 0;  // don't reset per file
  //depthIf       = 0;
  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  global_root   = rt;
  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    setContext();
    rt->lang = language;
    msg("Parsing file %s...\n",yyFileName.data());

    current_root  = rt ;
    initParser();
    groupEnterFile(yyFileName,yyLineNr);
    current       = new Entry;
    //printf("current=%p current_root=%p\n",current,current_root);
    int sec=guessSection(yyFileName);
    if (sec)
    {
      current->name    = yyFileName;
      current->section = sec;
      current_root->addSubEntry(current);
      current          = new Entry;
    }
    current->reset();
    scanYYrestart( scanYYin );
    if ( insidePHP )
    {
      BEGIN( FindMembersPHP );
    }
    else
    {
      BEGIN( FindMembers );
    }

    scanYYlex();
    g_lexInit=TRUE;

    if (YY_START==Comment)
    {
      warn(yyFileName,yyLineNr,"File ended in the middle of a comment block! Perhaps a missing \\endcode?");
    }

    //forceEndGroup();
    groupLeaveFile(yyFileName,yyLineNr);

    //if (depthIf>0)
    //{
    //  warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
    //}

    rt->program.resize(0);
    if (rt->children()->contains(current)==0) 
      // it could be that current is already added as a child to rt, so we
      // only delete it if this is not the case. See bug 635317.
    {
      delete current; current=0;
    }

    parseCompounds(rt);

    inputFile.close();

    anonNSCount++;
  }
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  bool orgInputFromFile;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(scanYY_create_buffer(scanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;
  orgInputFromFile = g_inputFromFile;

  // set new string
  inputString = text;
  inputPosition = 0;
  g_inputFromFile = FALSE;
  scanYYrestart( scanYYin );
  BEGIN(Prototype);
  scanYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state
  YY_BUFFER_STATE tmpState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(orgState);
  scanYY_delete_buffer(tmpState);
  inputString = orgInputString; 
  inputPosition = orgInputPosition;
  g_inputFromFile = orgInputFromFile;

  //printf("**** parsePrototype end\n");
}

void scanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION)
  if (g_lexInit)
  {
    scanYYlex_destroy();
  }
#endif
}

//static void handleGroupStartCommand(const char *header)
//{
//  memberGroupHeader=header;
//  startGroupInDoc();
//}
//
//static void handleGroupEndCommand()
//{
//  endGroup();
//  previous=0;
//}

//----------------------------------------------------------------------------

void CLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);
}

void CLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
                   const char * scopeName,
                   const QCString & input,
                   bool isExampleBlock,
                   const char * exampleName,
                   FileDef * fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
		   MemberDef *memberDef,
		   bool showLineNumbers
                  )
{
  ::parseCCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
               fileDef,startLine,endLine,inlineFragment,memberDef,
	       showLineNumbers);
}

bool CLanguageScanner::needsPreprocessing(const QCString &extension)
{
  QCString fe=extension.lower();
  return 
   !( fe==".java" || fe==".as"  || fe==".d"    || fe==".php" || 
      fe==".php4" || fe==".inc" || fe==".phtml" 
    );
}

void CLanguageScanner::resetCodeParserState()
{
  ::resetCCodeParserState();
}

void CLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void scannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif



ROOT = $(shell pwd)/../../../
SRCROOT = ${ROOT}/src
OBJROOT = $(ROOT)/obj/modules/$(DIR)
SYMROOT = $(ROOT)/sym/modules
DSTROOT = $(ROOT)/dst/usr/standalone/modules
DOCROOT = $(ROOT)/doc

ifeq ($(BUILT_IN),yes)
override SYMROOT = $(ROOT)/obj/modules/
override OBJROOT = $(ROOT)/obj/boot2_modules/$(DIR)
endif

include ${ROOT}/Make.rules

ifeq ($(BUILT_IN),yes)

CFLAGS	:= $(RC_CFLAGS) $(OPTIM) $(MORECPP) -arch i386 -g -Wmost -Werror \
		-fno-builtin -DSAIO_INTERNAL_USER -static $(OMIT_FRAME_POINTER_CFLAG) \
		-mpreferred-stack-boundary=2 -fno-align-functions -fno-stack-protector \
		-march=pentium4 -msse2 -mfpmath=sse -msoft-float -nostdinc -include $(SRCROOT)/autoconf.h
	      
CPPFLAGS := $(CPPFLAGS) -arch i386 -static -nostdinc++ -Wmost -Werror \
	-fno-builtin -mpreferred-stack-boundary=2 \
	-fno-align-functions -fno-stack-protector \
	-march=pentium4 -msse2 -mfpmath=sse -msoft-float \
	-arch i386 -include $(SRCROOT)/autoconf.h

else

CFLAGS := $(CLFAGS) -nostdinc -Wmost -Werror \
	-fno-builtin -mpreferred-stack-boundary=2 \
	-fno-align-functions -fno-stack-protector \
	-march=pentium4 -msse2 -mfpmath=sse -msoft-float \
	-arch i386 -include $(SRCROOT)/autoconf.h
	
CPPFLAGS := $(CPPFLAGS) -nostdinc++ -Wmost -Werror \
	-fno-builtin -mpreferred-stack-boundary=2 \
	-fno-align-functions -fno-stack-protector \
	-march=pentium4 -msse2 -mfpmath=sse -msoft-float \
	-arch i386 -include $(SRCROOT)/autoconf.h

endif


UTILDIR = ../../util
LIBSADIR = ../../libsa
LIBSAIODIR = ../../libsaio
BOOT2DIR = ../../boot2

MODULE_INCLUDES :=  $(foreach x,ModuleSystem $(MODULE_DEPENDENCIES),-I$(SRCROOT)/i386/modules/$(x)/include/)


INC = -I$(SRCROOT)/sym/i386/ -I$(SRCROOT)/i386/modules/include/ -Iinclude/ -I$(SRCROOT)/i386/libsaio/ -I$(SRCROOT)/i386/libsa/ -I$(SRCROOT)/i386/include/ -I$(SRCROOT)/i386/boot2/ $(MODULE_INCLUDES)
DEFINES := -D__KLIBC__ $(DEFINES)

MODULE_DEPENDENCIES :=  $(wildcard $(foreach x,$(MODULE_DEPENDENCIES),$(SYMROOT)/$(x).dylib)) \
						$(wildcard $(foreach x,$(MODULE_DEPENDENCIES),$(OBJROOT)/../$(x).dylib))

MODULE_DEPENDENCIES_CMD := $(foreach x,$(MODULE_DEPENDENCIES), -weak_library $(x))

INSTALLDIR = $(DSTROOT)/System/Library/Frameworks/System.framework/Versions/B/PrivateHeaders/standalone

MODULE_DEFINITION := $(CONFIG_$(shell echo $(MODULE_NAME) | tr '[:lower:]' '[:upper:]')_MODULE)


ifeq  ($(MODULE_DEFINITION),m)
ifneq ($(BUILT_IN),yes)

###### Make this as a *MODULE* ######
all: ${OBJROOT} dylib

else

###### Don't Compile Module ######
all:

endif
else

ifeq ($(MODULE_DEFINITION),y)
ifeq ($(BUILT_IN),yes)

####### Make this *BUILT IN* ######
all: ${OBJROOT} dylib_LINKER

else
####### Don't build in module ######
all:

endif
else

####### Don't Compile Module ######
all:

endif
endif


dylib_LINKER: ${OBJROOT} $(SYMROOT)/boot_modules.c $(SYMROOT)/boot_modules.h dylib 
dylib: 		  ${OBJROOT} $(SYMROOT)/$(MODULE_NAME).dylib


ifeq ($(BUILT_IN),yes)

###### Build module into the code binary ######
$(SYMROOT)/$(MODULE_NAME).dylib: $(MODULE_DEPENDENCIES) ${MODULE_OBJECTS} $(OBJROOT)/$(MODULE_NAME).desc $(OBJROOT)/$(MODULE_NAME).author Makefile
	@echo "\t[LD] $(MODULE_NAME).dylib"
	@ld -arch i386 -undefined dynamic_lookup \
	-dylib -read_only_relocs suppress \
	-S -x -Z -dead_strip_dylibs \
	-no_uuid \
	-current_version $(MODULE_VERSION) -compatibility_version $(MODULE_COMPAT_VERSION) \
	-final_output $(MODULE_NAME) \
	$(filter %.o,$^) \
	-macosx_version_min 10.6 \
	-sectcreate __INFO __author $(OBJROOT)/$(MODULE_NAME).author \
	-sectcreate __INFO __description $(OBJROOT)/$(MODULE_NAME).desc \
	-o $(SYMROOT)/modules/$(MODULE_NAME).dylib

else

##### BUild module as a seperate module #####
$(SYMROOT)/modules/$(MODULE_NAME).dylib: $(MODULE_DEPENDENCIES) ${MODULE_OBJECTS} $(OBJROOT)/$(MODULE_NAME).desc $(OBJROOT)/$(MODULE_NAME).author $(SRCROOT)/obj/i386/boot2/Symbols_LINKER_ONLY.dylib Makefile
	@echo "\t[LD] $(MODULE_NAME).dylib"
	
	@ld -arch i386 \
	-alias _$(MODULE_START) start \
	-dylib -read_only_relocs suppress \
	-S -x -Z -dead_strip_dylibs \
	-no_uuid \
	-current_version $(MODULE_VERSION) -compatibility_version $(MODULE_COMPAT_VERSION) \
	-final_output $(MODULE_NAME) \
	$(filter %.o,$^) \
	-weak_library $(SRCROOT)/obj/i386/boot2/Symbols_LINKER_ONLY.dylib \
	$(MODULE_DEPENDENCIES_CMD) \
	-sectcreate __INFO __author $(OBJROOT)/$(MODULE_NAME).author \
	-sectcreate __INFO __description $(OBJROOT)/$(MODULE_NAME).desc \
	-macosx_version_min 10.6 \
	-o $@
	
endif


#clean:
#	@echo "\t[RM] $(SYMROOT)/modules/$(MODULE_NAME).dylib"
#	@echo "\t[RM] $(OBJROOT)"
#	@echo "\t[RM] $(DSTROOT)"
#	@echo "\t[RM] $(SRCROOT)/revision"
#	@echo "\t[RM] $(SRCROOT)/i386/modules/module_includes"
#	@rm -rf $(SYMROOT)/modules/$(MODULE_NAME).dylib &> /dev/null
#	@rm -rf $(OBJROOT) $(DSTROOT) $(SRCROOT)/revision $(SRCROOT)/i386/modules/module_includes

	

.PHONY: $(SYMROOT)/boot_modules.h
.PHONY: $(SYMROOT)/boot_modules.c

$(SYMROOT)/boot_modules.c: 
	@echo "\tstart_built_in_module(\"$(MODULE_NAME)\", \"$(MODULE_AUTHOR)\", \"$(MODULE_DESCRIPTION)\", 0, 0, &$(MODULE_START));" >> $@
	
$(SYMROOT)/boot_modules.h:
	@echo "void $(MODULE_START)(); // $(MODULE_NAME)" >> $@
	
$(OBJROOT)/$(MODULE_NAME).author: Makefile
	@echo "$(MODULE_AUTHOR)" > $@
	
$(OBJROOT)/$(MODULE_NAME).desc: Makefile
	@echo "$(MODULE_DESCRIPTION)" > $@

#dependencies
-include $(OBJROOT)/Makedep